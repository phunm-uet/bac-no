
bacnet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00004138  000041cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014f  00800172  00800172  0000423e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000423e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000c00  00000000  00000000  00004250  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001a63a  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000031e2  00000000  00000000  0001f48a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000341b  00000000  00000000  0002266c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001d98  00000000  00000000  00025a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009a85  00000000  00000000  00027820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000cf76  00000000  00000000  000312a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000930  00000000  00000000  0003e21b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

bool bacnet_address_same(
    BACNET_ADDRESS * dest,
    BACNET_ADDRESS * src)
{
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <stack_init>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
    uint8_t i = 0;      /* loop counter */
    uint8_t max_len = 0;        /* used for dynamic max */

    if (dest == src)    /* same ? */
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
        return true;

    if (dest->net != src->net)
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
        return false;

    if (dest->len != src->len)
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
        return false;

    max_len = dest->len;
    if (max_len > MAX_MAC_LEN)
        max_len = MAX_MAC_LEN;
    for (i = 0; i < max_len; i++) {
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
        if (dest->adr[i] != src->adr[i])
      40:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_16>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
            return false;
    }
    if (dest->net == 0) {
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
        if (dest->mac_len != src->mac_len)
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
            return false;
        max_len = dest->mac_len;
        if (max_len > MAX_MAC_LEN)
            max_len = MAX_MAC_LEN;
        for (i = 0; i < max_len; i++) {
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	db 04       	cpc	r13, r11
      6a:	eb 04       	cpc	r14, r11
      6c:	57 05       	cpc	r21, r7
      6e:	90 05       	cpc	r25, r0
      70:	c9 05       	cpc	r28, r9
            if (dest->mac[i] != src->mac[i])
      72:	4c 06       	cpc	r4, r28
      74:	80 06       	cpc	r8, r16
      76:	ba 06       	cpc	r11, r26
      78:	37 07       	cpc	r19, r23

0000007a <stack_init>:
    while (p <= &__stack) {
        *p = STACK_CANARY;
        p++;
    }
#else
    __asm volatile (
      7a:	e1 ec       	ldi	r30, 0xC1	; 193
      7c:	f2 e0       	ldi	r31, 0x02	; 2
      7e:	85 ec       	ldi	r24, 0xC5	; 197
      80:	94 e0       	ldi	r25, 0x04	; 4
      82:	01 c0       	rjmp	.+2      	; 0x86 <.cmp>

00000084 <.loop>:
      84:	81 93       	st	Z+, r24

00000086 <.cmp>:
      86:	ef 3f       	cpi	r30, 0xFF	; 255
      88:	f9 07       	cpc	r31, r25
      8a:	e0 f3       	brcs	.-8      	; 0x84 <.loop>
      8c:	d9 f3       	breq	.-10     	; 0x84 <.loop>
                return false;
        }
    }
    return true;
}
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d4 e0       	ldi	r29, 0x04	; 4
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	11 e0       	ldi	r17, 0x01	; 1
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e8 e3       	ldi	r30, 0x38	; 56
      a2:	f1 e4       	ldi	r31, 0x41	; 65
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a2 37       	cpi	r26, 0x72	; 114
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	22 e0       	ldi	r18, 0x02	; 2
      b2:	a2 e7       	ldi	r26, 0x72	; 114
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a1 3c       	cpi	r26, 0xC1	; 193
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
      c4:	0c 94 9a 20 	jmp	0x4134	; 0x4134 <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
}

static uint8_t PDUBuffer[MAX_MPDU];
int main(
    void)
{
      cc:	a2 e1       	ldi	r26, 0x12	; 18
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	ec e6       	ldi	r30, 0x6C	; 108
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__prologue_saves__+0x1e>
    CLKPR = _BV(CLKPCE);
      d8:	80 e8       	ldi	r24, 0x80	; 128
      da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__data_load_end+0x7fbeb7>
    CLKPR = 0;
      de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_load_end+0x7fbeb7>
    DDRB = 0;
      e2:	14 b8       	out	0x04, r1	; 4
    PORTB = 0;
      e4:	15 b8       	out	0x05, r1	; 5
    DDRC = 0;
      e6:	17 b8       	out	0x07, r1	; 7
    PORTC = 0;
      e8:	18 b8       	out	0x08, r1	; 8
    DDRD = 0;
      ea:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0;
      ec:	1b b8       	out	0x0b, r1	; 11
    BIT_CLEAR(MCUSR, WDRF);
      ee:	84 b7       	in	r24, 0x34	; 52
      f0:	87 7f       	andi	r24, 0xF7	; 247
      f2:	84 bf       	out	0x34, r24	; 52
    WDTCSR = 0;
      f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_load_end+0x7fbeb6>
    RS485_Initialize();
      f8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RS485_Initialize>
    LED_NPDU_OFF();
      fc:	5d 9a       	sbi	0x0b, 5	; 11
    LED_NPDU_INIT();
      fe:	55 9a       	sbi	0x0a, 5	; 10
    LED_GREEN_INIT();
     100:	54 9a       	sbi	0x0a, 4	; 10
    LED_GREEN_OFF();
     102:	5c 9a       	sbi	0x0b, 4	; 11
    Timer_Initialize();
     104:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Timer_Initialize>
    __enable_interrupt();
     108:	78 94       	sei
    uint16_t pdu_len = 0;
    BACNET_ADDRESS src; /* source address */

    init();
#if defined(BACDL_MSTP)
    RS485_Set_Baud_Rate(38400);
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	76 e9       	ldi	r23, 0x96	; 150
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 6d 01 	call	0x2da	; 0x2da <RS485_Set_Baud_Rate>
    dlmstp_set_max_master(127);
     116:	8f e7       	ldi	r24, 0x7F	; 127
     118:	0e 94 8b 07 	call	0xf16	; 0xf16 <dlmstp_set_max_master>
    dlmstp_set_max_info_frames(1);
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 84 07 	call	0xf08	; 0xf08 <dlmstp_set_max_info_frames>
#endif
    datalink_init(NULL);
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 94 02 	call	0x528	; 0x528 <dlmstp_init>
    value = BITMASK_CHECK(PINC, 0x0F);
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	96 b1       	in	r25, 0x06	; 6
     12e:	9f 70       	andi	r25, 0x0F	; 15
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	9f 30       	cpi	r25, 0x0F	; 15
     134:	09 f0       	breq	.+2      	; 0x138 <main+0x6c>
     136:	80 e0       	ldi	r24, 0x00	; 0
    value |= (BITMASK_CHECK(PINB, 0x07) << 4);
     138:	93 b1       	in	r25, 0x03	; 3
     13a:	97 70       	andi	r25, 0x07	; 7
     13c:	97 30       	cpi	r25, 0x07	; 7
     13e:	11 f4       	brne	.+4      	; 0x144 <main+0x78>
     140:	90 e1       	ldi	r25, 0x10	; 16
     142:	01 c0       	rjmp	.+2      	; 0x146 <main+0x7a>
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	89 2b       	or	r24, r25
    if (value != old_value) {
     148:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <__data_end>
     14c:	89 17       	cp	r24, r25
     14e:	19 f0       	breq	.+6      	; 0x156 <main+0x8a>
        old_value = value;
     150:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
     154:	15 c0       	rjmp	.+42     	; 0x180 <main+0xb4>
        if (old_value != Address_Switch) {
     156:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <Address_Switch>
     15a:	89 17       	cp	r24, r25
     15c:	89 f0       	breq	.+34     	; 0x180 <main+0xb4>
            Address_Switch = old_value;
     15e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Address_Switch>
            dlmstp_set_mac_address(Address_Switch);
     162:	0e 94 94 07 	call	0xf28	; 0xf28 <dlmstp_set_mac_address>
            Device_Set_Object_Instance_Number(86000 + Address_Switch);
     166:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <Address_Switch>
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	60 51       	subi	r22, 0x10	; 16
     172:	70 4b       	sbci	r23, 0xB0	; 176
     174:	8e 4f       	sbci	r24, 0xFE	; 254
     176:	9f 4f       	sbci	r25, 0xFF	; 255
     178:	0e 94 95 09 	call	0x132a	; 0x132a <Device_Set_Object_Instance_Number>
            Send_I_Am_Flag = true;
     17c:	10 93 26 01 	sts	0x0126, r17	; 0x800126 <Send_I_Am_Flag>
    while (Timer_Milliseconds) {
     180:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Timer_Milliseconds>
     184:	88 23       	and	r24, r24
     186:	41 f0       	breq	.+16     	; 0x198 <main+0xcc>
        Timer_Milliseconds--;
     188:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Timer_Milliseconds>
     18c:	81 50       	subi	r24, 0x01	; 1
     18e:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Timer_Milliseconds>
        RS485_LED_Timers();
     192:	0e 94 df 01 	call	0x3be	; 0x3be <RS485_LED_Timers>
     196:	f4 cf       	rjmp	.-24     	; 0x180 <main+0xb4>
    for (;;) {
        input_switch_read();
        task_milliseconds();
        /* other tasks */
        /* BACnet handling */
        pdu_len = datalink_receive(&src, &PDUBuffer[0], sizeof(PDUBuffer), 0);
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	46 e5       	ldi	r20, 0x56	; 86
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	63 e7       	ldi	r22, 0x73	; 115
     1a2:	71 e0       	ldi	r23, 0x01	; 1
     1a4:	ce 01       	movw	r24, r28
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	0e 94 c0 02 	call	0x580	; 0x580 <dlmstp_receive>
        if (pdu_len) {
     1ac:	00 97       	sbiw	r24, 0x00	; 0
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <main+0xe6>
     1b0:	bd cf       	rjmp	.-134    	; 0x12c <main+0x60>
            LED_NPDU_ON();
     1b2:	5d 98       	cbi	0x0b, 5	; 11
            npdu_handler(&src, &PDUBuffer[0], pdu_len);
     1b4:	ac 01       	movw	r20, r24
     1b6:	63 e7       	ldi	r22, 0x73	; 115
     1b8:	71 e0       	ldi	r23, 0x01	; 1
     1ba:	ce 01       	movw	r24, r28
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	0e 94 84 11 	call	0x2308	; 0x2308 <npdu_handler>
            LED_NPDU_OFF();
     1c2:	5d 9a       	sbi	0x0b, 5	; 11
     1c4:	b3 cf       	rjmp	.-154    	; 0x12c <main+0x60>

000001c6 <Timer_Initialize>:
/* Configure the Timer */
void Timer_Initialize(
    void)
{
    /* Normal Operation */
    TCCR1A = 0;
     1c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_load_end+0x7fbed6>
       1    0    0  CLKio/256
       1    0    1  CLKio/1024
       1    1    0  Falling Edge of T0 (external)
       1    1    1  Rising Edge of T0 (external)
     */
    TCCR0B = _BV(CS01) | _BV(CS00);
     1ca:	83 e0       	ldi	r24, 0x03	; 3
     1cc:	85 bd       	out	0x25, r24	; 37
    /* Clear any TOV1 Flag set when the timer overflowed */
    BIT_CLEAR(TIFR0, TOV0);
     1ce:	a8 98       	cbi	0x15, 0	; 21
    /* Initial value */
    TCNT0 = TIMER_COUNT;
     1d0:	8c e8       	ldi	r24, 0x8C	; 140
     1d2:	86 bd       	out	0x26, r24	; 38
    /* Enable the overflow interrupt */
    BIT_SET(TIMSK0, TOIE0);
     1d4:	ee e6       	ldi	r30, 0x6E	; 110
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	80 83       	st	Z, r24
    /* Clear the Power Reduction Timer/Counter0 */
    BIT_CLEAR(PRR, PRTIM0);
     1de:	e4 e6       	ldi	r30, 0x64	; 100
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8f 7d       	andi	r24, 0xDF	; 223
     1e6:	80 83       	st	Z, r24
     1e8:	08 95       	ret

000001ea <__vector_16>:

/* Timer interupt */
/* note: Global interupts must be enabled - sei() */
/* Timer Overflowed!  Increment the time. */
ISR(TIMER0_OVF_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
    /* Set the counter for the next interrupt */
    TCNT0 = TIMER_COUNT;
     1fa:	8c e8       	ldi	r24, 0x8C	; 140
     1fc:	86 bd       	out	0x26, r24	; 38
    /* Overflow Flag is automatically cleared */
    /* Update the global timer */
    if (Timer_Milliseconds < 0xFF)
     1fe:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Timer_Milliseconds>
     202:	8f 3f       	cpi	r24, 0xFF	; 255
     204:	29 f0       	breq	.+10     	; 0x210 <__vector_16+0x26>
        Timer_Milliseconds++;
     206:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Timer_Milliseconds>
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Timer_Milliseconds>
    if (SilenceTime < 0xFFFF)
     210:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <SilenceTime>
     214:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <SilenceTime+0x1>
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	49 f0       	breq	.+18     	; 0x22e <__vector_16+0x44>
        SilenceTime++;
     21c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <SilenceTime>
     220:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <SilenceTime+0x1>
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <SilenceTime+0x1>
     22a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <SilenceTime>
}
     22e:	9f 91       	pop	r25
     230:	8f 91       	pop	r24
     232:	2f 91       	pop	r18
     234:	0f 90       	pop	r0
     236:	0f be       	out	0x3f, r0	; 63
     238:	0f 90       	pop	r0
     23a:	1f 90       	pop	r1
     23c:	18 95       	reti

0000023e <Timer_Silence>:
uint16_t Timer_Silence(
    void)
{
    uint16_t timer;

    BIT_CLEAR(TIMSK0, TOIE0);
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	80 83       	st	Z, r24
    timer = SilenceTime;
     248:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <SilenceTime>
     24c:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <SilenceTime+0x1>
    BIT_SET(TIMSK0, TOIE0);
     250:	20 81       	ld	r18, Z
     252:	21 60       	ori	r18, 0x01	; 1
     254:	20 83       	st	Z, r18

    return timer;
}
     256:	08 95       	ret

00000258 <Timer_Silence_Reset>:

/* Public reset of the Silence Timer */
void Timer_Silence_Reset(
    void)
{
    BIT_CLEAR(TIMSK0, TOIE0);
     258:	ee e6       	ldi	r30, 0x6E	; 110
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	8e 7f       	andi	r24, 0xFE	; 254
     260:	80 83       	st	Z, r24
    SilenceTime = 0;
     262:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <SilenceTime+0x1>
     266:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <SilenceTime>
    BIT_SET(TIMSK0, TOIE0);
     26a:	80 81       	ld	r24, Z
     26c:	81 60       	ori	r24, 0x01	; 1
     26e:	80 83       	st	Z, r24
     270:	08 95       	ret

00000272 <stack_size>:
#if defined(__GNUC__)
    return (&__stack) - (&_end);
#else
    return 0;
#endif
}
     272:	8f ef       	ldi	r24, 0xFF	; 255
     274:	94 e0       	ldi	r25, 0x04	; 4
     276:	81 5c       	subi	r24, 0xC1	; 193
     278:	92 40       	sbci	r25, 0x02	; 2
     27a:	08 95       	ret

0000027c <stack_unused>:
#endif
}

unsigned stack_unused(
    void)
{
     27c:	21 ec       	ldi	r18, 0xC1	; 193
     27e:	32 e0       	ldi	r19, 0x02	; 2
     280:	f9 01       	movw	r30, r18
    unsigned count = 0;
#if defined(__GNUC__)
    uint8_t *p = &_end;

    while (p <= &__stack) {
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	2f 3f       	cpi	r18, 0xFF	; 255
     286:	38 07       	cpc	r19, r24
     288:	09 f0       	breq	.+2      	; 0x28c <stack_unused+0x10>
     28a:	48 f4       	brcc	.+18     	; 0x29e <stack_unused+0x22>
     28c:	2f 5f       	subi	r18, 0xFF	; 255
     28e:	3f 4f       	sbci	r19, 0xFF	; 255
        if ((*p) != STACK_CANARY) {
     290:	40 81       	ld	r20, Z
     292:	45 3c       	cpi	r20, 0xC5	; 197
     294:	a9 f3       	breq	.-22     	; 0x280 <stack_unused+0x4>
            count = p - (&_end);
     296:	cf 01       	movw	r24, r30
     298:	81 5c       	subi	r24, 0xC1	; 193
     29a:	92 40       	sbci	r25, 0x02	; 2
            break;
     29c:	08 95       	ret
    unsigned count = 0;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
        }
        p++;
    }
#endif
    return count;
}
     2a2:	08 95       	ret

000002a4 <RS485_Initialize>:
*****************************************************************************/
void RS485_Initialize(
    void)
{
    /* enable Transmit and Receive */
    UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     2a4:	88 e1       	ldi	r24, 0x18	; 24
     2a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__data_load_end+0x7fbf17>
    /* Set USART Mode Select: UMSELn1 UMSELn0 = 00 for Asynchronous USART */
    /* Set Parity Mode:  UPMn1 UPMn0 = 00 for Parity Disabled */
    /* Set Stop Bit Select: USBSn = 0 for 1 stop bit */
    /* Set Character Size: UCSZn2 UCSZn1 UCSZn0 = 011 for 8-bit */
    /* Clock Polarity: UCPOLn = 0 when asynchronous mode is used. */
    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_load_end+0x7fbf18>
    /* Clear Power Reduction USART0 */
    BIT_CLEAR(PRR, PRUSART0);
     2b0:	e4 e6       	ldi	r30, 0x64	; 100
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	8d 7f       	andi	r24, 0xFD	; 253
     2b8:	80 83       	st	Z, r24
    /* Use port PD2 for RTS - enable and disable of Transceiver Tx/Rx */
    /* Set port bit as Output - initially receiving */
    BIT_CLEAR(PORTD, PD2);
     2ba:	5a 98       	cbi	0x0b, 2	; 11
    BIT_SET(DDRD, DDD2);
     2bc:	52 9a       	sbi	0x0a, 2	; 10
    /* Configure Transmit and Receive LEDs - initially off */
    BIT_SET(PORTD, PD6);
     2be:	5e 9a       	sbi	0x0b, 6	; 11
    BIT_SET(PORTD, PD7);
     2c0:	5f 9a       	sbi	0x0b, 7	; 11
    BIT_SET(DDRD, DDD6);
     2c2:	56 9a       	sbi	0x0a, 6	; 10
    BIT_SET(DDRD, DDD7);
     2c4:	57 9a       	sbi	0x0a, 7	; 10
     2c6:	08 95       	ret

000002c8 <RS485_Get_Baud_Rate>:
* NOTES:       none
*****************************************************************************/
uint32_t RS485_Get_Baud_Rate(
    void)
{
    return RS485_Baud;
     2c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     2cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     2d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
}
     2d8:	08 95       	ret

000002da <RS485_Set_Baud_Rate>:
bool RS485_Set_Baud_Rate(
    uint32_t baud)
{
    bool valid = true;

    switch (baud) {
     2da:	61 15       	cp	r22, r1
     2dc:	26 e9       	ldi	r18, 0x96	; 150
     2de:	72 07       	cpc	r23, r18
     2e0:	81 05       	cpc	r24, r1
     2e2:	91 05       	cpc	r25, r1
     2e4:	19 f1       	breq	.+70     	; 0x32c <RS485_Set_Baud_Rate+0x52>
     2e6:	70 f4       	brcc	.+28     	; 0x304 <RS485_Set_Baud_Rate+0x2a>
     2e8:	60 38       	cpi	r22, 0x80	; 128
     2ea:	25 e2       	ldi	r18, 0x25	; 37
     2ec:	72 07       	cpc	r23, r18
     2ee:	81 05       	cpc	r24, r1
     2f0:	91 05       	cpc	r25, r1
     2f2:	e1 f0       	breq	.+56     	; 0x32c <RS485_Set_Baud_Rate+0x52>
     2f4:	61 15       	cp	r22, r1
     2f6:	2b e4       	ldi	r18, 0x4B	; 75
     2f8:	72 07       	cpc	r23, r18
     2fa:	81 05       	cpc	r24, r1
     2fc:	91 05       	cpc	r25, r1
     2fe:	09 f0       	breq	.+2      	; 0x302 <RS485_Set_Baud_Rate+0x28>
     300:	3f c0       	rjmp	.+126    	; 0x380 <RS485_Set_Baud_Rate+0xa6>
     302:	14 c0       	rjmp	.+40     	; 0x32c <RS485_Set_Baud_Rate+0x52>
     304:	61 15       	cp	r22, r1
     306:	2c e2       	ldi	r18, 0x2C	; 44
     308:	72 07       	cpc	r23, r18
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	82 07       	cpc	r24, r18
     30e:	91 05       	cpc	r25, r1
     310:	69 f0       	breq	.+26     	; 0x32c <RS485_Set_Baud_Rate+0x52>
     312:	61 15       	cp	r22, r1
     314:	22 ec       	ldi	r18, 0xC2	; 194
     316:	72 07       	cpc	r23, r18
     318:	21 e0       	ldi	r18, 0x01	; 1
     31a:	82 07       	cpc	r24, r18
     31c:	91 05       	cpc	r25, r1
     31e:	31 f0       	breq	.+12     	; 0x32c <RS485_Set_Baud_Rate+0x52>
     320:	61 15       	cp	r22, r1
     322:	21 ee       	ldi	r18, 0xE1	; 225
     324:	72 07       	cpc	r23, r18
     326:	81 05       	cpc	r24, r1
     328:	91 05       	cpc	r25, r1
     32a:	51 f5       	brne	.+84     	; 0x380 <RS485_Set_Baud_Rate+0xa6>
        case 19200:
        case 38400:
        case 57600:
        case 76800:
        case 115200:
            RS485_Baud = baud;
     32c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     330:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     334:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     338:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
            /* 2x speed mode */
            BIT_SET(UCSR0A, U2X0);
     33c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     340:	82 60       	ori	r24, 0x02	; 2
     342:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_load_end+0x7fbf16>
            /* configure baud rate */
            UBRR0 = (F_CPU / (8UL * RS485_Baud)) - 1;
     346:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     34a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     34e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     352:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	22 0f       	add	r18, r18
     35a:	33 1f       	adc	r19, r19
     35c:	44 1f       	adc	r20, r20
     35e:	55 1f       	adc	r21, r21
     360:	8a 95       	dec	r24
     362:	d1 f7       	brne	.-12     	; 0x358 <RS485_Set_Baud_Rate+0x7e>
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e8       	ldi	r23, 0x80	; 128
     368:	80 e7       	ldi	r24, 0x70	; 112
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 27 20 	call	0x404e	; 0x404e <__udivmodsi4>
     370:	21 50       	subi	r18, 0x01	; 1
     372:	31 09       	sbc	r19, r1
     374:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__data_load_end+0x7fbf1b>
     378:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__data_load_end+0x7fbf1a>
    bool valid = true;
     37c:	81 e0       	ldi	r24, 0x01	; 1
            /* FIXME: store the baud rate */
            break;
     37e:	08 95       	ret
        default:
            valid = false;
     380:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }

    return valid;
}
     382:	08 95       	ret

00000384 <RS485_Transmitter_Enable>:
* NOTES:       none
*****************************************************************************/
void RS485_Transmitter_Enable(
    bool enable)
{
    if (enable) {
     384:	88 23       	and	r24, r24
     386:	11 f0       	breq	.+4      	; 0x38c <RS485_Transmitter_Enable+0x8>
        BIT_SET(PORTD, PD2);
     388:	5a 9a       	sbi	0x0b, 2	; 11
     38a:	08 95       	ret
    } else {
        BIT_CLEAR(PORTD, PD2);
     38c:	5a 98       	cbi	0x0b, 2	; 11
     38e:	08 95       	ret

00000390 <RS485_Turnaround_Delay>:
void RS485_Turnaround_Delay(
    void)
{
    uint8_t nbytes = 4;

    RS485_Transmitter_Enable(false);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 c2 01 	call	0x384	; 0x384 <RS485_Transmitter_Enable>
     396:	84 e0       	ldi	r24, 0x04	; 4
    while (nbytes) {
        while (!BIT_CHECK(UCSR0A, UDRE0)) {
            /* do nothing - wait until Tx buffer is empty */
        }
        /* Send the data byte */
        UDR0 = 0xff;
     398:	9f ef       	ldi	r25, 0xFF	; 255
        while (!BIT_CHECK(UCSR0A, UDRE0)) {
     39a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     39e:	25 ff       	sbrs	r18, 5
     3a0:	fc cf       	rjmp	.-8      	; 0x39a <RS485_Turnaround_Delay+0xa>
        UDR0 = 0xff;
     3a2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__data_load_end+0x7fbf1c>
     3a6:	81 50       	subi	r24, 0x01	; 1
    while (nbytes) {
     3a8:	c1 f7       	brne	.-16     	; 0x39a <RS485_Turnaround_Delay+0xa>
        nbytes--;
    }
    /* was the frame sent? */
    while (!BIT_CHECK(UCSR0A, TXC0)) {
     3aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     3ae:	86 ff       	sbrs	r24, 6
     3b0:	fc cf       	rjmp	.-8      	; 0x3aa <RS485_Turnaround_Delay+0x1a>
        /* do nothing - wait until the entire frame in the
           Transmit Shift Register has been shifted out */
    }
    /* Clear the Transmit Complete flag by writing a one to it. */
    BIT_SET(UCSR0A, TXC0);
     3b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     3b6:	80 64       	ori	r24, 0x40	; 64
     3b8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_load_end+0x7fbf16>
     3bc:	08 95       	ret

000003be <RS485_LED_Timers>:
* NOTES:       expected to be called once a millisecond
*****************************************************************************/
void RS485_LED_Timers(
    void)
{
    if (LED1_Off_Timer) {
     3be:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <LED1_Off_Timer>
     3c2:	88 23       	and	r24, r24
     3c4:	31 f0       	breq	.+12     	; 0x3d2 <RS485_LED_Timers+0x14>
        LED1_Off_Timer--;
     3c6:	81 50       	subi	r24, 0x01	; 1
     3c8:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <LED1_Off_Timer>
        if (LED1_Off_Timer == 0) {
     3cc:	81 11       	cpse	r24, r1
     3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <RS485_LED_Timers+0x14>
            BIT_SET(PORTD, PD6);
     3d0:	5e 9a       	sbi	0x0b, 6	; 11
        }
    }
    if (LED3_Off_Timer) {
     3d2:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <LED3_Off_Timer>
     3d6:	88 23       	and	r24, r24
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <RS485_LED_Timers+0x28>
        LED3_Off_Timer--;
     3da:	81 50       	subi	r24, 0x01	; 1
     3dc:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <LED3_Off_Timer>
        if (LED3_Off_Timer == 0) {
     3e0:	81 11       	cpse	r24, r1
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <RS485_LED_Timers+0x28>
            BIT_SET(PORTD, PD7);
     3e4:	5f 9a       	sbi	0x0b, 7	; 11
     3e6:	08 95       	ret

000003e8 <RS485_Send_Data>:
* NOTES:       none
*****************************************************************************/
static void RS485_LED3_On(
    void)
{
    BIT_CLEAR(PORTD, PD7);
     3e8:	5f 98       	cbi	0x0b, 7	; 11
    LED3_Off_Timer = 20;
     3ea:	24 e1       	ldi	r18, 0x14	; 20
     3ec:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <LED3_Off_Timer>
     3f0:	68 0f       	add	r22, r24
     3f2:	79 1f       	adc	r23, r25
void RS485_Send_Data(
    uint8_t * buffer,   /* data to send */
    uint16_t nbytes)
{       /* number of bytes of data */
    RS485_LED3_On();
    while (nbytes) {
     3f4:	86 17       	cp	r24, r22
     3f6:	97 07       	cpc	r25, r23
     3f8:	51 f0       	breq	.+20     	; 0x40e <RS485_Send_Data+0x26>
        while (!BIT_CHECK(UCSR0A, UDRE0)) {
     3fa:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     3fe:	25 ff       	sbrs	r18, 5
     400:	fc cf       	rjmp	.-8      	; 0x3fa <RS485_Send_Data+0x12>
            /* do nothing - wait until Tx buffer is empty */
        }
        /* Send the data byte */
        UDR0 = *buffer;
     402:	fc 01       	movw	r30, r24
     404:	21 91       	ld	r18, Z+
     406:	cf 01       	movw	r24, r30
     408:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__data_load_end+0x7fbf1c>
     40c:	f3 cf       	rjmp	.-26     	; 0x3f4 <RS485_Send_Data+0xc>
        buffer++;
        nbytes--;
    }
    /* was the frame sent? */
    while (!BIT_CHECK(UCSR0A, TXC0)) {
     40e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     412:	86 ff       	sbrs	r24, 6
     414:	fc cf       	rjmp	.-8      	; 0x40e <RS485_Send_Data+0x26>
        /* do nothing - wait until the entire frame in the
           Transmit Shift Register has been shifted out */
    }
    /* Clear the Transmit Complete flag by writing a one to it. */
    BIT_SET(UCSR0A, TXC0);
     416:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     41a:	80 64       	ori	r24, 0x40	; 64
     41c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_load_end+0x7fbf16>
    /* per MSTP spec, sort of */
    Timer_Silence_Reset();
     420:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
     424:	08 95       	ret

00000426 <RS485_ReceiveError>:
        BITMASK_CLEAR(UCSR0A, (_BV(FE0) | _BV(DOR0) | _BV(UPE0)));
        ReceiveError = true;
    }
#endif
    /* check for overrun error */
    if (BIT_CHECK(UCSR0A, DOR0)) {
     426:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     42a:	83 ff       	sbrs	r24, 3
     42c:	07 c0       	rjmp	.+14     	; 0x43c <RS485_ReceiveError+0x16>
        /* flush the receive buffer */
        do {
            dummy_data = UDR0;
     42e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_load_end+0x7fbf1c>
        } while (BIT_CHECK(UCSR0A, RXC0));
     432:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     436:	87 fd       	sbrc	r24, 7
     438:	fa cf       	rjmp	.-12     	; 0x42e <RS485_ReceiveError+0x8>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <RS485_ReceiveError+0x1a>
    bool ReceiveError = false;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
    BIT_CLEAR(PORTD, PD6);
     440:	5e 98       	cbi	0x0b, 6	; 11
    LED1_Off_Timer = 20;
     442:	84 e1       	ldi	r24, 0x14	; 20
     444:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <LED1_Off_Timer>
        ReceiveError = true;
     448:	81 e0       	ldi	r24, 0x01	; 1
    if (ReceiveError) {
        RS485_LED1_On();
    }

    return ReceiveError;
}
     44a:	08 95       	ret

0000044c <RS485_DataAvailable>:
    uint8_t * data)
{
    bool DataAvailable = false;

    /* check for data */
    if (BIT_CHECK(UCSR0A, RXC0)) {
     44c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__data_load_end+0x7fbf16>
     450:	27 ff       	sbrs	r18, 7
     452:	0a c0       	rjmp	.+20     	; 0x468 <RS485_DataAvailable+0x1c>
        *data = UDR0;
     454:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__data_load_end+0x7fbf1c>
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
    BIT_CLEAR(PORTD, PD6);
     45c:	5e 98       	cbi	0x0b, 6	; 11
    LED1_Off_Timer = 20;
     45e:	84 e1       	ldi	r24, 0x14	; 20
     460:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <LED1_Off_Timer>
        DataAvailable = true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	08 95       	ret
    bool DataAvailable = false;
     468:	80 e0       	ldi	r24, 0x00	; 0
        RS485_LED1_On();
    }

    return DataAvailable;
}
     46a:	08 95       	ret

0000046c <MSTP_Send_Frame>:
    uint8_t frame_type, /* type of frame to send - see defines */
    uint8_t destination,        /* destination address */
    uint8_t source,     /* source address */
    uint8_t * pdu,      /* any data to be sent - may be null */
    uint16_t pdu_len)
{       /* number of bytes of data (up to 501) */
     46c:	ab e0       	ldi	r26, 0x0B	; 11
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	ec e3       	ldi	r30, 0x3C	; 60
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
     478:	d6 2e       	mov	r13, r22
     47a:	79 01       	movw	r14, r18
    uint8_t buffer[8];  /* stores the header and crc */
    uint8_t datacrc[2]; /* stores the data crc */
    uint16_t i = 0;     /* used to calculate CRC for data */

    /* create the MS/TP header */
    buffer[0] = 0x55;
     47c:	95 e5       	ldi	r25, 0x55	; 85
     47e:	99 83       	std	Y+1, r25	; 0x01
    buffer[1] = 0xFF;
     480:	9f ef       	ldi	r25, 0xFF	; 255
     482:	9a 83       	std	Y+2, r25	; 0x02
    buffer[2] = frame_type;
     484:	8b 83       	std	Y+3, r24	; 0x03
    crc8 = CRC_Calc_Header(buffer[2], crc8);
     486:	6f ef       	ldi	r22, 0xFF	; 255
     488:	4b 87       	std	Y+11, r20	; 0x0b
     48a:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
    buffer[3] = destination;
     48e:	dc 82       	std	Y+4, r13	; 0x04
    crc8 = CRC_Calc_Header(buffer[3], crc8);
     490:	68 2f       	mov	r22, r24
     492:	8d 2d       	mov	r24, r13
     494:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
    buffer[4] = source;
     498:	4b 85       	ldd	r20, Y+11	; 0x0b
     49a:	4d 83       	std	Y+5, r20	; 0x05
    crc8 = CRC_Calc_Header(buffer[4], crc8);
     49c:	68 2f       	mov	r22, r24
     49e:	84 2f       	mov	r24, r20
     4a0:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>

    buffer[5] = HI_BYTE(pdu_len);
     4a4:	1e 83       	std	Y+6, r17	; 0x06
    crc8 = CRC_Calc_Header(buffer[5], crc8);
     4a6:	68 2f       	mov	r22, r24
     4a8:	81 2f       	mov	r24, r17
     4aa:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
    buffer[6] = LO_BYTE(pdu_len);
     4ae:	0f 83       	std	Y+7, r16	; 0x07
    crc8 = CRC_Calc_Header(buffer[6], crc8);
     4b0:	68 2f       	mov	r22, r24
     4b2:	80 2f       	mov	r24, r16
     4b4:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
    buffer[7] = ~crc8;
     4b8:	80 95       	com	r24
     4ba:	88 87       	std	Y+8, r24	; 0x08
    if (pdu_len) {
     4bc:	01 15       	cp	r16, r1
     4be:	11 05       	cpc	r17, r1
     4c0:	a1 f0       	breq	.+40     	; 0x4ea <MSTP_Send_Frame+0x7e>
     4c2:	67 01       	movw	r12, r14
     4c4:	57 01       	movw	r10, r14
     4c6:	a0 0e       	add	r10, r16
     4c8:	b1 1e       	adc	r11, r17
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	9f ef       	ldi	r25, 0xFF	; 255
        /* calculate CRC for any data */
        for (i = 0; i < pdu_len; i++) {
     4ce:	ca 14       	cp	r12, r10
     4d0:	db 04       	cpc	r13, r11
     4d2:	39 f0       	breq	.+14     	; 0x4e2 <MSTP_Send_Frame+0x76>
            crc16 = CRC_Calc_Data(pdu[i], crc16);
     4d4:	bc 01       	movw	r22, r24
     4d6:	f6 01       	movw	r30, r12
     4d8:	81 91       	ld	r24, Z+
     4da:	6f 01       	movw	r12, r30
     4dc:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <CRC_Calc_Data>
     4e0:	f6 cf       	rjmp	.-20     	; 0x4ce <MSTP_Send_Frame+0x62>
        }
        crc16 = ~crc16;
     4e2:	80 95       	com	r24
     4e4:	90 95       	com	r25
        datacrc[0] = (crc16 & 0x00FF);
     4e6:	89 87       	std	Y+9, r24	; 0x09
        datacrc[1] = ((crc16 & 0xFF00) >> 8);
     4e8:	9a 87       	std	Y+10, r25	; 0x0a
    }
    /* now transmit the frame */
    RS485_Turnaround_Delay();
     4ea:	0e 94 c8 01 	call	0x390	; 0x390 <RS485_Turnaround_Delay>
    RS485_Transmitter_Enable(true);
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	0e 94 c2 01 	call	0x384	; 0x384 <RS485_Transmitter_Enable>
    RS485_Send_Data(buffer, 8);
     4f4:	68 e0       	ldi	r22, 0x08	; 8
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <RS485_Send_Data>
    /* send any data */
    if (pdu_len) {
     500:	01 15       	cp	r16, r1
     502:	11 05       	cpc	r17, r1
     504:	51 f0       	breq	.+20     	; 0x51a <__stack+0x1b>
        RS485_Send_Data(pdu, pdu_len);
     506:	b8 01       	movw	r22, r16
     508:	c7 01       	movw	r24, r14
     50a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <RS485_Send_Data>
        RS485_Send_Data(datacrc, 2);
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	ce 01       	movw	r24, r28
     514:	09 96       	adiw	r24, 0x09	; 9
     516:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <RS485_Send_Data>
    }
    RS485_Transmitter_Enable(false);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 c2 01 	call	0x384	; 0x384 <RS485_Transmitter_Enable>
}
     520:	2b 96       	adiw	r28, 0x0b	; 11
     522:	ea e0       	ldi	r30, 0x0A	; 10
     524:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00000528 <dlmstp_init>:
    RS485_Initialize();
     528:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RS485_Initialize>
}
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	08 95       	ret

00000530 <dlmstp_send_pdu>:
int dlmstp_send_pdu(
    BACNET_ADDRESS * dest,      /* destination address */
    BACNET_NPDU_DATA * npdu_data,       /* network information */
    uint8_t * pdu,      /* any data to be sent - may be null */
    unsigned pdu_len)
{       /* number of bytes of data */
     530:	fc 01       	movw	r30, r24
    int bytes_sent = 0;

    if (MSTP_Flag.TransmitPacketPending == false) {
     532:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     536:	83 fd       	sbrc	r24, 3
     538:	20 c0       	rjmp	.+64     	; 0x57a <dlmstp_send_pdu+0x4a>
        MSTP_Flag.TransmitPacketDER = npdu_data->data_expecting_reply;
     53a:	db 01       	movw	r26, r22
     53c:	11 96       	adiw	r26, 0x01	; 1
     53e:	9c 91       	ld	r25, X
     540:	90 fb       	bst	r25, 0
     542:	84 f9       	bld	r24, 4
     544:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
        TransmitPacket = pdu;
     548:	50 93 df 01 	sts	0x01DF, r21	; 0x8001df <TransmitPacket+0x1>
     54c:	40 93 de 01 	sts	0x01DE, r20	; 0x8001de <TransmitPacket>
        TransmitPacketLen = pdu_len;
     550:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <TransmitPacketLen>
     554:	30 93 dd 01 	sts	0x01DD, r19	; 0x8001dd <TransmitPacketLen+0x1>
        bytes_sent = pdu_len;
     558:	c9 01       	movw	r24, r18
        if (dest && dest->mac_len) {
     55a:	30 97       	sbiw	r30, 0x00	; 0
     55c:	29 f0       	breq	.+10     	; 0x568 <dlmstp_send_pdu+0x38>
     55e:	20 81       	ld	r18, Z
     560:	22 23       	and	r18, r18
     562:	11 f0       	breq	.+4      	; 0x568 <dlmstp_send_pdu+0x38>
            TransmitPacketDest = dest->mac[0];
     564:	21 81       	ldd	r18, Z+1	; 0x01
     566:	01 c0       	rjmp	.+2      	; 0x56a <dlmstp_send_pdu+0x3a>
        } else {
            /* mac_len = 0 is a broadcast address */
            TransmitPacketDest = MSTP_BROADCAST_ADDRESS;
     568:	2f ef       	ldi	r18, 0xFF	; 255
     56a:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <TransmitPacketDest>
        }
        MSTP_Flag.TransmitPacketPending = true;
     56e:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <MSTP_Flag>
     572:	28 60       	ori	r18, 0x08	; 8
     574:	20 93 ed 01 	sts	0x01ED, r18	; 0x8001ed <MSTP_Flag>
     578:	08 95       	ret
    int bytes_sent = 0;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
    }

    return bytes_sent;
}
     57e:	08 95       	ret

00000580 <dlmstp_receive>:
uint16_t dlmstp_receive(
    BACNET_ADDRESS * src,       /* source address */
    uint8_t * pdu,      /* PDU data */
    uint16_t max_pdu,   /* amount of space available in the PDU  */
    unsigned timeout)
{       /* milliseconds to wait for a packet */
     580:	ad e1       	ldi	r26, 0x1D	; 29
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e6 ec       	ldi	r30, 0xC6	; 198
     586:	f2 e0       	ldi	r31, 0x02	; 2
     588:	0c 94 4f 20 	jmp	0x409e	; 0x409e <__prologue_saves__>
     58c:	7c 01       	movw	r14, r24
    uint16_t pdu_len = 0;       /* return value */

    /* dummy - unused parameter */
    timeout = timeout;
    /* set the input buffer to the same data storage for zero copy */
    if (!InputBuffer) {
     58e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <InputBuffer>
     592:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <InputBuffer+0x1>
     596:	89 2b       	or	r24, r25
     598:	41 f4       	brne	.+16     	; 0x5aa <dlmstp_receive+0x2a>
        InputBuffer = pdu;
     59a:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <InputBuffer+0x1>
     59e:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <InputBuffer>
        InputBufferSize = max_pdu;
     5a2:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <InputBufferSize+0x1>
     5a6:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <InputBufferSize>
    }
    /* only do receive state machine while we don't have a frame */
    if ((MSTP_Flag.ReceivedValidFrame == false) &&
     5aa:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     5ae:	83 70       	andi	r24, 0x03	; 3
     5b0:	41 f0       	breq	.+16     	; 0x5c2 <dlmstp_receive+0x42>
            if (Receive_State == MSTP_RECEIVE_STATE_IDLE)
                break;
        }
    }
    /* only do master state machine while rx is idle */
    if (Receive_State == MSTP_RECEIVE_STATE_IDLE) {
     5b2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Receive_State>
     5b6:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <Receive_State+0x1>
     5ba:	89 2b       	or	r24, r25
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <dlmstp_receive+0x40>
     5be:	be c1       	rjmp	.+892    	; 0x93c <dlmstp_receive+0x3bc>
     5c0:	8b c4       	rjmp	.+2326   	; 0xed8 <dlmstp_receive+0x958>
                    Receive_State = MSTP_RECEIVE_STATE_PREAMBLE;
     5c2:	01 e0       	ldi	r16, 0x01	; 1
     5c4:	10 e0       	ldi	r17, 0x00	; 0
                    Receive_State = MSTP_RECEIVE_STATE_HEADER;
     5c6:	42 e0       	ldi	r20, 0x02	; 2
     5c8:	c4 2e       	mov	r12, r20
     5ca:	d1 2c       	mov	r13, r1
                            DataCRC = 0xFFFF;
     5cc:	44 24       	eor	r4, r4
     5ce:	4a 94       	dec	r4
     5d0:	54 2c       	mov	r5, r4
                            Receive_State = MSTP_RECEIVE_STATE_DATA;
     5d2:	63 e0       	ldi	r22, 0x03	; 3
     5d4:	a6 2e       	mov	r10, r22
     5d6:	b1 2c       	mov	r11, r1
                    Index = 5;
     5d8:	75 e0       	ldi	r23, 0x05	; 5
     5da:	67 2e       	mov	r6, r23
     5dc:	71 2c       	mov	r7, r1
                    Index = 4;
     5de:	e4 e0       	ldi	r30, 0x04	; 4
     5e0:	8e 2e       	mov	r8, r30
     5e2:	91 2c       	mov	r9, r1
    uint8_t DataRegister = 0;
     5e4:	19 82       	std	Y+1, r1	; 0x01
    switch (Receive_State) {
     5e6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Receive_State>
     5ea:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <Receive_State+0x1>
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	91 05       	cpc	r25, r1
     5f2:	69 f1       	breq	.+90     	; 0x64e <dlmstp_receive+0xce>
     5f4:	40 f0       	brcs	.+16     	; 0x606 <dlmstp_receive+0x86>
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	91 05       	cpc	r25, r1
     5fa:	09 f4       	brne	.+2      	; 0x5fe <dlmstp_receive+0x7e>
     5fc:	62 c0       	rjmp	.+196    	; 0x6c2 <dlmstp_receive+0x142>
     5fe:	03 97       	sbiw	r24, 0x03	; 3
     600:	09 f4       	brne	.+2      	; 0x604 <dlmstp_receive+0x84>
     602:	08 c1       	rjmp	.+528    	; 0x814 <dlmstp_receive+0x294>
     604:	8a c1       	rjmp	.+788    	; 0x91a <dlmstp_receive+0x39a>
            if (RS485_ReceiveError()) {
     606:	0e 94 13 02 	call	0x426	; 0x426 <RS485_ReceiveError>
     60a:	88 23       	and	r24, r24
     60c:	59 f0       	breq	.+22     	; 0x624 <dlmstp_receive+0xa4>
                Timer_Silence_Reset();
     60e:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
                INCREMENT_AND_LIMIT_UINT8(EventCount);
     612:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     616:	8f 3f       	cpi	r24, 0xFF	; 255
     618:	09 f4       	brne	.+2      	; 0x61c <dlmstp_receive+0x9c>
     61a:	83 c1       	rjmp	.+774    	; 0x922 <dlmstp_receive+0x3a2>
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <EventCount>
     622:	7f c1       	rjmp	.+766    	; 0x922 <dlmstp_receive+0x3a2>
            } else if (RS485_DataAvailable(&DataRegister)) {
     624:	ce 01       	movw	r24, r28
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	0e 94 26 02 	call	0x44c	; 0x44c <RS485_DataAvailable>
     62c:	88 23       	and	r24, r24
     62e:	09 f4       	brne	.+2      	; 0x632 <dlmstp_receive+0xb2>
     630:	78 c1       	rjmp	.+752    	; 0x922 <dlmstp_receive+0x3a2>
                Timer_Silence_Reset();
     632:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
                INCREMENT_AND_LIMIT_UINT8(EventCount);
     636:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     63a:	8f 3f       	cpi	r24, 0xFF	; 255
     63c:	19 f0       	breq	.+6      	; 0x644 <dlmstp_receive+0xc4>
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <EventCount>
                if (DataRegister == 0x55) {
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	85 35       	cpi	r24, 0x55	; 85
     648:	09 f0       	breq	.+2      	; 0x64c <dlmstp_receive+0xcc>
     64a:	6b c1       	rjmp	.+726    	; 0x922 <dlmstp_receive+0x3a2>
     64c:	35 c0       	rjmp	.+106    	; 0x6b8 <dlmstp_receive+0x138>
            if (Timer_Silence() > Tframe_abort) {
     64e:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     652:	4f 97       	sbiw	r24, 0x1f	; 31
     654:	08 f0       	brcs	.+2      	; 0x658 <dlmstp_receive+0xd8>
     656:	61 c1       	rjmp	.+706    	; 0x91a <dlmstp_receive+0x39a>
            } else if (RS485_ReceiveError()) {
     658:	0e 94 13 02 	call	0x426	; 0x426 <RS485_ReceiveError>
     65c:	88 23       	and	r24, r24
     65e:	59 f0       	breq	.+22     	; 0x676 <dlmstp_receive+0xf6>
                Timer_Silence_Reset();
     660:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
                INCREMENT_AND_LIMIT_UINT8(EventCount);
     664:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     668:	8f 3f       	cpi	r24, 0xFF	; 255
     66a:	09 f4       	brne	.+2      	; 0x66e <dlmstp_receive+0xee>
     66c:	56 c1       	rjmp	.+684    	; 0x91a <dlmstp_receive+0x39a>
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <EventCount>
     674:	52 c1       	rjmp	.+676    	; 0x91a <dlmstp_receive+0x39a>
            } else if (RS485_DataAvailable(&DataRegister)) {
     676:	ce 01       	movw	r24, r28
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	0e 94 26 02 	call	0x44c	; 0x44c <RS485_DataAvailable>
     67e:	88 23       	and	r24, r24
     680:	09 f4       	brne	.+2      	; 0x684 <dlmstp_receive+0x104>
     682:	4f c1       	rjmp	.+670    	; 0x922 <dlmstp_receive+0x3a2>
                Timer_Silence_Reset();
     684:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
                INCREMENT_AND_LIMIT_UINT8(EventCount);
     688:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     68c:	8f 3f       	cpi	r24, 0xFF	; 255
     68e:	19 f0       	breq	.+6      	; 0x696 <dlmstp_receive+0x116>
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <EventCount>
                if (DataRegister == 0xFF) {
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	8f 3f       	cpi	r24, 0xFF	; 255
     69a:	59 f4       	brne	.+22     	; 0x6b2 <dlmstp_receive+0x132>
                    Index = 0;
     69c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <Index.5554+0x1>
     6a0:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Index.5554>
                    HeaderCRC = 0xFF;
     6a4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <HeaderCRC.5553>
                    Receive_State = MSTP_RECEIVE_STATE_HEADER;
     6a8:	d0 92 f1 01 	sts	0x01F1, r13	; 0x8001f1 <Receive_State+0x1>
     6ac:	c0 92 f0 01 	sts	0x01F0, r12	; 0x8001f0 <Receive_State>
     6b0:	38 c1       	rjmp	.+624    	; 0x922 <dlmstp_receive+0x3a2>
                } else if (DataRegister == 0x55) {
     6b2:	85 35       	cpi	r24, 0x55	; 85
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <dlmstp_receive+0x138>
     6b6:	31 c1       	rjmp	.+610    	; 0x91a <dlmstp_receive+0x39a>
                    Receive_State = MSTP_RECEIVE_STATE_PREAMBLE;
     6b8:	10 93 f1 01 	sts	0x01F1, r17	; 0x8001f1 <Receive_State+0x1>
     6bc:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <Receive_State>
     6c0:	30 c1       	rjmp	.+608    	; 0x922 <dlmstp_receive+0x3a2>
            if (Timer_Silence() > Tframe_abort) {
     6c2:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     6c6:	4f 97       	sbiw	r24, 0x1f	; 31
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <dlmstp_receive+0x14c>
     6ca:	22 c1       	rjmp	.+580    	; 0x910 <dlmstp_receive+0x390>
            } else if (RS485_ReceiveError()) {
     6cc:	0e 94 13 02 	call	0x426	; 0x426 <RS485_ReceiveError>
     6d0:	81 11       	cpse	r24, r1
     6d2:	a9 c0       	rjmp	.+338    	; 0x826 <dlmstp_receive+0x2a6>
            } else if (RS485_DataAvailable(&DataRegister)) {
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	0e 94 26 02 	call	0x44c	; 0x44c <RS485_DataAvailable>
     6dc:	88 23       	and	r24, r24
     6de:	09 f4       	brne	.+2      	; 0x6e2 <dlmstp_receive+0x162>
     6e0:	20 c1       	rjmp	.+576    	; 0x922 <dlmstp_receive+0x3a2>
                Timer_Silence_Reset();
     6e2:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
                INCREMENT_AND_LIMIT_UINT8(EventCount);
     6e6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     6ea:	8f 3f       	cpi	r24, 0xFF	; 255
     6ec:	19 f0       	breq	.+6      	; 0x6f4 <dlmstp_receive+0x174>
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <EventCount>
                if (Index == 0) {
     6f4:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <Index.5554>
     6f8:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <Index.5554+0x1>
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	79 f4       	brne	.+30     	; 0x71e <dlmstp_receive+0x19e>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
     700:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <HeaderCRC.5553>
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
     70a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <HeaderCRC.5553>
                    FrameType = DataRegister;
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <FrameType>
                    Index = 1;
     714:	10 93 da 01 	sts	0x01DA, r17	; 0x8001da <Index.5554+0x1>
     718:	00 93 d9 01 	sts	0x01D9, r16	; 0x8001d9 <Index.5554>
     71c:	02 c1       	rjmp	.+516    	; 0x922 <dlmstp_receive+0x3a2>
                } else if (Index == 1) {
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	91 05       	cpc	r25, r1
     722:	79 f4       	brne	.+30     	; 0x742 <dlmstp_receive+0x1c2>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
     724:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <HeaderCRC.5553>
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
     72e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <HeaderCRC.5553>
                    DestinationAddress = DataRegister;
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <DestinationAddress>
                    Index = 2;
     738:	d0 92 da 01 	sts	0x01DA, r13	; 0x8001da <Index.5554+0x1>
     73c:	c0 92 d9 01 	sts	0x01D9, r12	; 0x8001d9 <Index.5554>
     740:	f0 c0       	rjmp	.+480    	; 0x922 <dlmstp_receive+0x3a2>
                } else if (Index == 2) {
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	91 05       	cpc	r25, r1
     746:	79 f4       	brne	.+30     	; 0x766 <dlmstp_receive+0x1e6>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
     748:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <HeaderCRC.5553>
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
     752:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <HeaderCRC.5553>
                    SourceAddress = DataRegister;
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <SourceAddress>
                    Index = 3;
     75c:	b0 92 da 01 	sts	0x01DA, r11	; 0x8001da <Index.5554+0x1>
     760:	a0 92 d9 01 	sts	0x01D9, r10	; 0x8001d9 <Index.5554>
     764:	de c0       	rjmp	.+444    	; 0x922 <dlmstp_receive+0x3a2>
                } else if (Index == 3) {
     766:	83 30       	cpi	r24, 0x03	; 3
     768:	91 05       	cpc	r25, r1
     76a:	89 f4       	brne	.+34     	; 0x78e <dlmstp_receive+0x20e>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
     76c:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <HeaderCRC.5553>
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
     776:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <HeaderCRC.5553>
                    DataLength = DataRegister * 256;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <DataLength>
     780:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <DataLength+0x1>
                    Index = 4;
     784:	90 92 da 01 	sts	0x01DA, r9	; 0x8001da <Index.5554+0x1>
     788:	80 92 d9 01 	sts	0x01D9, r8	; 0x8001d9 <Index.5554>
     78c:	ca c0       	rjmp	.+404    	; 0x922 <dlmstp_receive+0x3a2>
                } else if (Index == 4) {
     78e:	84 30       	cpi	r24, 0x04	; 4
     790:	91 05       	cpc	r25, r1
     792:	b9 f4       	brne	.+46     	; 0x7c2 <dlmstp_receive+0x242>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
     794:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <HeaderCRC.5553>
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
     79e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <HeaderCRC.5553>
                    DataLength += DataRegister;
     7a2:	29 81       	ldd	r18, Y+1	; 0x01
     7a4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <DataLength>
     7a8:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <DataLength+0x1>
     7ac:	82 0f       	add	r24, r18
     7ae:	91 1d       	adc	r25, r1
     7b0:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <DataLength+0x1>
     7b4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <DataLength>
                    Index = 5;
     7b8:	70 92 da 01 	sts	0x01DA, r7	; 0x8001da <Index.5554+0x1>
     7bc:	60 92 d9 01 	sts	0x01D9, r6	; 0x8001d9 <Index.5554>
     7c0:	b0 c0       	rjmp	.+352    	; 0x922 <dlmstp_receive+0x3a2>
                } else if (Index == 5) {
     7c2:	05 97       	sbiw	r24, 0x05	; 5
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <dlmstp_receive+0x248>
     7c6:	a4 c0       	rjmp	.+328    	; 0x910 <dlmstp_receive+0x390>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
     7c8:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <HeaderCRC.5553>
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	0e 94 34 12 	call	0x2468	; 0x2468 <CRC_Calc_Header>
     7d2:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <HeaderCRC.5553>
                    if (HeaderCRC != 0x55) {
     7d6:	85 35       	cpi	r24, 0x55	; 85
     7d8:	09 f0       	breq	.+2      	; 0x7dc <dlmstp_receive+0x25c>
     7da:	9a c0       	rjmp	.+308    	; 0x910 <dlmstp_receive+0x390>
                        if ((DataLength) && (DataLength <= InputBufferSize)) {
     7dc:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <DataLength>
     7e0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <DataLength+0x1>
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	09 f4       	brne	.+2      	; 0x7ea <dlmstp_receive+0x26a>
     7e8:	87 c0       	rjmp	.+270    	; 0x8f8 <dlmstp_receive+0x378>
     7ea:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <InputBufferSize>
     7ee:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <InputBufferSize+0x1>
     7f2:	28 17       	cp	r18, r24
     7f4:	39 07       	cpc	r19, r25
     7f6:	08 f4       	brcc	.+2      	; 0x7fa <dlmstp_receive+0x27a>
     7f8:	8b c0       	rjmp	.+278    	; 0x910 <dlmstp_receive+0x390>
                            Index = 0;
     7fa:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <Index.5554+0x1>
     7fe:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Index.5554>
                            DataCRC = 0xFFFF;
     802:	50 92 d7 01 	sts	0x01D7, r5	; 0x8001d7 <DataCRC.5552+0x1>
     806:	40 92 d6 01 	sts	0x01D6, r4	; 0x8001d6 <DataCRC.5552>
                            Receive_State = MSTP_RECEIVE_STATE_DATA;
     80a:	b0 92 f1 01 	sts	0x01F1, r11	; 0x8001f1 <Receive_State+0x1>
     80e:	a0 92 f0 01 	sts	0x01F0, r10	; 0x8001f0 <Receive_State>
     812:	87 c0       	rjmp	.+270    	; 0x922 <dlmstp_receive+0x3a2>
            if (Timer_Silence() > Tframe_abort) {
     814:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     818:	4f 97       	sbiw	r24, 0x1f	; 31
     81a:	08 f0       	brcs	.+2      	; 0x81e <dlmstp_receive+0x29e>
     81c:	79 c0       	rjmp	.+242    	; 0x910 <dlmstp_receive+0x390>
            } else if (RS485_ReceiveError()) {
     81e:	0e 94 13 02 	call	0x426	; 0x426 <RS485_ReceiveError>
     822:	88 23       	and	r24, r24
     824:	59 f0       	breq	.+22     	; 0x83c <dlmstp_receive+0x2bc>
                Timer_Silence_Reset();
     826:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
                INCREMENT_AND_LIMIT_UINT8(EventCount);
     82a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	09 f4       	brne	.+2      	; 0x834 <dlmstp_receive+0x2b4>
     832:	6e c0       	rjmp	.+220    	; 0x910 <dlmstp_receive+0x390>
     834:	8f 5f       	subi	r24, 0xFF	; 255
     836:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <EventCount>
     83a:	6a c0       	rjmp	.+212    	; 0x910 <dlmstp_receive+0x390>
            } else if (RS485_DataAvailable(&DataRegister)) {
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	0e 94 26 02 	call	0x44c	; 0x44c <RS485_DataAvailable>
     844:	88 23       	and	r24, r24
     846:	09 f4       	brne	.+2      	; 0x84a <dlmstp_receive+0x2ca>
     848:	6c c0       	rjmp	.+216    	; 0x922 <dlmstp_receive+0x3a2>
                Timer_Silence_Reset();
     84a:	0e 94 2c 01 	call	0x258	; 0x258 <Timer_Silence_Reset>
                INCREMENT_AND_LIMIT_UINT8(EventCount);
     84e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     852:	8f 3f       	cpi	r24, 0xFF	; 255
     854:	19 f0       	breq	.+6      	; 0x85c <dlmstp_receive+0x2dc>
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <EventCount>
                if (Index < DataLength) {
     85c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <Index.5554>
     860:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <Index.5554+0x1>
     864:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <DataLength>
     868:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <DataLength+0x1>
     86c:	82 17       	cp	r24, r18
     86e:	93 07       	cpc	r25, r19
     870:	c0 f4       	brcc	.+48     	; 0x8a2 <dlmstp_receive+0x322>
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
     872:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <DataCRC.5552>
     876:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <DataCRC.5552+0x1>
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <CRC_Calc_Data>
     880:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <DataCRC.5552+0x1>
     884:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <DataCRC.5552>
                    InputBuffer[Index] = DataRegister;
     888:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <Index.5554>
     88c:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <Index.5554+0x1>
     890:	29 81       	ldd	r18, Y+1	; 0x01
     892:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <InputBuffer>
     896:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <InputBuffer+0x1>
     89a:	e8 0f       	add	r30, r24
     89c:	f9 1f       	adc	r31, r25
     89e:	20 83       	st	Z, r18
     8a0:	12 c0       	rjmp	.+36     	; 0x8c6 <dlmstp_receive+0x346>
                } else if (Index == DataLength) {
     8a2:	82 17       	cp	r24, r18
     8a4:	93 07       	cpc	r25, r19
     8a6:	a9 f4       	brne	.+42     	; 0x8d2 <dlmstp_receive+0x352>
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
     8a8:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <DataCRC.5552>
     8ac:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <DataCRC.5552+0x1>
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <CRC_Calc_Data>
     8b6:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <DataCRC.5552+0x1>
     8ba:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <DataCRC.5552>
                    Index++;
     8be:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <Index.5554>
     8c2:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <Index.5554+0x1>
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <Index.5554+0x1>
     8cc:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <Index.5554>
     8d0:	28 c0       	rjmp	.+80     	; 0x922 <dlmstp_receive+0x3a2>
                } else if (Index == (DataLength + 1)) {
     8d2:	2f 5f       	subi	r18, 0xFF	; 255
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	82 17       	cp	r24, r18
     8d8:	93 07       	cpc	r25, r19
     8da:	19 f5       	brne	.+70     	; 0x922 <dlmstp_receive+0x3a2>
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
     8dc:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <DataCRC.5552>
     8e0:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <DataCRC.5552+0x1>
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <CRC_Calc_Data>
     8ea:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <DataCRC.5552+0x1>
     8ee:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <DataCRC.5552>
                    if (DataCRC == 0xF0B8) {
     8f2:	88 3b       	cpi	r24, 0xB8	; 184
     8f4:	90 4f       	sbci	r25, 0xF0	; 240
     8f6:	61 f4       	brne	.+24     	; 0x910 <dlmstp_receive+0x390>
                        if ((DestinationAddress == This_Station) ||
     8f8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <DestinationAddress>
     8fc:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <This_Station>
     900:	89 17       	cp	r24, r25
     902:	11 f0       	breq	.+4      	; 0x908 <dlmstp_receive+0x388>
     904:	8f 3f       	cpi	r24, 0xFF	; 255
     906:	49 f4       	brne	.+18     	; 0x91a <dlmstp_receive+0x39a>
                            MSTP_Flag.ReceivedValidFrame = true;
     908:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	03 c0       	rjmp	.+6      	; 0x916 <dlmstp_receive+0x396>
                        MSTP_Flag.ReceivedInvalidFrame = true;
     910:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     914:	81 60       	ori	r24, 0x01	; 1
     916:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
            Receive_State = MSTP_RECEIVE_STATE_IDLE;
     91a:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Receive_State+0x1>
     91e:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <Receive_State>
            if (MSTP_Flag.ReceivedValidFrame || MSTP_Flag.ReceivedInvalidFrame)
     922:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     926:	83 70       	andi	r24, 0x03	; 3
     928:	09 f0       	breq	.+2      	; 0x92c <dlmstp_receive+0x3ac>
     92a:	43 ce       	rjmp	.-890    	; 0x5b2 <dlmstp_receive+0x32>
            if (Receive_State == MSTP_RECEIVE_STATE_IDLE)
     92c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Receive_State>
     930:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <Receive_State+0x1>
     934:	89 2b       	or	r24, r25
     936:	09 f0       	breq	.+2      	; 0x93a <dlmstp_receive+0x3ba>
     938:	55 ce       	rjmp	.-854    	; 0x5e4 <dlmstp_receive+0x64>
     93a:	3b ce       	rjmp	.-906    	; 0x5b2 <dlmstp_receive+0x32>
        if (This_Station <= DEFAULT_MAX_MASTER) {
     93c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <This_Station>
     940:	87 fd       	sbrc	r24, 7
     942:	ca c2       	rjmp	.+1428   	; 0xed8 <dlmstp_receive+0x958>
                            Master_State = MSTP_MASTER_STATE_USE_TOKEN;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	a8 2e       	mov	r10, r24
     948:	b1 2c       	mov	r11, r1
                        Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
     94a:	95 e0       	ldi	r25, 0x05	; 5
     94c:	69 2e       	mov	r6, r25
     94e:	71 2c       	mov	r7, r1
                    Master_State = MSTP_MASTER_STATE_IDLE;
     950:	88 24       	eor	r8, r8
     952:	83 94       	inc	r8
     954:	91 2c       	mov	r9, r1
                                Master_State =
     956:	34 e0       	ldi	r19, 0x04	; 4
     958:	c3 2e       	mov	r12, r19
     95a:	d1 2c       	mov	r13, r1
    next_poll_station = (Poll_Station + 1) % (Nmax_master + 1);
     95c:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <Nmax_master>
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	2f 5f       	subi	r18, 0xFF	; 255
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <Poll_Station.5566>
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b9 01       	movw	r22, r18
     970:	0e 94 13 20 	call	0x4026	; 0x4026 <__divmodhi4>
     974:	38 2e       	mov	r3, r24
     976:	58 2e       	mov	r5, r24
    next_this_station = (This_Station + 1) % (Nmax_master + 1);
     978:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     97c:	84 2f       	mov	r24, r20
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	b9 01       	movw	r22, r18
     984:	0e 94 13 20 	call	0x4026	; 0x4026 <__divmodhi4>
     988:	48 2e       	mov	r4, r24
    next_next_station = (Next_Station + 1) % (Nmax_master + 1);
     98a:	20 90 d4 01 	lds	r2, 0x01D4	; 0x8001d4 <Next_Station.5565>
     98e:	82 2d       	mov	r24, r2
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	b9 01       	movw	r22, r18
     996:	0e 94 13 20 	call	0x4026	; 0x4026 <__divmodhi4>
     99a:	68 2f       	mov	r22, r24
    switch (Master_State) {
     99c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Master_State>
     9a0:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Master_State+0x1>
     9a4:	89 30       	cpi	r24, 0x09	; 9
     9a6:	91 05       	cpc	r25, r1
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <dlmstp_receive+0x42c>
     9aa:	8d c2       	rjmp	.+1306   	; 0xec6 <dlmstp_receive+0x946>
     9ac:	8c 5c       	subi	r24, 0xCC	; 204
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	fc 01       	movw	r30, r24
     9b2:	0c 94 49 20 	jmp	0x4092	; 0x4092 <__tablejump2__>
            Next_Station = This_Station;
     9b6:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <Next_Station.5565>
            Poll_Station = This_Station;
     9ba:	40 93 d5 01 	sts	0x01D5, r20	; 0x8001d5 <Poll_Station.5566>
            TokenCount = Npoll;
     9be:	82 e3       	ldi	r24, 0x32	; 50
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <TokenCount.5568+0x1>
     9c6:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <TokenCount.5568>
            MSTP_Flag.SoleMaster = false;
     9ca:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     9ce:	8b 7f       	andi	r24, 0xFB	; 251
     9d0:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
     9d4:	6d c1       	rjmp	.+730    	; 0xcb0 <dlmstp_receive+0x730>
            if (Timer_Silence() >= Tno_token) {
     9d6:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     9da:	84 3f       	cpi	r24, 0xF4	; 244
     9dc:	91 40       	sbci	r25, 0x01	; 1
     9de:	68 f0       	brcs	.+26     	; 0x9fa <dlmstp_receive+0x47a>
                EventCount = 0; /* Addendum 135-2004d-8 */
     9e0:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <EventCount>
                Master_State = MSTP_MASTER_STATE_NO_TOKEN;
     9e4:	86 e0       	ldi	r24, 0x06	; 6
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Master_State+0x1>
     9ec:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Master_State>
                MSTP_Flag.ReceivedValidFrame = false;
     9f0:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
                MSTP_Flag.ReceivedInvalidFrame = false;
     9f4:	8d 7f       	andi	r24, 0xFD	; 253
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	c9 c0       	rjmp	.+402    	; 0xb8c <dlmstp_receive+0x60c>
            } else if (MSTP_Flag.ReceivedInvalidFrame == true) {
     9fa:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     9fe:	80 ff       	sbrs	r24, 0
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <dlmstp_receive+0x486>
                MSTP_Flag.ReceivedInvalidFrame = false;
     a02:	8e 7f       	andi	r24, 0xFE	; 254
     a04:	5d c2       	rjmp	.+1210   	; 0xec0 <dlmstp_receive+0x940>
            } else if (MSTP_Flag.ReceivedValidFrame == true) {
     a06:	81 ff       	sbrs	r24, 1
     a08:	67 c2       	rjmp	.+1230   	; 0xed8 <dlmstp_receive+0x958>
                switch (FrameType) {
     a0a:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <FrameType>
     a0e:	93 30       	cpi	r25, 0x03	; 3
     a10:	b1 f1       	breq	.+108    	; 0xa7e <dlmstp_receive+0x4fe>
     a12:	78 f4       	brcc	.+30     	; 0xa32 <dlmstp_receive+0x4b2>
     a14:	99 23       	and	r25, r25
     a16:	a9 f0       	breq	.+42     	; 0xa42 <dlmstp_receive+0x4c2>
     a18:	91 30       	cpi	r25, 0x01	; 1
     a1a:	09 f0       	breq	.+2      	; 0xa1e <dlmstp_receive+0x49e>
     a1c:	3f c0       	rjmp	.+126    	; 0xa9c <dlmstp_receive+0x51c>
                        MSTP_Send_Frame(FRAME_TYPE_REPLY_TO_POLL_FOR_MASTER,
     a1e:	00 e0       	ldi	r16, 0x00	; 0
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     a2a:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <SourceAddress>
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	33 c0       	rjmp	.+102    	; 0xa98 <dlmstp_receive+0x518>
                switch (FrameType) {
     a32:	95 30       	cpi	r25, 0x05	; 5
     a34:	b1 f0       	breq	.+44     	; 0xa62 <dlmstp_receive+0x4e2>
     a36:	96 30       	cpi	r25, 0x06	; 6
     a38:	89 f5       	brne	.+98     	; 0xa9c <dlmstp_receive+0x51c>
                        MSTP_Flag.ReceivePacketPending = true;
     a3a:	80 62       	ori	r24, 0x20	; 32
     a3c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
     a40:	2d c0       	rjmp	.+90     	; 0xa9c <dlmstp_receive+0x51c>
                        if (DestinationAddress == MSTP_BROADCAST_ADDRESS)
     a42:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <DestinationAddress>
     a46:	9f 3f       	cpi	r25, 0xFF	; 255
     a48:	49 f1       	breq	.+82     	; 0xa9c <dlmstp_receive+0x51c>
                        FrameCount = 0;
     a4a:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <FrameCount.5564>
                        MSTP_Flag.SoleMaster = false;
     a4e:	8d 7f       	andi	r24, 0xFD	; 253
     a50:	8b 7f       	andi	r24, 0xFB	; 251
     a52:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
                        Master_State = MSTP_MASTER_STATE_USE_TOKEN;
     a56:	b0 92 ef 01 	sts	0x01EF, r11	; 0x8001ef <Master_State+0x1>
     a5a:	a0 92 ee 01 	sts	0x01EE, r10	; 0x8001ee <Master_State>
                        transition_now = true;
     a5e:	21 e0       	ldi	r18, 0x01	; 1
     a60:	1e c0       	rjmp	.+60     	; 0xa9e <dlmstp_receive+0x51e>
                        MSTP_Flag.ReceivePacketPending = true;
     a62:	80 62       	ori	r24, 0x20	; 32
     a64:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
                        if (DestinationAddress != MSTP_BROADCAST_ADDRESS) {
     a68:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <DestinationAddress>
     a6c:	8f 3f       	cpi	r24, 0xFF	; 255
     a6e:	b1 f0       	breq	.+44     	; 0xa9c <dlmstp_receive+0x51c>
                            Master_State =
     a70:	e8 e0       	ldi	r30, 0x08	; 8
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	f0 93 ef 01 	sts	0x01EF, r31	; 0x8001ef <Master_State+0x1>
     a78:	e0 93 ee 01 	sts	0x01EE, r30	; 0x8001ee <Master_State>
     a7c:	0f c0       	rjmp	.+30     	; 0xa9c <dlmstp_receive+0x51c>
                        MSTP_Send_Frame(FRAME_TYPE_TEST_RESPONSE,
     a7e:	00 91 eb 01 	lds	r16, 0x01EB	; 0x8001eb <DataLength>
     a82:	10 91 ec 01 	lds	r17, 0x01EC	; 0x8001ec <DataLength+0x1>
     a86:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <InputBuffer>
     a8a:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <InputBuffer+0x1>
     a8e:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     a92:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <SourceAddress>
     a96:	84 e0       	ldi	r24, 0x04	; 4
     a98:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
    bool transition_now = false;
     a9c:	20 e0       	ldi	r18, 0x00	; 0
                if (Master_State != MSTP_MASTER_STATE_ANSWER_DATA_REQUEST) {
     a9e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Master_State>
     aa2:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Master_State+0x1>
     aa6:	08 97       	sbiw	r24, 0x08	; 8
     aa8:	09 f0       	breq	.+2      	; 0xaac <dlmstp_receive+0x52c>
     aaa:	97 c1       	rjmp	.+814    	; 0xdda <dlmstp_receive+0x85a>
     aac:	13 c2       	rjmp	.+1062   	; 0xed4 <dlmstp_receive+0x954>
    if (Send_I_Am_Flag) {
     aae:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Send_I_Am_Flag>
     ab2:	88 23       	and	r24, r24
     ab4:	89 f0       	breq	.+34     	; 0xad8 <dlmstp_receive+0x558>
        Send_I_Am_Flag = false;
     ab6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <Send_I_Am_Flag>
        TransmitPacket = Handler_Transmit_Buffer;
     aba:	8d e4       	ldi	r24, 0x4D	; 77
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <TransmitPacket+0x1>
     ac2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <TransmitPacket>
        len = iam_encode_pdu(&TransmitPacket[0], &dest, &npdu_data);
     ac6:	ae 01       	movw	r20, r28
     ac8:	4d 5e       	subi	r20, 0xED	; 237
     aca:	5f 4f       	sbci	r21, 0xFF	; 255
     acc:	be 01       	movw	r22, r28
     ace:	6f 5f       	subi	r22, 0xFF	; 255
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	0e 94 ca 11 	call	0x2394	; 0x2394 <iam_encode_pdu>
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <dlmstp_receive+0x55c>
    uint16_t len = 0;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
            TransmitPacketLen = dlmstp_encode_unconfirmed_frame();
     adc:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <TransmitPacketLen+0x1>
     ae0:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <TransmitPacketLen>
            if (TransmitPacketLen) {
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	91 f0       	breq	.+36     	; 0xb0c <dlmstp_receive+0x58c>
                MSTP_Send_Frame(FRAME_TYPE_BACNET_DATA_NOT_EXPECTING_REPLY,
     ae8:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <TransmitPacket>
     aec:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <TransmitPacket+0x1>
     af0:	8c 01       	movw	r16, r24
     af2:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     af6:	6f ef       	ldi	r22, 0xFF	; 255
     af8:	86 e0       	ldi	r24, 0x06	; 6
     afa:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                FrameCount++;
     afe:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <FrameCount.5564>
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <FrameCount.5564>
    bool transition_now = false;
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <dlmstp_receive+0x596>
                FrameCount = Nmax_info_frames;
     b0c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <Nmax_info_frames>
     b10:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <FrameCount.5564>
                transition_now = true;
     b14:	21 e0       	ldi	r18, 0x01	; 1
            Master_State = MSTP_MASTER_STATE_DONE_WITH_TOKEN;
     b16:	d0 92 ef 01 	sts	0x01EF, r13	; 0x8001ef <Master_State+0x1>
     b1a:	c0 92 ee 01 	sts	0x01EE, r12	; 0x8001ee <Master_State>
     b1e:	da c1       	rjmp	.+948    	; 0xed4 <dlmstp_receive+0x954>
            if (Timer_Silence() >= Treply_timeout) {
     b20:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     b24:	87 32       	cpi	r24, 0x27	; 39
     b26:	91 40       	sbci	r25, 0x01	; 1
     b28:	28 f0       	brcs	.+10     	; 0xb34 <dlmstp_receive+0x5b4>
                FrameCount = Nmax_info_frames;
     b2a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <Nmax_info_frames>
     b2e:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <FrameCount.5564>
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <dlmstp_receive+0x5c2>
                if (MSTP_Flag.ReceivedInvalidFrame == true) {
     b34:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     b38:	80 ff       	sbrs	r24, 0
     b3a:	08 c0       	rjmp	.+16     	; 0xb4c <dlmstp_receive+0x5cc>
                    MSTP_Flag.ReceivedInvalidFrame = false;
     b3c:	8e 7f       	andi	r24, 0xFE	; 254
     b3e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
                    Master_State = MSTP_MASTER_STATE_DONE_WITH_TOKEN;
     b42:	d0 92 ef 01 	sts	0x01EF, r13	; 0x8001ef <Master_State+0x1>
     b46:	c0 92 ee 01 	sts	0x01EE, r12	; 0x8001ee <Master_State>
     b4a:	08 cf       	rjmp	.-496    	; 0x95c <dlmstp_receive+0x3dc>
                } else if (MSTP_Flag.ReceivedValidFrame == true) {
     b4c:	81 ff       	sbrs	r24, 1
     b4e:	c4 c1       	rjmp	.+904    	; 0xed8 <dlmstp_receive+0x958>
                    if (DestinationAddress == This_Station) {
     b50:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <DestinationAddress>
     b54:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <This_Station>
     b58:	29 13       	cpse	r18, r25
     b5a:	11 c0       	rjmp	.+34     	; 0xb7e <dlmstp_receive+0x5fe>
                        switch (FrameType) {
     b5c:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <FrameType>
     b60:	96 30       	cpi	r25, 0x06	; 6
     b62:	29 f0       	breq	.+10     	; 0xb6e <dlmstp_receive+0x5ee>
     b64:	97 30       	cpi	r25, 0x07	; 7
     b66:	31 f0       	breq	.+12     	; 0xb74 <dlmstp_receive+0x5f4>
     b68:	94 30       	cpi	r25, 0x04	; 4
     b6a:	49 f4       	brne	.+18     	; 0xb7e <dlmstp_receive+0x5fe>
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <dlmstp_receive+0x5f4>
                                MSTP_Flag.ReceivePacketPending = true;
     b6e:	80 62       	ori	r24, 0x20	; 32
     b70:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
                                Master_State =
     b74:	d0 92 ef 01 	sts	0x01EF, r13	; 0x8001ef <Master_State+0x1>
     b78:	c0 92 ee 01 	sts	0x01EE, r12	; 0x8001ee <Master_State>
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <dlmstp_receive+0x606>
                        Master_State = MSTP_MASTER_STATE_IDLE;
     b7e:	90 92 ef 01 	sts	0x01EF, r9	; 0x8001ef <Master_State+0x1>
     b82:	80 92 ee 01 	sts	0x01EE, r8	; 0x8001ee <Master_State>
                    MSTP_Flag.ReceivedValidFrame = false;
     b86:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     b8a:	8d 7f       	andi	r24, 0xFD	; 253
     b8c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
     b90:	e5 ce       	rjmp	.-566    	; 0x95c <dlmstp_receive+0x3dc>
            if (FrameCount < Nmax_info_frames) {
     b92:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <FrameCount.5564>
     b96:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <Nmax_info_frames>
     b9a:	98 17       	cp	r25, r24
     b9c:	18 f1       	brcs	.+70     	; 0xbe4 <dlmstp_receive+0x664>
            } else if ((MSTP_Flag.SoleMaster == false) &&
     b9e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     ba2:	28 2f       	mov	r18, r24
     ba4:	24 70       	andi	r18, 0x04	; 4
     ba6:	82 fd       	sbrc	r24, 2
     ba8:	0b c0       	rjmp	.+22     	; 0xbc0 <dlmstp_receive+0x640>
     baa:	24 12       	cpse	r2, r20
     bac:	09 c0       	rjmp	.+18     	; 0xbc0 <dlmstp_receive+0x640>
                Poll_Station = next_this_station;
     bae:	40 92 d5 01 	sts	0x01D5, r4	; 0x8001d5 <Poll_Station.5566>
                MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
     bb2:	00 e0       	ldi	r16, 0x00	; 0
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	42 2d       	mov	r20, r2
     bbc:	64 2d       	mov	r22, r4
     bbe:	64 c0       	rjmp	.+200    	; 0xc88 <dlmstp_receive+0x708>
            else if (TokenCount < (Npoll - 1)) {
     bc0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <TokenCount.5568>
     bc4:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <TokenCount.5568+0x1>
     bc8:	81 33       	cpi	r24, 0x31	; 49
     bca:	91 05       	cpc	r25, r1
     bcc:	08 f5       	brcc	.+66     	; 0xc10 <dlmstp_receive+0x690>
     bce:	01 96       	adiw	r24, 0x01	; 1
                if ((MSTP_Flag.SoleMaster == true) &&
     bd0:	22 23       	and	r18, r18
     bd2:	69 f0       	breq	.+26     	; 0xbee <dlmstp_receive+0x66e>
     bd4:	24 14       	cp	r2, r4
     bd6:	59 f0       	breq	.+22     	; 0xbee <dlmstp_receive+0x66e>
                    FrameCount = 0;
     bd8:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <FrameCount.5564>
                    TokenCount++;
     bdc:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <TokenCount.5568+0x1>
     be0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <TokenCount.5568>
                    Master_State = MSTP_MASTER_STATE_USE_TOKEN;
     be4:	b0 92 ef 01 	sts	0x01EF, r11	; 0x8001ef <Master_State+0x1>
     be8:	a0 92 ee 01 	sts	0x01EE, r10	; 0x8001ee <Master_State>
     bec:	b7 ce       	rjmp	.-658    	; 0x95c <dlmstp_receive+0x3dc>
                    TokenCount++;
     bee:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <TokenCount.5568+0x1>
     bf2:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <TokenCount.5568>
                    MSTP_Send_Frame(FRAME_TYPE_TOKEN, Next_Station,
     bf6:	00 e0       	ldi	r16, 0x00	; 0
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	62 2d       	mov	r22, r2
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                    RetryCount = 0;
     c06:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     c0a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
     c0e:	30 c0       	rjmp	.+96     	; 0xc70 <dlmstp_receive+0x6f0>
            } else if (next_poll_station == Next_Station) {
     c10:	52 10       	cpse	r5, r2
     c12:	33 c0       	rjmp	.+102    	; 0xc7a <dlmstp_receive+0x6fa>
                if (MSTP_Flag.SoleMaster == true) {
     c14:	22 23       	and	r18, r18
     c16:	c1 f0       	breq	.+48     	; 0xc48 <dlmstp_receive+0x6c8>
                    Poll_Station = next_next_station;
     c18:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <Poll_Station.5566>
                    MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	10 e0       	ldi	r17, 0x00	; 0
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                    Next_Station = This_Station;
     c2a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <This_Station>
     c2e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <Next_Station.5565>
                    RetryCount = 0;
     c32:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     c36:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
                    TokenCount = 1;     /* changed in Errata SSPC-135-2004 */
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <TokenCount.5568+0x1>
     c42:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <TokenCount.5568>
     c46:	93 c0       	rjmp	.+294    	; 0xd6e <dlmstp_receive+0x7ee>
                    Poll_Station = This_Station;
     c48:	40 93 d5 01 	sts	0x01D5, r20	; 0x8001d5 <Poll_Station.5566>
                    MSTP_Send_Frame(FRAME_TYPE_TOKEN, Next_Station,
     c4c:	00 e0       	ldi	r16, 0x00	; 0
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	65 2d       	mov	r22, r5
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                    RetryCount = 0;
     c5c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     c60:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
                    TokenCount = 1;     /* changed in Errata SSPC-135-2004 */
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <TokenCount.5568+0x1>
     c6c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <TokenCount.5568>
                    EventCount = 0;
     c70:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <EventCount>
                    Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
     c74:	85 e0       	ldi	r24, 0x05	; 5
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	28 c1       	rjmp	.+592    	; 0xeca <dlmstp_receive+0x94a>
                Poll_Station = next_poll_station;
     c7a:	50 92 d5 01 	sts	0x01D5, r5	; 0x8001d5 <Poll_Station.5566>
                MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	65 2d       	mov	r22, r5
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                RetryCount = 0;
     c8e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     c92:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
     c96:	6b c0       	rjmp	.+214    	; 0xd6e <dlmstp_receive+0x7ee>
            if (Timer_Silence() <= Tusage_timeout) {
     c98:	6d 8f       	std	Y+29, r22	; 0x1d
     c9a:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     c9e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ca0:	80 36       	cpi	r24, 0x60	; 96
     ca2:	91 05       	cpc	r25, r1
     ca4:	50 f4       	brcc	.+20     	; 0xcba <dlmstp_receive+0x73a>
                if (EventCount > Nmin_octets) {
     ca6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <EventCount>
     caa:	85 30       	cpi	r24, 0x05	; 5
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <dlmstp_receive+0x730>
     cae:	14 c1       	rjmp	.+552    	; 0xed8 <dlmstp_receive+0x958>
                    Master_State = MSTP_MASTER_STATE_IDLE;
     cb0:	90 92 ef 01 	sts	0x01EF, r9	; 0x8001ef <Master_State+0x1>
     cb4:	80 92 ee 01 	sts	0x01EE, r8	; 0x8001ee <Master_State>
     cb8:	51 ce       	rjmp	.-862    	; 0x95c <dlmstp_receive+0x3dc>
                if (RetryCount < Nretry_token) {
     cba:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <RetryCount.5567>
     cbe:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <RetryCount.5567+0x1>
     cc2:	89 2b       	or	r24, r25
     cc4:	a1 f4       	brne	.+40     	; 0xcee <dlmstp_receive+0x76e>
                    RetryCount++;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <RetryCount.5567+0x1>
     cce:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <RetryCount.5567>
                    MSTP_Send_Frame(FRAME_TYPE_TOKEN, Next_Station,
     cd2:	00 e0       	ldi	r16, 0x00	; 0
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     cde:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <Next_Station.5565>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                    EventCount = 0;
     ce8:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <EventCount>
     cec:	f5 c0       	rjmp	.+490    	; 0xed8 <dlmstp_receive+0x958>
                    Poll_Station = next_next_station;
     cee:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <Poll_Station.5566>
                    MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e0       	ldi	r17, 0x00	; 0
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     cfe:	28 c0       	rjmp	.+80     	; 0xd50 <dlmstp_receive+0x7d0>
            if (Timer_Silence() < my_timeout) {
     d00:	4d 8f       	std	Y+29, r20	; 0x1d
     d02:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
            my_timeout = Tno_token + (Tslot * This_Station);
     d06:	4d 8d       	ldd	r20, Y+29	; 0x1d
     d08:	fa e0       	ldi	r31, 0x0A	; 10
     d0a:	4f 9f       	mul	r20, r31
     d0c:	a0 01       	movw	r20, r0
     d0e:	11 24       	eor	r1, r1
     d10:	4c 50       	subi	r20, 0x0C	; 12
     d12:	5e 4f       	sbci	r21, 0xFE	; 254
            if (Timer_Silence() < my_timeout) {
     d14:	84 17       	cp	r24, r20
     d16:	95 07       	cpc	r25, r21
     d18:	30 f2       	brcs	.-116    	; 0xca6 <dlmstp_receive+0x726>
                ns_timeout = Tno_token + (Tslot * (This_Station + 1));
     d1a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <This_Station>
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	28 9f       	mul	r18, r24
     d26:	80 01       	movw	r16, r0
     d28:	29 9f       	mul	r18, r25
     d2a:	10 0d       	add	r17, r0
     d2c:	11 24       	eor	r1, r1
     d2e:	0c 50       	subi	r16, 0x0C	; 12
     d30:	1e 4f       	sbci	r17, 0xFE	; 254
                if (Timer_Silence() < ns_timeout) {
     d32:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     d36:	80 17       	cp	r24, r16
     d38:	91 07       	cpc	r25, r17
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <dlmstp_receive+0x7be>
     d3c:	cd c0       	rjmp	.+410    	; 0xed8 <dlmstp_receive+0x958>
                    Poll_Station = next_this_station;
     d3e:	40 92 d5 01 	sts	0x01D5, r4	; 0x8001d5 <Poll_Station.5566>
                    MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
     d42:	00 e0       	ldi	r16, 0x00	; 0
     d44:	10 e0       	ldi	r17, 0x00	; 0
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     d4e:	64 2d       	mov	r22, r4
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                    Next_Station = This_Station;
     d56:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <This_Station>
     d5a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <Next_Station.5565>
                    RetryCount = 0;
     d5e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     d62:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
                    TokenCount = 0;
     d66:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <TokenCount.5568+0x1>
     d6a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <TokenCount.5568>
                    Master_State = MSTP_MASTER_STATE_POLL_FOR_MASTER;
     d6e:	87 e0       	ldi	r24, 0x07	; 7
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	ab c0       	rjmp	.+342    	; 0xeca <dlmstp_receive+0x94a>
            if (MSTP_Flag.ReceivedValidFrame == true) {
     d74:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     d78:	81 ff       	sbrs	r24, 1
     d7a:	33 c0       	rjmp	.+102    	; 0xde2 <dlmstp_receive+0x862>
                if ((DestinationAddress == This_Station)
     d7c:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <DestinationAddress>
     d80:	94 13       	cpse	r25, r20
     d82:	26 c0       	rjmp	.+76     	; 0xdd0 <dlmstp_receive+0x850>
                    && (FrameType == FRAME_TYPE_REPLY_TO_POLL_FOR_MASTER)) {
     d84:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <FrameType>
     d88:	92 30       	cpi	r25, 0x02	; 2
     d8a:	11 f5       	brne	.+68     	; 0xdd0 <dlmstp_receive+0x850>
                    MSTP_Flag.SoleMaster = false;
     d8c:	8b 7f       	andi	r24, 0xFB	; 251
     d8e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
                    Next_Station = SourceAddress;
     d92:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <SourceAddress>
     d96:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <Next_Station.5565>
                    EventCount = 0;
     d9a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <EventCount>
                    MSTP_Send_Frame(FRAME_TYPE_TOKEN, Next_Station,
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	10 e0       	ldi	r17, 0x00	; 0
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                    Poll_Station = This_Station;
     dac:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <This_Station>
     db0:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Poll_Station.5566>
                    TokenCount = 0;
     db4:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <TokenCount.5568+0x1>
     db8:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <TokenCount.5568>
                    RetryCount = 0;
     dbc:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     dc0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
                    Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
     dc4:	70 92 ef 01 	sts	0x01EF, r7	; 0x8001ef <Master_State+0x1>
     dc8:	60 92 ee 01 	sts	0x01EE, r6	; 0x8001ee <Master_State>
    bool transition_now = false;
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	05 c0       	rjmp	.+10     	; 0xdda <dlmstp_receive+0x85a>
                    Master_State = MSTP_MASTER_STATE_IDLE;
     dd0:	90 92 ef 01 	sts	0x01EF, r9	; 0x8001ef <Master_State+0x1>
     dd4:	80 92 ee 01 	sts	0x01EE, r8	; 0x8001ee <Master_State>
                    transition_now = true;
     dd8:	21 e0       	ldi	r18, 0x01	; 1
                MSTP_Flag.ReceivedValidFrame = false;
     dda:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     dde:	8d 7f       	andi	r24, 0xFD	; 253
     de0:	43 c0       	rjmp	.+134    	; 0xe68 <dlmstp_receive+0x8e8>
            } else if ((Timer_Silence() > Tusage_timeout) ||
     de2:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Silence>
     de6:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <MSTP_Flag>
     dea:	80 36       	cpi	r24, 0x60	; 96
     dec:	91 05       	cpc	r25, r1
     dee:	10 f4       	brcc	.+4      	; 0xdf4 <dlmstp_receive+0x874>
     df0:	20 ff       	sbrs	r18, 0
     df2:	72 c0       	rjmp	.+228    	; 0xed8 <dlmstp_receive+0x958>
                if (MSTP_Flag.SoleMaster == true) {
     df4:	22 fd       	sbrc	r18, 2
     df6:	2e c0       	rjmp	.+92     	; 0xe54 <dlmstp_receive+0x8d4>
                    if (Next_Station != This_Station) {
     df8:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <Next_Station.5565>
     dfc:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <This_Station>
     e00:	64 17       	cp	r22, r20
     e02:	91 f0       	breq	.+36     	; 0xe28 <dlmstp_receive+0x8a8>
                        EventCount = 0;
     e04:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <EventCount>
                        MSTP_Send_Frame(FRAME_TYPE_TOKEN, Next_Station,
     e08:	00 e0       	ldi	r16, 0x00	; 0
     e0a:	10 e0       	ldi	r17, 0x00	; 0
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                        RetryCount = 0;
     e16:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     e1a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
                        Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
     e1e:	70 92 ef 01 	sts	0x01EF, r7	; 0x8001ef <Master_State+0x1>
     e22:	60 92 ee 01 	sts	0x01EE, r6	; 0x8001ee <Master_State>
     e26:	11 c0       	rjmp	.+34     	; 0xe4a <dlmstp_receive+0x8ca>
                        if (next_poll_station != This_Station) {
     e28:	56 16       	cp	r5, r22
     e2a:	89 f0       	breq	.+34     	; 0xe4e <dlmstp_receive+0x8ce>
                            Poll_Station = next_poll_station;
     e2c:	30 92 d5 01 	sts	0x01D5, r3	; 0x8001d5 <Poll_Station.5566>
                            MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER,
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	46 2f       	mov	r20, r22
     e3a:	63 2d       	mov	r22, r3
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                            RetryCount = 0;
     e42:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <RetryCount.5567+0x1>
     e46:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <RetryCount.5567>
    bool transition_now = false;
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <dlmstp_receive+0x8e2>
                            MSTP_Flag.SoleMaster = true;
     e4e:	24 60       	ori	r18, 0x04	; 4
     e50:	20 93 ed 01 	sts	0x01ED, r18	; 0x8001ed <MSTP_Flag>
                            FrameCount = 0;
     e54:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <FrameCount.5564>
                            Master_State = MSTP_MASTER_STATE_USE_TOKEN;
     e58:	b0 92 ef 01 	sts	0x01EF, r11	; 0x8001ef <Master_State+0x1>
     e5c:	a0 92 ee 01 	sts	0x01EE, r10	; 0x8001ee <Master_State>
                            transition_now = true;
     e60:	21 e0       	ldi	r18, 0x01	; 1
                MSTP_Flag.ReceivedInvalidFrame = false;
     e62:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     e66:	8e 7f       	andi	r24, 0xFE	; 254
     e68:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
     e6c:	33 c0       	rjmp	.+102    	; 0xed4 <dlmstp_receive+0x954>
            if (MSTP_Flag.TransmitPacketPending) {
     e6e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     e72:	83 ff       	sbrs	r24, 3
     e74:	13 c0       	rjmp	.+38     	; 0xe9c <dlmstp_receive+0x91c>
                MSTP_Send_Frame(FRAME_TYPE_BACNET_DATA_NOT_EXPECTING_REPLY,
     e76:	00 91 dc 01 	lds	r16, 0x01DC	; 0x8001dc <TransmitPacketLen>
     e7a:	10 91 dd 01 	lds	r17, 0x01DD	; 0x8001dd <TransmitPacketLen+0x1>
     e7e:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <TransmitPacket>
     e82:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <TransmitPacket+0x1>
     e86:	60 91 db 01 	lds	r22, 0x01DB	; 0x8001db <TransmitPacketDest>
     e8a:	86 e0       	ldi	r24, 0x06	; 6
     e8c:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                MSTP_Flag.TransmitPacketPending = false;
     e90:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     e94:	87 7f       	andi	r24, 0xF7	; 247
     e96:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <dlmstp_receive+0x92e>
                MSTP_Send_Frame(FRAME_TYPE_REPLY_POSTPONED, SourceAddress,
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <SourceAddress>
     ea8:	87 e0       	ldi	r24, 0x07	; 7
     eaa:	0e 94 36 02 	call	0x46c	; 0x46c <MSTP_Send_Frame>
                Master_State = MSTP_MASTER_STATE_IDLE;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Master_State+0x1>
     eb6:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Master_State>
            MSTP_Flag.ReceivedValidFrame = false;
     eba:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <dlmstp_receive+0x958>
            Master_State = MSTP_MASTER_STATE_IDLE;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Master_State+0x1>
     ece:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Master_State>
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <dlmstp_receive+0x958>
            while (MSTP_Master_Node_FSM()) {
     ed4:	21 11       	cpse	r18, r1
     ed6:	42 cd       	rjmp	.-1404   	; 0x95c <dlmstp_receive+0x3dc>
                /* do nothing while some states fast transition */
            };
        }
    }
    /* if there is a packet that needs processed, do it now. */
    if (MSTP_Flag.ReceivePacketPending) {
     ed8:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <MSTP_Flag>
     edc:	85 ff       	sbrs	r24, 5
     ede:	0e c0       	rjmp	.+28     	; 0xefc <dlmstp_receive+0x97c>
        MSTP_Flag.ReceivePacketPending = false;
     ee0:	8f 7d       	andi	r24, 0xDF	; 223
     ee2:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <MSTP_Flag>
        pdu_len = DataLength;
     ee6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <DataLength>
     eea:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <DataLength+0x1>
        src->mac_len = 1;
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	f7 01       	movw	r30, r14
     ef2:	20 83       	st	Z, r18
        src->mac[0] = SourceAddress;
     ef4:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <SourceAddress>
     ef8:	21 83       	std	Z+1, r18	; 0x01
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <dlmstp_receive+0x980>
    uint16_t pdu_len = 0;       /* return value */
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
        /* data is already in the pdu pointer */
    }

    return pdu_len;
}
     f00:	6d 96       	adiw	r28, 0x1d	; 29
     f02:	e2 e1       	ldi	r30, 0x12	; 18
     f04:	0c 94 6b 20 	jmp	0x40d6	; 0x40d6 <__epilogue_restores__>

00000f08 <dlmstp_set_max_info_frames>:
/* bandwidth to particular nodes. If Max_Info_Frames is not writable in a */
/* node, its value shall be 1. */
void dlmstp_set_max_info_frames(
    uint8_t max_info_frames)
{
    if (max_info_frames >= 1) {
     f08:	81 11       	cpse	r24, r1
        Nmax_info_frames = max_info_frames;
     f0a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <Nmax_info_frames>
     f0e:	08 95       	ret

00000f10 <dlmstp_max_info_frames>:

uint8_t dlmstp_max_info_frames(
    void)
{
    return Nmax_info_frames;
}
     f10:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <Nmax_info_frames>
     f14:	08 95       	ret

00000f16 <dlmstp_set_max_master>:
/* less than or equal to 127. If Max_Master is not writable in a node, */
/* its value shall be 127. */
void dlmstp_set_max_master(
    uint8_t max_master)
{
    if (max_master <= 127) {
     f16:	87 fd       	sbrc	r24, 7
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <dlmstp_set_max_master+0x10>
        if (This_Station <= max_master) {
     f1a:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <This_Station>
     f1e:	89 17       	cp	r24, r25
     f20:	10 f0       	brcs	.+4      	; 0xf26 <dlmstp_set_max_master+0x10>
            Nmax_master = max_master;
     f22:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <Nmax_master>
     f26:	08 95       	ret

00000f28 <dlmstp_set_mac_address>:
    if (mac_address <= 127) {
     f28:	87 fd       	sbrc	r24, 7
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <dlmstp_set_mac_address+0x14>
        This_Station = mac_address;
     f2c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <This_Station>
        if (mac_address > Nmax_master)
     f30:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <Nmax_master>
     f34:	98 17       	cp	r25, r24
     f36:	10 f4       	brcc	.+4      	; 0xf3c <dlmstp_set_mac_address+0x14>
            dlmstp_set_max_master(mac_address);
     f38:	0e 94 8b 07 	call	0xf16	; 0xf16 <dlmstp_set_max_master>
     f3c:	08 95       	ret

00000f3e <dlmstp_max_master>:

uint8_t dlmstp_max_master(
    void)
{
    return Nmax_master;
}
     f3e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <Nmax_master>
     f42:	08 95       	ret

00000f44 <dlmstp_get_my_address>:

void dlmstp_get_my_address(
    BACNET_ADDRESS * my_address)
{
     f44:	fc 01       	movw	r30, r24
    int i = 0;  /* counter */

    my_address->mac_len = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 83       	st	Z, r24
    my_address->mac[0] = This_Station;
     f4a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <This_Station>
     f4e:	81 83       	std	Z+1, r24	; 0x01
    my_address->net = 0;        /* local only, no routing */
     f50:	11 86       	std	Z+9, r1	; 0x09
     f52:	10 86       	std	Z+8, r1	; 0x08
    my_address->len = 0;
     f54:	12 86       	std	Z+10, r1	; 0x0a
    for (i = 0; i < MAX_MAC_LEN; i++) {
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	df 01       	movw	r26, r30
     f5c:	a8 0f       	add	r26, r24
     f5e:	b9 1f       	adc	r27, r25
        my_address->adr[i] = 0;
     f60:	1b 96       	adiw	r26, 0x0b	; 11
     f62:	1c 92       	st	X, r1
    for (i = 0; i < MAX_MAC_LEN; i++) {
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	87 30       	cpi	r24, 0x07	; 7
     f68:	91 05       	cpc	r25, r1
     f6a:	b9 f7       	brne	.-18     	; 0xf5a <dlmstp_get_my_address+0x16>
    }

    return;
}
     f6c:	08 95       	ret

00000f6e <dlmstp_get_broadcast_address>:

void dlmstp_get_broadcast_address(
    BACNET_ADDRESS * dest)
{       /* destination address */
     f6e:	fc 01       	movw	r30, r24
    int i = 0;  /* counter */

    if (dest) {
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	a1 f0       	breq	.+40     	; 0xf9c <dlmstp_get_broadcast_address+0x2e>
        dest->mac_len = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 83       	st	Z, r24
        dest->mac[0] = MSTP_BROADCAST_ADDRESS;
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	81 83       	std	Z+1, r24	; 0x01
        dest->net = BACNET_BROADCAST_NETWORK;
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	91 87       	std	Z+9, r25	; 0x09
     f82:	80 87       	std	Z+8, r24	; 0x08
        dest->len = 0;  /* always zero when DNET is broadcast */
     f84:	12 86       	std	Z+10, r1	; 0x0a
        for (i = 0; i < MAX_MAC_LEN; i++) {
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	df 01       	movw	r26, r30
     f8c:	a8 0f       	add	r26, r24
     f8e:	b9 1f       	adc	r27, r25
            dest->adr[i] = 0;
     f90:	1b 96       	adiw	r26, 0x0b	; 11
     f92:	1c 92       	st	X, r1
        for (i = 0; i < MAX_MAC_LEN; i++) {
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	87 30       	cpi	r24, 0x07	; 7
     f98:	91 05       	cpc	r25, r1
     f9a:	b9 f7       	brne	.-18     	; 0xf8a <dlmstp_get_broadcast_address+0x1c>
     f9c:	08 95       	ret

00000f9e <apdu_service_supported>:
    BACNET_SERVICES_SUPPORTED service_supported)
{
    bool status = false;

    if (service_supported == SERVICE_SUPPORTED_READ_PROPERTY) {
        status = true;
     f9e:	21 e0       	ldi	r18, 0x01	; 1
    if (service_supported == SERVICE_SUPPORTED_READ_PROPERTY) {
     fa0:	8c 30       	cpi	r24, 0x0C	; 12
     fa2:	91 05       	cpc	r25, r1
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <apdu_service_supported+0x14>
    }
    if (service_supported == SERVICE_SUPPORTED_WHO_IS) {
     fa6:	82 32       	cpi	r24, 0x22	; 34
     fa8:	91 05       	cpc	r25, r1
     faa:	19 f0       	breq	.+6      	; 0xfb2 <apdu_service_supported+0x14>
        status = true;
    }
#ifdef WRITE_PROPERTY
    if (service_supported == SERVICE_SUPPORTED_WRITE_PROPERTY) {
     fac:	0f 97       	sbiw	r24, 0x0f	; 15
     fae:	09 f0       	breq	.+2      	; 0xfb2 <apdu_service_supported+0x14>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
        status = true;
    }
#endif

    return status;
}
     fb2:	82 2f       	mov	r24, r18
     fb4:	08 95       	ret

00000fb6 <apdu_decode_confirmed_service_request>:
    uint16_t apdu_len,
    BACNET_CONFIRMED_SERVICE_DATA * service_data,
    uint8_t * service_choice,
    uint8_t ** service_request,
    uint16_t * service_request_len)
{
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 ee       	ldi	r30, 0xE1	; 225
     fbc:	f7 e0       	ldi	r31, 0x07	; 7
     fbe:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__prologue_saves__+0xc>
     fc2:	ec 01       	movw	r28, r24
     fc4:	5b 01       	movw	r10, r22
     fc6:	6a 01       	movw	r12, r20
     fc8:	49 01       	movw	r8, r18
    uint16_t len = 0;   /* counts where we are in PDU */

    service_data->segmented_message = (apdu[0] & BIT3) ? true : false;
     fca:	88 81       	ld	r24, Y
     fcc:	83 fb       	bst	r24, 3
     fce:	88 27       	eor	r24, r24
     fd0:	80 f9       	bld	r24, 0
     fd2:	fa 01       	movw	r30, r20
     fd4:	80 83       	st	Z, r24
    service_data->more_follows = (apdu[0] & BIT2) ? true : false;
     fd6:	88 81       	ld	r24, Y
     fd8:	82 fb       	bst	r24, 2
     fda:	88 27       	eor	r24, r24
     fdc:	80 f9       	bld	r24, 0
     fde:	81 83       	std	Z+1, r24	; 0x01
    service_data->segmented_response_accepted =
        (apdu[0] & BIT1) ? true : false;
     fe0:	88 81       	ld	r24, Y
     fe2:	86 95       	lsr	r24
     fe4:	81 70       	andi	r24, 0x01	; 1
    service_data->segmented_response_accepted =
     fe6:	82 83       	std	Z+2, r24	; 0x02
    service_data->max_segs = decode_max_segs(apdu[1]);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	0e 94 c6 14 	call	0x298c	; 0x298c <decode_max_segs>
     fee:	f6 01       	movw	r30, r12
     ff0:	94 83       	std	Z+4, r25	; 0x04
     ff2:	83 83       	std	Z+3, r24	; 0x03
    service_data->max_resp = decode_max_apdu(apdu[1]);
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	0e 94 ef 14 	call	0x29de	; 0x29de <decode_max_apdu>
     ffa:	f6 01       	movw	r30, r12
     ffc:	96 83       	std	Z+6, r25	; 0x06
     ffe:	85 83       	std	Z+5, r24	; 0x05
    service_data->invoke_id = apdu[2];
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	87 83       	std	Z+7, r24	; 0x07
    len = 3;
    if (service_data->segmented_message) {
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	39 f0       	breq	.+14     	; 0x1018 <apdu_decode_confirmed_service_request+0x62>
        service_data->sequence_number = apdu[len++];
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	80 87       	std	Z+8, r24	; 0x08
        service_data->proposed_window_number = apdu[len++];
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	81 87       	std	Z+9, r24	; 0x09
    1012:	25 e0       	ldi	r18, 0x05	; 5
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <apdu_decode_confirmed_service_request+0x66>
    len = 3;
    1018:	23 e0       	ldi	r18, 0x03	; 3
    101a:	30 e0       	ldi	r19, 0x00	; 0
    }
    *service_choice = apdu[len++];
    101c:	c9 01       	movw	r24, r18
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	fe 01       	movw	r30, r28
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	20 81       	ld	r18, Z
    1028:	f4 01       	movw	r30, r8
    102a:	20 83       	st	Z, r18
    *service_request = &apdu[len];
    102c:	c8 0f       	add	r28, r24
    102e:	d9 1f       	adc	r29, r25
    1030:	f8 01       	movw	r30, r16
    1032:	d1 83       	std	Z+1, r29	; 0x01
    1034:	c0 83       	st	Z, r28
    *service_request_len = apdu_len - len;
    1036:	a8 1a       	sub	r10, r24
    1038:	b9 0a       	sbc	r11, r25
    103a:	f7 01       	movw	r30, r14
    103c:	b1 82       	std	Z+1, r11	; 0x01
    103e:	a0 82       	st	Z, r10

    return len;
}
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	ec e0       	ldi	r30, 0x0C	; 12
    1046:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__epilogue_restores__+0xc>

0000104a <apdu_handler>:

void apdu_handler(
    BACNET_ADDRESS * src,
    uint8_t * apdu,     /* APDU data */
    uint16_t apdu_len)
{
    104a:	af e0       	ldi	r26, 0x0F	; 15
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e2       	ldi	r30, 0x2B	; 43
    1050:	f8 e0       	ldi	r31, 0x08	; 8
    1052:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    1056:	5c 01       	movw	r10, r24
    1058:	fb 01       	movw	r30, r22
    105a:	ba 01       	movw	r22, r20
    BACNET_CONFIRMED_SERVICE_DATA service_data = { 0 };
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	6c 01       	movw	r12, r24
    1062:	8a e0       	ldi	r24, 0x0A	; 10
    1064:	d6 01       	movw	r26, r12
    1066:	1d 92       	st	X+, r1
    1068:	8a 95       	dec	r24
    106a:	e9 f7       	brne	.-6      	; 0x1066 <apdu_handler+0x1c>
    uint8_t service_choice = 0;
    106c:	1f 86       	std	Y+15, r1	; 0x0f
    uint8_t *service_request = NULL;
    106e:	1e 86       	std	Y+14, r1	; 0x0e
    1070:	1d 86       	std	Y+13, r1	; 0x0d
    uint16_t service_request_len = 0;
    1072:	1c 86       	std	Y+12, r1	; 0x0c
    1074:	1b 86       	std	Y+11, r1	; 0x0b
    uint16_t len = 0;   /* counts where we are in PDU */

    if (apdu) {
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	d1 f1       	breq	.+116    	; 0x10ee <apdu_handler+0xa4>
        /* PDU Type */
        switch (apdu[0] & 0xF0) {
    107a:	80 81       	ld	r24, Z
    107c:	80 7f       	andi	r24, 0xF0	; 240
    107e:	19 f0       	breq	.+6      	; 0x1086 <apdu_handler+0x3c>
    1080:	80 31       	cpi	r24, 0x10	; 16
    1082:	31 f1       	breq	.+76     	; 0x10d0 <apdu_handler+0x86>
    1084:	34 c0       	rjmp	.+104    	; 0x10ee <apdu_handler+0xa4>
            case PDU_TYPE_CONFIRMED_SERVICE_REQUEST:
                len = apdu_decode_confirmed_service_request(&apdu[0],   /* APDU data */
    1086:	ce 01       	movw	r24, r28
    1088:	0b 96       	adiw	r24, 0x0b	; 11
    108a:	7c 01       	movw	r14, r24
    108c:	8e 01       	movw	r16, r28
    108e:	03 5f       	subi	r16, 0xF3	; 243
    1090:	1f 4f       	sbci	r17, 0xFF	; 255
    1092:	9e 01       	movw	r18, r28
    1094:	21 5f       	subi	r18, 0xF1	; 241
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	a6 01       	movw	r20, r12
    109a:	cf 01       	movw	r24, r30
    109c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <apdu_decode_confirmed_service_request>
                    apdu_len, &service_data, &service_choice, &service_request,
                    &service_request_len);
                if (service_choice == SERVICE_CONFIRMED_READ_PROPERTY) {
    10a0:	2f 85       	ldd	r18, Y+15	; 0x0f
    10a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10aa:	2c 30       	cpi	r18, 0x0C	; 12
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <apdu_handler+0x6e>
                    handler_read_property(service_request, service_request_len,
    10ae:	96 01       	movw	r18, r12
    10b0:	a5 01       	movw	r20, r10
    10b2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <handler_read_property>
    10b6:	1b c0       	rjmp	.+54     	; 0x10ee <apdu_handler+0xa4>
                        src, &service_data);
                }
#ifdef WRITE_PROPERTY
                else if (service_choice == SERVICE_CONFIRMED_WRITE_PROPERTY) {
    10b8:	2f 30       	cpi	r18, 0x0F	; 15
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <apdu_handler+0x7c>
                    handler_write_property(service_request,
    10bc:	96 01       	movw	r18, r12
    10be:	a5 01       	movw	r20, r10
    10c0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <handler_write_property>
    10c4:	14 c0       	rjmp	.+40     	; 0x10ee <apdu_handler+0xa4>
                        service_request_len, src, &service_data);
                }
#endif
                else {
                    handler_unrecognized_service(service_request,
    10c6:	96 01       	movw	r18, r12
    10c8:	a5 01       	movw	r20, r10
    10ca:	0e 94 ff 11 	call	0x23fe	; 0x23fe <handler_unrecognized_service>
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <apdu_handler+0xa4>
                        service_request_len, src, &service_data);
                }
                break;
            case PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST:
                service_choice = apdu[1];
    10d0:	21 81       	ldd	r18, Z+1	; 0x01
    10d2:	2f 87       	std	Y+15, r18	; 0x0f
                service_request = &apdu[2];
    10d4:	cf 01       	movw	r24, r30
    10d6:	02 96       	adiw	r24, 0x02	; 2
    10d8:	9e 87       	std	Y+14, r25	; 0x0e
    10da:	8d 87       	std	Y+13, r24	; 0x0d
                service_request_len = apdu_len - 2;
    10dc:	62 50       	subi	r22, 0x02	; 2
    10de:	71 09       	sbc	r23, r1
    10e0:	7c 87       	std	Y+12, r23	; 0x0c
    10e2:	6b 87       	std	Y+11, r22	; 0x0b
                if (service_choice == SERVICE_UNCONFIRMED_WHO_IS) {
    10e4:	28 30       	cpi	r18, 0x08	; 8
    10e6:	19 f4       	brne	.+6      	; 0x10ee <apdu_handler+0xa4>
                    handler_who_is(service_request, service_request_len, src);
    10e8:	a5 01       	movw	r20, r10
    10ea:	0e 94 be 10 	call	0x217c	; 0x217c <handler_who_is>
            default:
                break;
        }
    }
    return;
}
    10ee:	2f 96       	adiw	r28, 0x0f	; 15
    10f0:	ea e0       	ldi	r30, 0x0A	; 10
    10f2:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

000010f6 <Encode_Property_APDU>:
int Encode_Property_APDU(
    uint8_t * apdu,
    BACNET_READ_PROPERTY_DATA * rp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    10f6:	a0 e0       	ldi	r26, 0x00	; 0
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e8       	ldi	r30, 0x81	; 129
    10fc:	f8 e0       	ldi	r31, 0x08	; 8
    10fe:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__prologue_saves__+0x8>
    1102:	3c 01       	movw	r6, r24
    1104:	eb 01       	movw	r28, r22
    1106:	5a 01       	movw	r10, r20
    1108:	49 01       	movw	r8, r18
    int apdu_len = -1;

    /* handle each object type */
    switch (rp_data->object_type) {
    110a:	88 81       	ld	r24, Y
    110c:	99 81       	ldd	r25, Y+1	; 0x01
    110e:	85 30       	cpi	r24, 0x05	; 5
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <Encode_Property_APDU+0x20>
    1114:	47 c0       	rjmp	.+142    	; 0x11a4 <Encode_Property_APDU+0xae>
    1116:	88 30       	cpi	r24, 0x08	; 8
    1118:	91 05       	cpc	r25, r1
    111a:	21 f0       	breq	.+8      	; 0x1124 <Encode_Property_APDU+0x2e>
    111c:	02 97       	sbiw	r24, 0x02	; 2
    111e:	09 f0       	breq	.+2      	; 0x1122 <Encode_Property_APDU+0x2c>
    1120:	59 c0       	rjmp	.+178    	; 0x11d4 <Encode_Property_APDU+0xde>
    1122:	28 c0       	rjmp	.+80     	; 0x1174 <Encode_Property_APDU+0x7e>
        case OBJECT_DEVICE:
            /* Test for case of indefinite Device object instance */
            if (rp_data->object_instance == BACNET_MAX_INSTANCE) {
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	ac 81       	ldd	r26, Y+4	; 0x04
    112a:	bd 81       	ldd	r27, Y+5	; 0x05
    112c:	8f 3f       	cpi	r24, 0xFF	; 255
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	af 43       	sbci	r26, 0x3F	; 63
    1132:	b1 05       	cpc	r27, r1
    1134:	31 f4       	brne	.+12     	; 0x1142 <Encode_Property_APDU+0x4c>
                rp_data->object_instance = Device_Object_Instance_Number();
    1136:	0e 94 8c 09 	call	0x1318	; 0x1318 <Device_Object_Instance_Number>
    113a:	6a 83       	std	Y+2, r22	; 0x02
    113c:	7b 83       	std	Y+3, r23	; 0x03
    113e:	8c 83       	std	Y+4, r24	; 0x04
    1140:	9d 83       	std	Y+5, r25	; 0x05
            }
            if (Device_Valid_Object_Instance_Number(rp_data->object_instance)) {
    1142:	6a 81       	ldd	r22, Y+2	; 0x02
    1144:	7b 81       	ldd	r23, Y+3	; 0x03
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	0e 94 a7 09 	call	0x134e	; 0x134e <Device_Valid_Object_Instance_Number>
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <Encode_Property_APDU+0x5e>
    1152:	4a c0       	rjmp	.+148    	; 0x11e8 <Encode_Property_APDU+0xf2>
                apdu_len =
    1154:	ca 84       	ldd	r12, Y+10	; 0x0a
    1156:	db 84       	ldd	r13, Y+11	; 0x0b
    1158:	ec 84       	ldd	r14, Y+12	; 0x0c
    115a:	fd 84       	ldd	r15, Y+13	; 0x0d
    115c:	0e 81       	ldd	r16, Y+6	; 0x06
    115e:	1f 81       	ldd	r17, Y+7	; 0x07
    1160:	28 85       	ldd	r18, Y+8	; 0x08
    1162:	39 85       	ldd	r19, Y+9	; 0x09
    1164:	4a 81       	ldd	r20, Y+2	; 0x02
    1166:	5b 81       	ldd	r21, Y+3	; 0x03
    1168:	6c 81       	ldd	r22, Y+4	; 0x04
    116a:	7d 81       	ldd	r23, Y+5	; 0x05
    116c:	c3 01       	movw	r24, r6
    116e:	0e 94 25 0a 	call	0x144a	; 0x144a <Device_Encode_Property_APDU>
    1172:	3c c0       	rjmp	.+120    	; 0x11ec <Encode_Property_APDU+0xf6>
                    rp_data->object_instance, rp_data->object_property,
                    rp_data->array_index, error_class, error_code);
            }
            break;
        case OBJECT_ANALOG_VALUE:
            if (Analog_Value_Valid_Instance(rp_data->object_instance)) {
    1174:	6a 81       	ldd	r22, Y+2	; 0x02
    1176:	7b 81       	ldd	r23, Y+3	; 0x03
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Analog_Value_Valid_Instance>
    1180:	88 23       	and	r24, r24
    1182:	91 f1       	breq	.+100    	; 0x11e8 <Encode_Property_APDU+0xf2>
                apdu_len =
    1184:	ca 84       	ldd	r12, Y+10	; 0x0a
    1186:	db 84       	ldd	r13, Y+11	; 0x0b
    1188:	ec 84       	ldd	r14, Y+12	; 0x0c
    118a:	fd 84       	ldd	r15, Y+13	; 0x0d
    118c:	0e 81       	ldd	r16, Y+6	; 0x06
    118e:	1f 81       	ldd	r17, Y+7	; 0x07
    1190:	28 85       	ldd	r18, Y+8	; 0x08
    1192:	39 85       	ldd	r19, Y+9	; 0x09
    1194:	4a 81       	ldd	r20, Y+2	; 0x02
    1196:	5b 81       	ldd	r21, Y+3	; 0x03
    1198:	6c 81       	ldd	r22, Y+4	; 0x04
    119a:	7d 81       	ldd	r23, Y+5	; 0x05
    119c:	c3 01       	movw	r24, r6
    119e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Analog_Value_Encode_Property_APDU>
    11a2:	24 c0       	rjmp	.+72     	; 0x11ec <Encode_Property_APDU+0xf6>
                    rp_data->object_instance, rp_data->object_property,
                    rp_data->array_index, error_class, error_code);
            }
            break;
        case OBJECT_BINARY_VALUE:
            if (Binary_Value_Valid_Instance(rp_data->object_instance)) {
    11a4:	6a 81       	ldd	r22, Y+2	; 0x02
    11a6:	7b 81       	ldd	r23, Y+3	; 0x03
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <Binary_Value_Valid_Instance>
    11b0:	88 23       	and	r24, r24
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <Encode_Property_APDU+0xf2>
                apdu_len =
    11b4:	ca 84       	ldd	r12, Y+10	; 0x0a
    11b6:	db 84       	ldd	r13, Y+11	; 0x0b
    11b8:	ec 84       	ldd	r14, Y+12	; 0x0c
    11ba:	fd 84       	ldd	r15, Y+13	; 0x0d
    11bc:	0e 81       	ldd	r16, Y+6	; 0x06
    11be:	1f 81       	ldd	r17, Y+7	; 0x07
    11c0:	28 85       	ldd	r18, Y+8	; 0x08
    11c2:	39 85       	ldd	r19, Y+9	; 0x09
    11c4:	4a 81       	ldd	r20, Y+2	; 0x02
    11c6:	5b 81       	ldd	r21, Y+3	; 0x03
    11c8:	6c 81       	ldd	r22, Y+4	; 0x04
    11ca:	7d 81       	ldd	r23, Y+5	; 0x05
    11cc:	c3 01       	movw	r24, r6
    11ce:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Binary_Value_Encode_Property_APDU>
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <Encode_Property_APDU+0xf6>
                    rp_data->object_instance, rp_data->object_property,
                    rp_data->array_index, error_class, error_code);
            }
            break;
        default:
            *error_class = ERROR_CLASS_OBJECT;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	fa 01       	movw	r30, r20
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_OBJECT;
    11de:	8f e1       	ldi	r24, 0x1F	; 31
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	f9 01       	movw	r30, r18
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
    int apdu_len = -1;
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	9f ef       	ldi	r25, 0xFF	; 255
            break;
    }

    return apdu_len;
}
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	ee e0       	ldi	r30, 0x0E	; 14
    11f2:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__epilogue_restores__+0x8>

000011f6 <handler_read_property>:
void handler_read_property(
    uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src,
    BACNET_CONFIRMED_SERVICE_DATA * service_data)
{
    11f6:	a6 e3       	ldi	r26, 0x36	; 54
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e1 e0       	ldi	r30, 0x01	; 1
    11fc:	f9 e0       	ldi	r31, 0x09	; 9
    11fe:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__prologue_saves__+0x8>
    1202:	8c 01       	movw	r16, r24
    1204:	4b 01       	movw	r8, r22
    1206:	3a 01       	movw	r6, r20
    1208:	79 01       	movw	r14, r18
    int ack_len = 0;
    int property_len = 0;
    int pdu_len = 0;
    BACNET_NPDU_DATA npdu_data;
    int bytes_sent = 0;
    BACNET_ERROR_CLASS error_class = ERROR_CLASS_OBJECT;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9e ab       	std	Y+54, r25	; 0x36
    1210:	8d ab       	std	Y+53, r24	; 0x35
    BACNET_ERROR_CODE error_code = ERROR_CODE_UNKNOWN_OBJECT;
    1212:	8f e1       	ldi	r24, 0x1F	; 31
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c ab       	std	Y+52, r25	; 0x34
    1218:	8b ab       	std	Y+51, r24	; 0x33
    BACNET_ADDRESS my_address;

    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    121a:	ce 01       	movw	r24, r28
    121c:	47 96       	adiw	r24, 0x17	; 23
    121e:	0e 94 a2 07 	call	0xf44	; 0xf44 <dlmstp_get_my_address>
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	ce 01       	movw	r24, r28
    122a:	89 96       	adiw	r24, 0x29	; 41
    122c:	0e 94 83 13 	call	0x2706	; 0x2706 <npdu_encode_npdu_data>
    pdu_len =
    1230:	9e 01       	movw	r18, r28
    1232:	27 5d       	subi	r18, 0xD7	; 215
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	ae 01       	movw	r20, r28
    1238:	49 5e       	subi	r20, 0xE9	; 233
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	b3 01       	movw	r22, r6
    123e:	8d e4       	ldi	r24, 0x4D	; 77
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0e 94 99 12 	call	0x2532	; 0x2532 <npdu_encode_pdu>
    1246:	5c 01       	movw	r10, r24
        npdu_encode_pdu(&Handler_Transmit_Buffer[0], src, &my_address,
        &npdu_data);
    if (service_data->segmented_message) {
    1248:	f7 01       	movw	r30, r14
    124a:	80 81       	ld	r24, Z
    124c:	95 01       	movw	r18, r10
    124e:	23 5b       	subi	r18, 0xB3	; 179
    1250:	3d 4f       	sbci	r19, 0xFD	; 253
    1252:	69 01       	movw	r12, r18
    1254:	88 23       	and	r24, r24
    1256:	19 f0       	breq	.+6      	; 0x125e <handler_read_property+0x68>
        /* we don't support segmentation - send an abort */
        len =
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	44 e0       	ldi	r20, 0x04	; 4
    125c:	3e c0       	rjmp	.+124    	; 0x12da <handler_read_property+0xe4>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_SEGMENTATION_NOT_SUPPORTED,
            true);
        goto RP_ABORT;
    }
    len = rp_decode_service_request(service_request, service_len, &data);
    125e:	ae 01       	movw	r20, r28
    1260:	4f 5f       	subi	r20, 0xFF	; 255
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	b4 01       	movw	r22, r8
    1266:	c8 01       	movw	r24, r16
    1268:	0e 94 1f 1b 	call	0x363e	; 0x363e <rp_decode_service_request>
    if (len < 0) {
    126c:	97 ff       	sbrs	r25, 7
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <handler_read_property+0x80>
        /* bad decoding - send an abort */
        len =
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	31 c0       	rjmp	.+98     	; 0x12d8 <handler_read_property+0xe2>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_OTHER, true);
        goto RP_ABORT;
    }
    /* most cases will be error */
    ack_len =
    1276:	ae 01       	movw	r20, r28
    1278:	4f 5f       	subi	r20, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	f7 01       	movw	r30, r14
    127e:	67 81       	ldd	r22, Z+7	; 0x07
    1280:	c6 01       	movw	r24, r12
    1282:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <rp_ack_encode_apdu_init>
    1286:	8c 01       	movw	r16, r24
        rp_ack_encode_apdu_init(&Handler_Transmit_Buffer[pdu_len],
        service_data->invoke_id, &data);
    /* FIXME: add buffer len as passed into function or use smart buffer */
    property_len =
        Encode_Property_APDU(&Handler_Transmit_Buffer[pdu_len + ack_len],
    1288:	c5 01       	movw	r24, r10
    128a:	80 0f       	add	r24, r16
    128c:	91 1f       	adc	r25, r17
    property_len =
    128e:	9e 01       	movw	r18, r28
    1290:	2d 5c       	subi	r18, 0xCD	; 205
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	ae 01       	movw	r20, r28
    1296:	4b 5c       	subi	r20, 0xCB	; 203
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	be 01       	movw	r22, r28
    129c:	6f 5f       	subi	r22, 0xFF	; 255
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	83 5b       	subi	r24, 0xB3	; 179
    12a2:	9d 4f       	sbci	r25, 0xFD	; 253
    12a4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <Encode_Property_APDU>
    12a8:	4c 01       	movw	r8, r24
        &data, &error_class, &error_code);
    if (property_len >= 0) {
    12aa:	97 fd       	sbrc	r25, 7
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <handler_read_property+0xd6>
        len =
            rp_ack_encode_apdu_object_property_end(&Handler_Transmit_Buffer
            [pdu_len + property_len + ack_len]);
    12ae:	c5 01       	movw	r24, r10
    12b0:	88 0d       	add	r24, r8
    12b2:	99 1d       	adc	r25, r9
    12b4:	80 0f       	add	r24, r16
    12b6:	91 1f       	adc	r25, r17
        len =
    12b8:	83 5b       	subi	r24, 0xB3	; 179
    12ba:	9d 4f       	sbci	r25, 0xFD	; 253
    12bc:	0e 94 1f 1c 	call	0x383e	; 0x383e <rp_ack_encode_apdu_object_property_end>
        len += ack_len + property_len;
    12c0:	98 01       	movw	r18, r16
    12c2:	28 0d       	add	r18, r8
    12c4:	39 1d       	adc	r19, r9
    12c6:	28 0f       	add	r18, r24
    12c8:	39 1f       	adc	r19, r25
    12ca:	18 c0       	rjmp	.+48     	; 0x12fc <handler_read_property+0x106>
    } else {
        switch (property_len) {
    12cc:	8e 3f       	cpi	r24, 0xFE	; 254
    12ce:	ff ef       	ldi	r31, 0xFF	; 255
    12d0:	9f 07       	cpc	r25, r31
    12d2:	41 f4       	brne	.+16     	; 0x12e4 <handler_read_property+0xee>
                /* BACnet APDU too small to fit data, so proper response is Abort */
            case BACNET_STATUS_ABORT:
                len =
    12d4:	21 e0       	ldi	r18, 0x01	; 1
    12d6:	44 e0       	ldi	r20, 0x04	; 4
    12d8:	f7 01       	movw	r30, r14
    12da:	67 81       	ldd	r22, Z+7	; 0x07
    12dc:	c6 01       	movw	r24, r12
    12de:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <abort_encode_apdu>
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <handler_read_property+0x104>
                    abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
                    service_data->invoke_id,
                    ABORT_REASON_SEGMENTATION_NOT_SUPPORTED, true);
                break;
            default:
                len =
    12e4:	0b a9       	ldd	r16, Y+51	; 0x33
    12e6:	1c a9       	ldd	r17, Y+52	; 0x34
    12e8:	2d a9       	ldd	r18, Y+53	; 0x35
    12ea:	3e a9       	ldd	r19, Y+54	; 0x36
    12ec:	4c e0       	ldi	r20, 0x0C	; 12
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	f7 01       	movw	r30, r14
    12f2:	67 81       	ldd	r22, Z+7	; 0x07
    12f4:	c6 01       	movw	r24, r12
    12f6:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bacerror_encode_apdu>
    12fa:	9c 01       	movw	r18, r24
                    error_class, error_code);
                break;
        }
    }
  RP_ABORT:
    pdu_len += len;
    12fc:	2a 0d       	add	r18, r10
    12fe:	3b 1d       	adc	r19, r11
    bytes_sent =
    1300:	4d e4       	ldi	r20, 0x4D	; 77
    1302:	52 e0       	ldi	r21, 0x02	; 2
    1304:	be 01       	movw	r22, r28
    1306:	67 5d       	subi	r22, 0xD7	; 215
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	c3 01       	movw	r24, r6
    130c:	0e 94 98 02 	call	0x530	; 0x530 <dlmstp_send_pdu>
        datalink_send_pdu(src, &npdu_data, &Handler_Transmit_Buffer[0],
        pdu_len);

    return;
}
    1310:	e6 96       	adiw	r28, 0x36	; 54
    1312:	ee e0       	ldi	r30, 0x0E	; 14
    1314:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__epilogue_restores__+0x8>

00001318 <Device_Object_Instance_Number>:

/* methods to manipulate the data */
uint32_t Device_Object_Instance_Number(
    void)
{
    return Object_Instance_Number;
    1318:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <Object_Instance_Number>
    131c:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <Object_Instance_Number+0x1>
    1320:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Object_Instance_Number+0x2>
    1324:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Object_Instance_Number+0x3>
}
    1328:	08 95       	ret

0000132a <Device_Set_Object_Instance_Number>:
bool Device_Set_Object_Instance_Number(
    uint32_t object_id)
{
    bool status = true; /* return value */

    if (object_id <= BACNET_MAX_INSTANCE) {
    132a:	61 15       	cp	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	20 e4       	ldi	r18, 0x40	; 64
    1330:	82 07       	cpc	r24, r18
    1332:	91 05       	cpc	r25, r1
    1334:	50 f4       	brcc	.+20     	; 0x134a <Device_Set_Object_Instance_Number+0x20>
        Object_Instance_Number = object_id;
    1336:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Object_Instance_Number>
    133a:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Object_Instance_Number+0x1>
    133e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Object_Instance_Number+0x2>
    1342:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Object_Instance_Number+0x3>
    bool status = true; /* return value */
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	08 95       	ret
           EEPROM_DEVICE_ADDRESS,
           (char *)&Object_Instance_Number,
           sizeof(Object_Instance_Number),
           EEPROM_BACNET_ID_ADDR); */
    } else
        status = false;
    134a:	80 e0       	ldi	r24, 0x00	; 0

    return status;
}
    134c:	08 95       	ret

0000134e <Device_Valid_Object_Instance_Number>:

bool Device_Valid_Object_Instance_Number(
    uint32_t object_id)
{
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    /* BACnet allows for a wildcard instance number */
    return (Object_Instance_Number == object_id);
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <Object_Instance_Number>
    1358:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <Object_Instance_Number+0x1>
    135c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <Object_Instance_Number+0x2>
    1360:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <Object_Instance_Number+0x3>
    1364:	06 17       	cp	r16, r22
    1366:	17 07       	cpc	r17, r23
    1368:	28 07       	cpc	r18, r24
    136a:	39 07       	cpc	r19, r25
    136c:	09 f0       	breq	.+2      	; 0x1370 <Device_Valid_Object_Instance_Number+0x22>
    136e:	40 e0       	ldi	r20, 0x00	; 0
}
    1370:	84 2f       	mov	r24, r20
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <Device_Vendor_Identifier>:

uint16_t Device_Vendor_Identifier(
    void)
{
    return BACNET_VENDOR_ID;
}
    1378:	84 e0       	ldi	r24, 0x04	; 4
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	08 95       	ret

0000137e <Device_Object_List_Count>:

unsigned Device_Object_List_Count(
    void)
{
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    unsigned count = 1; /* at least 1 for device object */

    /* FIXME: add objects as needed */
    count += Analog_Value_Count();
    1382:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Analog_Value_Count>
    1386:	ec 01       	movw	r28, r24
    count += Binary_Value_Count();
    1388:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Binary_Value_Count>
    count += Analog_Value_Count();
    138c:	8c 0f       	add	r24, r28
    138e:	9d 1f       	adc	r25, r29

    return count;
}
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <Device_Object_List_Identifier>:

bool Device_Object_List_Identifier(
    uint32_t array_index,
    int *object_type,
    uint32_t * instance)
{
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 ed       	ldi	r30, 0xD2	; 210
    139e:	f9 e0       	ldi	r31, 0x09	; 9
    13a0:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    13a4:	8a 01       	movw	r16, r20
    13a6:	e9 01       	movw	r28, r18
    bool status = false;
    uint32_t object_index = 0;
    uint32_t object_count = 0;

    /* device object */
    if (array_index == 1) {
    13a8:	61 30       	cpi	r22, 0x01	; 1
    13aa:	71 05       	cpc	r23, r1
    13ac:	81 05       	cpc	r24, r1
    13ae:	91 05       	cpc	r25, r1
    13b0:	91 f4       	brne	.+36     	; 0x13d6 <Device_Object_List_Identifier+0x3e>
        *object_type = OBJECT_DEVICE;
    13b2:	88 e0       	ldi	r24, 0x08	; 8
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	fa 01       	movw	r30, r20
    13b8:	91 83       	std	Z+1, r25	; 0x01
    13ba:	80 83       	st	Z, r24
        *instance = Object_Instance_Number;
    13bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Object_Instance_Number>
    13c0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Object_Instance_Number+0x1>
    13c4:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <Object_Instance_Number+0x2>
    13c8:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <Object_Instance_Number+0x3>
    13cc:	88 83       	st	Y, r24
    13ce:	99 83       	std	Y+1, r25	; 0x01
    13d0:	aa 83       	std	Y+2, r26	; 0x02
    13d2:	bb 83       	std	Y+3, r27	; 0x03
    13d4:	1c c0       	rjmp	.+56     	; 0x140e <Device_Object_List_Identifier+0x76>
    object_count = 1;
    /* FIXME: add objects as needed */
    /* analog value objects */
    if (!status) {
        /* array index starts at 1, and 1 for the device object */
        object_index -= object_count;
    13d6:	6b 01       	movw	r12, r22
    13d8:	7c 01       	movw	r14, r24
    13da:	f2 e0       	ldi	r31, 0x02	; 2
    13dc:	cf 1a       	sub	r12, r31
    13de:	d1 08       	sbc	r13, r1
    13e0:	e1 08       	sbc	r14, r1
    13e2:	f1 08       	sbc	r15, r1
        object_count = Analog_Value_Count();
    13e4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Analog_Value_Count>
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
        if (object_index < object_count) {
    13ec:	c8 16       	cp	r12, r24
    13ee:	d9 06       	cpc	r13, r25
    13f0:	ea 06       	cpc	r14, r26
    13f2:	fb 06       	cpc	r15, r27
    13f4:	70 f4       	brcc	.+28     	; 0x1412 <Device_Object_List_Identifier+0x7a>
            *object_type = OBJECT_ANALOG_VALUE;
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	f8 01       	movw	r30, r16
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	80 83       	st	Z, r24
            *instance = Analog_Value_Index_To_Instance(object_index);
    1400:	c6 01       	movw	r24, r12
    1402:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Analog_Value_Index_To_Instance>
        object_index -= object_count;
        object_count = Binary_Value_Count();
        /* is it a valid index for this object? */
        if (object_index < object_count) {
            *object_type = OBJECT_BINARY_VALUE;
            *instance = Binary_Value_Index_To_Instance(object_index);
    1406:	68 83       	st	Y, r22
    1408:	79 83       	std	Y+1, r23	; 0x01
    140a:	8a 83       	std	Y+2, r24	; 0x02
    140c:	9b 83       	std	Y+3, r25	; 0x03
{
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	17 c0       	rjmp	.+46     	; 0x1440 <Device_Object_List_Identifier+0xa8>
        object_index -= object_count;
    1412:	c8 1a       	sub	r12, r24
    1414:	d9 0a       	sbc	r13, r25
    1416:	ea 0a       	sbc	r14, r26
    1418:	fb 0a       	sbc	r15, r27
        object_count = Binary_Value_Count();
    141a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Binary_Value_Count>
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e0       	ldi	r27, 0x00	; 0
        if (object_index < object_count) {
    1422:	c8 16       	cp	r12, r24
    1424:	d9 06       	cpc	r13, r25
    1426:	ea 06       	cpc	r14, r26
    1428:	fb 06       	cpc	r15, r27
    142a:	48 f4       	brcc	.+18     	; 0x143e <Device_Object_List_Identifier+0xa6>
            *object_type = OBJECT_BINARY_VALUE;
    142c:	85 e0       	ldi	r24, 0x05	; 5
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	f8 01       	movw	r30, r16
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
            *instance = Binary_Value_Index_To_Instance(object_index);
    1436:	c6 01       	movw	r24, r12
    1438:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Binary_Value_Index_To_Instance>
    143c:	e4 cf       	rjmp	.-56     	; 0x1406 <Device_Object_List_Identifier+0x6e>
    143e:	80 e0       	ldi	r24, 0x00	; 0
            status = true;
        }
    }

    return status;
}
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	e8 e0       	ldi	r30, 0x08	; 8
    1446:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

0000144a <Device_Encode_Property_APDU>:
    uint32_t object_instance,
    BACNET_PROPERTY_ID property,
    uint32_t array_index,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    144a:	a5 e4       	ldi	r26, 0x45	; 69
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e2       	ldi	r30, 0x2B	; 43
    1450:	fa e0       	ldi	r31, 0x0A	; 10
    1452:	0c 94 4f 20 	jmp	0x409e	; 0x409e <__prologue_saves__>
    1456:	3c 01       	movw	r6, r24
    int apdu_len = 0;   /* return value */
    int len = 0;        /* apdu len intermediate value */
    BACNET_BIT_STRING bit_string;
    BACNET_CHARACTER_STRING char_string;
    uint32_t i = 0;
    int object_type = 0;
    1458:	26 96       	adiw	r28, 0x06	; 6
    145a:	1f ae       	std	Y+63, r1	; 0x3f
    145c:	1e ae       	std	Y+62, r1	; 0x3e
    145e:	26 97       	sbiw	r28, 0x06	; 6
    uint32_t instance = 0;
    1460:	24 96       	adiw	r28, 0x04	; 4
    1462:	1c ae       	std	Y+60, r1	; 0x3c
    1464:	1d ae       	std	Y+61, r1	; 0x3d
    1466:	1e ae       	std	Y+62, r1	; 0x3e
    1468:	1f ae       	std	Y+63, r1	; 0x3f
    146a:	24 97       	sbiw	r28, 0x04	; 4
    uint32_t count = 0;

    object_instance = object_instance;
    /* FIXME: change the hardcoded names to suit your application */
    switch (property) {
    146c:	0f 34       	cpi	r16, 0x4F	; 79
    146e:	11 05       	cpc	r17, r1
    1470:	21 05       	cpc	r18, r1
    1472:	31 05       	cpc	r19, r1
    1474:	09 f4       	brne	.+2      	; 0x1478 <Device_Encode_Property_APDU+0x2e>
    1476:	c7 c0       	rjmp	.+398    	; 0x1606 <Device_Encode_Property_APDU+0x1bc>
    1478:	08 f0       	brcs	.+2      	; 0x147c <Device_Encode_Property_APDU+0x32>
    147a:	63 c0       	rjmp	.+198    	; 0x1542 <Device_Encode_Property_APDU+0xf8>
    147c:	0f 33       	cpi	r16, 0x3F	; 63
    147e:	11 05       	cpc	r17, r1
    1480:	21 05       	cpc	r18, r1
    1482:	31 05       	cpc	r19, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <Device_Encode_Property_APDU+0x3e>
    1486:	97 c1       	rjmp	.+814    	; 0x17b6 <Device_Encode_Property_APDU+0x36c>
    1488:	38 f5       	brcc	.+78     	; 0x14d8 <Device_Encode_Property_APDU+0x8e>
    148a:	0e 31       	cpi	r16, 0x1E	; 30
    148c:	11 05       	cpc	r17, r1
    148e:	21 05       	cpc	r18, r1
    1490:	31 05       	cpc	r19, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <Device_Encode_Property_APDU+0x4c>
    1494:	b1 c1       	rjmp	.+866    	; 0x17f8 <Device_Encode_Property_APDU+0x3ae>
    1496:	78 f4       	brcc	.+30     	; 0x14b6 <Device_Encode_Property_APDU+0x6c>
    1498:	0b 30       	cpi	r16, 0x0B	; 11
    149a:	11 05       	cpc	r17, r1
    149c:	21 05       	cpc	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <Device_Encode_Property_APDU+0x5a>
    14a2:	80 c1       	rjmp	.+768    	; 0x17a4 <Device_Encode_Property_APDU+0x35a>
    14a4:	0c 30       	cpi	r16, 0x0C	; 12
    14a6:	11 05       	cpc	r17, r1
    14a8:	21 05       	cpc	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <Device_Encode_Property_APDU+0x66>
    14ae:	9c c1       	rjmp	.+824    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
            characterstring_init_ansi(&char_string, BACNET_VERSION_TEXT);
            apdu_len =
                encode_application_character_string(&apdu[0], &char_string);
            break;
        case PROP_APPLICATION_SOFTWARE_VERSION:
            characterstring_init_ansi(&char_string, "1.0");
    14b0:	62 e5       	ldi	r22, 0x52	; 82
    14b2:	71 e0       	ldi	r23, 0x01	; 1
    14b4:	af c0       	rjmp	.+350    	; 0x1614 <Device_Encode_Property_APDU+0x1ca>
    switch (property) {
    14b6:	0c 32       	cpi	r16, 0x2C	; 44
    14b8:	11 05       	cpc	r17, r1
    14ba:	21 05       	cpc	r18, r1
    14bc:	31 05       	cpc	r19, r1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <Device_Encode_Property_APDU+0x78>
    14c0:	b9 c0       	rjmp	.+370    	; 0x1634 <Device_Encode_Property_APDU+0x1ea>
    14c2:	0e 33       	cpi	r16, 0x3E	; 62
    14c4:	11 05       	cpc	r17, r1
    14c6:	21 05       	cpc	r18, r1
    14c8:	31 05       	cpc	r19, r1
    14ca:	09 f0       	breq	.+2      	; 0x14ce <Device_Encode_Property_APDU+0x84>
    14cc:	8d c1       	rjmp	.+794    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
                    apdu_len = BACNET_STATUS_ERROR;
                }
            }
            break;
        case PROP_MAX_APDU_LENGTH_ACCEPTED:
            apdu_len = encode_application_unsigned(&apdu[0], MAX_APDU);
    14ce:	42 e3       	ldi	r20, 0x32	; 50
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	81 c1       	rjmp	.+770    	; 0x17da <Device_Encode_Property_APDU+0x390>
    switch (property) {
    14d8:	09 34       	cpi	r16, 0x49	; 73
    14da:	11 05       	cpc	r17, r1
    14dc:	21 05       	cpc	r18, r1
    14de:	31 05       	cpc	r19, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <Device_Encode_Property_APDU+0x9a>
    14e2:	65 c1       	rjmp	.+714    	; 0x17ae <Device_Encode_Property_APDU+0x364>
    14e4:	78 f4       	brcc	.+30     	; 0x1504 <Device_Encode_Property_APDU+0xba>
    14e6:	00 34       	cpi	r16, 0x40	; 64
    14e8:	11 05       	cpc	r17, r1
    14ea:	21 05       	cpc	r18, r1
    14ec:	31 05       	cpc	r19, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <Device_Encode_Property_APDU+0xa8>
    14f0:	65 c1       	rjmp	.+714    	; 0x17bc <Device_Encode_Property_APDU+0x372>
    14f2:	06 34       	cpi	r16, 0x46	; 70
    14f4:	11 05       	cpc	r17, r1
    14f6:	21 05       	cpc	r18, r1
    14f8:	31 05       	cpc	r19, r1
    14fa:	09 f0       	breq	.+2      	; 0x14fe <Device_Encode_Property_APDU+0xb4>
    14fc:	75 c1       	rjmp	.+746    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
            characterstring_init_ansi(&char_string, "GNU Demo");
    14fe:	63 e4       	ldi	r22, 0x43	; 67
    1500:	71 e0       	ldi	r23, 0x01	; 1
    1502:	88 c0       	rjmp	.+272    	; 0x1614 <Device_Encode_Property_APDU+0x1ca>
    switch (property) {
    1504:	0c 34       	cpi	r16, 0x4C	; 76
    1506:	11 05       	cpc	r17, r1
    1508:	21 05       	cpc	r18, r1
    150a:	31 05       	cpc	r19, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <Device_Encode_Property_APDU+0xc6>
    150e:	d0 c0       	rjmp	.+416    	; 0x16b0 <Device_Encode_Property_APDU+0x266>
    1510:	0d 34       	cpi	r16, 0x4D	; 77
    1512:	11 05       	cpc	r17, r1
    1514:	21 05       	cpc	r18, r1
    1516:	31 05       	cpc	r19, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <Device_Encode_Property_APDU+0xd2>
    151a:	72 c0       	rjmp	.+228    	; 0x1600 <Device_Encode_Property_APDU+0x1b6>
    151c:	0b 34       	cpi	r16, 0x4B	; 75
    151e:	11 05       	cpc	r17, r1
    1520:	21 05       	cpc	r18, r1
    1522:	31 05       	cpc	r19, r1
    1524:	09 f0       	breq	.+2      	; 0x1528 <Device_Encode_Property_APDU+0xde>
    1526:	60 c1       	rjmp	.+704    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
            apdu_len =
    1528:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <Object_Instance_Number>
    152c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <Object_Instance_Number+0x1>
    1530:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <Object_Instance_Number+0x2>
    1534:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <Object_Instance_Number+0x3>
    1538:	68 e0       	ldi	r22, 0x08	; 8
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <encode_application_object_id>
    1540:	4f c1       	rjmp	.+670    	; 0x17e0 <Device_Encode_Property_APDU+0x396>
    switch (property) {
    1542:	08 37       	cpi	r16, 0x78	; 120
    1544:	11 05       	cpc	r17, r1
    1546:	21 05       	cpc	r18, r1
    1548:	31 05       	cpc	r19, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <Device_Encode_Property_APDU+0x104>
    154c:	6e c0       	rjmp	.+220    	; 0x162a <Device_Encode_Property_APDU+0x1e0>
    154e:	50 f5       	brcc	.+84     	; 0x15a4 <Device_Encode_Property_APDU+0x15a>
    1550:	02 36       	cpi	r16, 0x62	; 98
    1552:	11 05       	cpc	r17, r1
    1554:	21 05       	cpc	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <Device_Encode_Property_APDU+0x112>
    155a:	6f c0       	rjmp	.+222    	; 0x163a <Device_Encode_Property_APDU+0x1f0>
    155c:	98 f4       	brcc	.+38     	; 0x1584 <Device_Encode_Property_APDU+0x13a>
    155e:	00 36       	cpi	r16, 0x60	; 96
    1560:	11 05       	cpc	r17, r1
    1562:	21 05       	cpc	r18, r1
    1564:	31 05       	cpc	r19, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <Device_Encode_Property_APDU+0x120>
    1568:	7c c0       	rjmp	.+248    	; 0x1662 <Device_Encode_Property_APDU+0x218>
    156a:	01 36       	cpi	r16, 0x61	; 97
    156c:	11 05       	cpc	r17, r1
    156e:	21 05       	cpc	r18, r1
    1570:	31 05       	cpc	r19, r1
    1572:	09 f0       	breq	.+2      	; 0x1576 <Device_Encode_Property_APDU+0x12c>
    1574:	39 c1       	rjmp	.+626    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
            bitstring_init(&bit_string);
    1576:	ce 01       	movw	r24, r28
    1578:	c0 96       	adiw	r24, 0x30	; 48
    157a:	0e 94 01 1a 	call	0x3402	; 0x3402 <bitstring_init>
    157e:	00 e0       	ldi	r16, 0x00	; 0
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	60 c0       	rjmp	.+192    	; 0x1644 <Device_Encode_Property_APDU+0x1fa>
    switch (property) {
    1584:	0b 36       	cpi	r16, 0x6B	; 107
    1586:	11 05       	cpc	r17, r1
    1588:	21 05       	cpc	r18, r1
    158a:	31 05       	cpc	r19, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <Device_Encode_Property_APDU+0x146>
    158e:	02 c1       	rjmp	.+516    	; 0x1794 <Device_Encode_Property_APDU+0x34a>
    1590:	00 37       	cpi	r16, 0x70	; 112
    1592:	11 05       	cpc	r17, r1
    1594:	21 05       	cpc	r18, r1
    1596:	31 05       	cpc	r19, r1
    1598:	09 f0       	breq	.+2      	; 0x159c <Device_Encode_Property_APDU+0x152>
    159a:	26 c1       	rjmp	.+588    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
            apdu_len = encode_application_enumerated(&apdu[0], System_Status);
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	ba 01       	movw	r22, r20
    15a2:	fc c0       	rjmp	.+504    	; 0x179c <Device_Encode_Property_APDU+0x352>
    switch (property) {
    15a4:	0b 39       	cpi	r16, 0x9B	; 155
    15a6:	11 05       	cpc	r17, r1
    15a8:	21 05       	cpc	r18, r1
    15aa:	31 05       	cpc	r19, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <Device_Encode_Property_APDU+0x166>
    15ae:	ff c0       	rjmp	.+510    	; 0x17ae <Device_Encode_Property_APDU+0x364>
    15b0:	80 f4       	brcc	.+32     	; 0x15d2 <Device_Encode_Property_APDU+0x188>
    15b2:	09 37       	cpi	r16, 0x79	; 121
    15b4:	11 05       	cpc	r17, r1
    15b6:	21 05       	cpc	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	51 f1       	breq	.+84     	; 0x1610 <Device_Encode_Property_APDU+0x1c6>
    15bc:	0b 38       	cpi	r16, 0x8B	; 139
    15be:	11 05       	cpc	r17, r1
    15c0:	21 05       	cpc	r18, r1
    15c2:	31 05       	cpc	r19, r1
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <Device_Encode_Property_APDU+0x17e>
    15c6:	10 c1       	rjmp	.+544    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
            apdu_len =
    15c8:	4e e0       	ldi	r20, 0x0E	; 14
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	04 c1       	rjmp	.+520    	; 0x17da <Device_Encode_Property_APDU+0x390>
    switch (property) {
    15d2:	01 30       	cpi	r16, 0x01	; 1
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	18 07       	cpc	r17, r24
    15d8:	21 05       	cpc	r18, r1
    15da:	31 05       	cpc	r19, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <Device_Encode_Property_APDU+0x196>
    15de:	f8 c0       	rjmp	.+496    	; 0x17d0 <Device_Encode_Property_APDU+0x386>
    15e0:	00 38       	cpi	r16, 0x80	; 128
    15e2:	e5 e2       	ldi	r30, 0x25	; 37
    15e4:	1e 07       	cpc	r17, r30
    15e6:	21 05       	cpc	r18, r1
    15e8:	31 05       	cpc	r19, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <Device_Encode_Property_APDU+0x1a4>
    15ec:	ec c0       	rjmp	.+472    	; 0x17c6 <Device_Encode_Property_APDU+0x37c>
    15ee:	01 15       	cp	r16, r1
    15f0:	12 40       	sbci	r17, 0x02	; 2
    15f2:	21 05       	cpc	r18, r1
    15f4:	31 05       	cpc	r19, r1
    15f6:	09 f0       	breq	.+2      	; 0x15fa <Device_Encode_Property_APDU+0x1b0>
    15f8:	f7 c0       	rjmp	.+494    	; 0x17e8 <Device_Encode_Property_APDU+0x39e>
        case 9600:
            apdu_len =
                encode_application_unsigned(&apdu[0], RS485_Get_Baud_Rate());
            break;
        case 512:
            apdu_len = encode_application_unsigned(&apdu[0], stack_size());
    15fa:	0e 94 39 01 	call	0x272	; 0x272 <stack_size>
    15fe:	ea c0       	rjmp	.+468    	; 0x17d4 <Device_Encode_Property_APDU+0x38a>
            characterstring_init_ansi(&char_string, Object_Name);
    1600:	64 e0       	ldi	r22, 0x04	; 4
    1602:	71 e0       	ldi	r23, 0x01	; 1
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <Device_Encode_Property_APDU+0x1ca>
            apdu_len = encode_application_enumerated(&apdu[0], OBJECT_DEVICE);
    1606:	48 e0       	ldi	r20, 0x08	; 8
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	c6 c0       	rjmp	.+396    	; 0x179c <Device_Encode_Property_APDU+0x352>
            characterstring_init_ansi(&char_string, BACNET_VENDOR_NAME);
    1610:	67 e2       	ldi	r22, 0x27	; 39
    1612:	71 e0       	ldi	r23, 0x01	; 1
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	0e 94 8a 1a 	call	0x3514	; 0x3514 <characterstring_init_ansi>
            apdu_len =
    161c:	be 01       	movw	r22, r28
    161e:	6f 5f       	subi	r22, 0xFF	; 255
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	c3 01       	movw	r24, r6
    1624:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <encode_application_character_string>
    1628:	db c0       	rjmp	.+438    	; 0x17e0 <Device_Encode_Property_APDU+0x396>
            apdu_len =
    162a:	44 e0       	ldi	r20, 0x04	; 4
    162c:	51 e0       	ldi	r21, 0x01	; 1
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	d3 c0       	rjmp	.+422    	; 0x17da <Device_Encode_Property_APDU+0x390>
            characterstring_init_ansi(&char_string, BACNET_VERSION_TEXT);
    1634:	6c e4       	ldi	r22, 0x4C	; 76
    1636:	71 e0       	ldi	r23, 0x01	; 1
    1638:	ed cf       	rjmp	.-38     	; 0x1614 <Device_Encode_Property_APDU+0x1ca>
            apdu_len =
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	cb c0       	rjmp	.+406    	; 0x17da <Device_Encode_Property_APDU+0x390>
                bitstring_set_bit(&bit_string, (uint8_t) i,
    1644:	c8 01       	movw	r24, r16
    1646:	0e 94 cf 07 	call	0xf9e	; 0xf9e <apdu_service_supported>
    164a:	48 2f       	mov	r20, r24
    164c:	60 2f       	mov	r22, r16
    164e:	ce 01       	movw	r24, r28
    1650:	c0 96       	adiw	r24, 0x30	; 48
    1652:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
    1656:	0f 5f       	subi	r16, 0xFF	; 255
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
            for (i = 0; i < MAX_BACNET_SERVICES_SUPPORTED; i++) {
    165a:	09 32       	cpi	r16, 0x29	; 41
    165c:	11 05       	cpc	r17, r1
    165e:	91 f7       	brne	.-28     	; 0x1644 <Device_Encode_Property_APDU+0x1fa>
    1660:	20 c0       	rjmp	.+64     	; 0x16a2 <Device_Encode_Property_APDU+0x258>
            bitstring_init(&bit_string);
    1662:	ce 01       	movw	r24, r28
    1664:	c0 96       	adiw	r24, 0x30	; 48
    1666:	0e 94 01 1a 	call	0x3402	; 0x3402 <bitstring_init>
    166a:	10 e0       	ldi	r17, 0x00	; 0
                bitstring_set_bit(&bit_string, (uint8_t) i, false);
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	61 2f       	mov	r22, r17
    1670:	ce 01       	movw	r24, r28
    1672:	c0 96       	adiw	r24, 0x30	; 48
    1674:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
    1678:	1f 5f       	subi	r17, 0xFF	; 255
            for (i = 0; i < MAX_ASHRAE_OBJECT_TYPE; i++) {
    167a:	17 33       	cpi	r17, 0x37	; 55
    167c:	b9 f7       	brne	.-18     	; 0x166c <Device_Encode_Property_APDU+0x222>
            bitstring_set_bit(&bit_string, OBJECT_DEVICE, true);
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	68 e0       	ldi	r22, 0x08	; 8
    1682:	ce 01       	movw	r24, r28
    1684:	c0 96       	adiw	r24, 0x30	; 48
    1686:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, OBJECT_ANALOG_VALUE, true);
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	ce 01       	movw	r24, r28
    1690:	c0 96       	adiw	r24, 0x30	; 48
    1692:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, OBJECT_BINARY_VALUE, true);
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	65 e0       	ldi	r22, 0x05	; 5
    169a:	ce 01       	movw	r24, r28
    169c:	c0 96       	adiw	r24, 0x30	; 48
    169e:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    16a2:	be 01       	movw	r22, r28
    16a4:	60 5d       	subi	r22, 0xD0	; 208
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	c3 01       	movw	r24, r6
    16aa:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <encode_application_bitstring>
    16ae:	98 c0       	rjmp	.+304    	; 0x17e0 <Device_Encode_Property_APDU+0x396>
            count = Device_Object_List_Count();
    16b0:	0e 94 bf 09 	call	0x137e	; 0x137e <Device_Object_List_Count>
    16b4:	1c 01       	movw	r2, r24
    16b6:	41 2c       	mov	r4, r1
    16b8:	51 2c       	mov	r5, r1
            if (array_index == 0)
    16ba:	c1 14       	cp	r12, r1
    16bc:	d1 04       	cpc	r13, r1
    16be:	e1 04       	cpc	r14, r1
    16c0:	f1 04       	cpc	r15, r1
    16c2:	31 f4       	brne	.+12     	; 0x16d0 <Device_Encode_Property_APDU+0x286>
                apdu_len = encode_application_unsigned(&apdu[0], count);
    16c4:	b2 01       	movw	r22, r4
    16c6:	a1 01       	movw	r20, r2
    16c8:	c3 01       	movw	r24, r6
    16ca:	0e 94 a8 18 	call	0x3150	; 0x3150 <encode_application_unsigned>
    16ce:	58 c0       	rjmp	.+176    	; 0x1780 <Device_Encode_Property_APDU+0x336>
            else if (array_index == BACNET_ARRAY_ALL) {
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	c8 16       	cp	r12, r24
    16d4:	d8 06       	cpc	r13, r24
    16d6:	e8 06       	cpc	r14, r24
    16d8:	f8 06       	cpc	r15, r24
    16da:	c9 f5       	brne	.+114    	; 0x174e <Device_Encode_Property_APDU+0x304>
    16dc:	c1 2c       	mov	r12, r1
    16de:	d1 2c       	mov	r13, r1
    16e0:	76 01       	movw	r14, r12
    16e2:	c3 94       	inc	r12
    16e4:	00 e0       	ldi	r16, 0x00	; 0
    16e6:	10 e0       	ldi	r17, 0x00	; 0
                for (i = 1; i <= count; i++) {
    16e8:	2c 14       	cp	r2, r12
    16ea:	3d 04       	cpc	r3, r13
    16ec:	4e 04       	cpc	r4, r14
    16ee:	5f 04       	cpc	r5, r15
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <Device_Encode_Property_APDU+0x2aa>
    16f2:	96 c0       	rjmp	.+300    	; 0x1820 <Device_Encode_Property_APDU+0x3d6>
                    Device_Object_List_Identifier(i, &object_type, &instance);
    16f4:	9e 01       	movw	r18, r28
    16f6:	20 5c       	subi	r18, 0xC0	; 192
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	ae 01       	movw	r20, r28
    16fc:	4c 5b       	subi	r20, 0xBC	; 188
    16fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1700:	c7 01       	movw	r24, r14
    1702:	b6 01       	movw	r22, r12
    1704:	0e 94 cc 09 	call	0x1398	; 0x1398 <Device_Object_List_Identifier>
                    len =
    1708:	24 96       	adiw	r28, 0x04	; 4
    170a:	2c ad       	ldd	r18, Y+60	; 0x3c
    170c:	3d ad       	ldd	r19, Y+61	; 0x3d
    170e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1710:	5f ad       	ldd	r21, Y+63	; 0x3f
    1712:	24 97       	sbiw	r28, 0x04	; 4
    1714:	26 96       	adiw	r28, 0x06	; 6
    1716:	6e ad       	ldd	r22, Y+62	; 0x3e
    1718:	7f ad       	ldd	r23, Y+63	; 0x3f
    171a:	26 97       	sbiw	r28, 0x06	; 6
    171c:	c3 01       	movw	r24, r6
    171e:	80 0f       	add	r24, r16
    1720:	91 1f       	adc	r25, r17
    1722:	0e 94 40 17 	call	0x2e80	; 0x2e80 <encode_application_object_id>
                    apdu_len += len;
    1726:	08 0f       	add	r16, r24
    1728:	19 1f       	adc	r17, r25
                    if ((apdu_len + len) >= MAX_APDU) {
    172a:	80 0f       	add	r24, r16
    172c:	91 1f       	adc	r25, r17
    172e:	c2 97       	sbiw	r24, 0x32	; 50
    1730:	44 f0       	brlt	.+16     	; 0x1742 <Device_Encode_Property_APDU+0x2f8>
                        *error_code =
    1732:	86 e3       	ldi	r24, 0x36	; 54
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	f4 01       	movw	r30, r8
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
                        apdu_len = BACNET_STATUS_ABORT;
    173c:	0e ef       	ldi	r16, 0xFE	; 254
    173e:	1f ef       	ldi	r17, 0xFF	; 255
                        break;
    1740:	6f c0       	rjmp	.+222    	; 0x1820 <Device_Encode_Property_APDU+0x3d6>
                for (i = 1; i <= count; i++) {
    1742:	ff ef       	ldi	r31, 0xFF	; 255
    1744:	cf 1a       	sub	r12, r31
    1746:	df 0a       	sbc	r13, r31
    1748:	ef 0a       	sbc	r14, r31
    174a:	ff 0a       	sbc	r15, r31
    174c:	cd cf       	rjmp	.-102    	; 0x16e8 <Device_Encode_Property_APDU+0x29e>
                if (Device_Object_List_Identifier(array_index, &object_type,
    174e:	9e 01       	movw	r18, r28
    1750:	20 5c       	subi	r18, 0xC0	; 192
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	ae 01       	movw	r20, r28
    1756:	4c 5b       	subi	r20, 0xBC	; 188
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	c7 01       	movw	r24, r14
    175c:	b6 01       	movw	r22, r12
    175e:	0e 94 cc 09 	call	0x1398	; 0x1398 <Device_Object_List_Identifier>
    1762:	88 23       	and	r24, r24
    1764:	79 f0       	breq	.+30     	; 0x1784 <Device_Encode_Property_APDU+0x33a>
                    apdu_len =
    1766:	24 96       	adiw	r28, 0x04	; 4
    1768:	2c ad       	ldd	r18, Y+60	; 0x3c
    176a:	3d ad       	ldd	r19, Y+61	; 0x3d
    176c:	4e ad       	ldd	r20, Y+62	; 0x3e
    176e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1770:	24 97       	sbiw	r28, 0x04	; 4
    1772:	26 96       	adiw	r28, 0x06	; 6
    1774:	6e ad       	ldd	r22, Y+62	; 0x3e
    1776:	7f ad       	ldd	r23, Y+63	; 0x3f
    1778:	26 97       	sbiw	r28, 0x06	; 6
    177a:	c3 01       	movw	r24, r6
    177c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <encode_application_object_id>
    1780:	8c 01       	movw	r16, r24
    1782:	4e c0       	rjmp	.+156    	; 0x1820 <Device_Encode_Property_APDU+0x3d6>
                    *error_class = ERROR_CLASS_PROPERTY;
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	f5 01       	movw	r30, r10
    178a:	91 83       	std	Z+1, r25	; 0x01
    178c:	80 83       	st	Z, r24
                    *error_code = ERROR_CODE_INVALID_ARRAY_INDEX;
    178e:	8a e2       	ldi	r24, 0x2A	; 42
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	41 c0       	rjmp	.+130    	; 0x1816 <Device_Encode_Property_APDU+0x3cc>
            apdu_len =
    1794:	43 e0       	ldi	r20, 0x03	; 3
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	c3 01       	movw	r24, r6
    179e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <encode_application_enumerated>
    17a2:	1e c0       	rjmp	.+60     	; 0x17e0 <Device_Encode_Property_APDU+0x396>
            apdu_len = encode_application_unsigned(&apdu[0], 60000);
    17a4:	40 e6       	ldi	r20, 0x60	; 96
    17a6:	5a ee       	ldi	r21, 0xEA	; 234
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	16 c0       	rjmp	.+44     	; 0x17da <Device_Encode_Property_APDU+0x390>
            apdu_len = encode_application_unsigned(&apdu[0], 0);
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	ba 01       	movw	r22, r20
    17b4:	12 c0       	rjmp	.+36     	; 0x17da <Device_Encode_Property_APDU+0x390>
                dlmstp_max_info_frames());
    17b6:	0e 94 88 07 	call	0xf10	; 0xf10 <dlmstp_max_info_frames>
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <Device_Encode_Property_APDU+0x376>
                encode_application_unsigned(&apdu[0], dlmstp_max_master());
    17bc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <dlmstp_max_master>
    17c0:	48 2f       	mov	r20, r24
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	08 c0       	rjmp	.+16     	; 0x17d6 <Device_Encode_Property_APDU+0x38c>
                encode_application_unsigned(&apdu[0], RS485_Get_Baud_Rate());
    17c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <RS485_Get_Baud_Rate>
    17ca:	ab 01       	movw	r20, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <Device_Encode_Property_APDU+0x390>
            break;
        case 513:
            apdu_len = encode_application_unsigned(&apdu[0], stack_unused());
    17d0:	0e 94 3e 01 	call	0x27c	; 0x27c <stack_unused>
    17d4:	ac 01       	movw	r20, r24
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	c3 01       	movw	r24, r6
    17dc:	0e 94 a8 18 	call	0x3150	; 0x3150 <encode_application_unsigned>
    17e0:	8c 01       	movw	r16, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
            apdu_len = -1;
            break;
    }
    /*  only array properties can have array options */
    if ((apdu_len >= 0) && (property != PROP_OBJECT_LIST) &&
    17e2:	97 ff       	sbrs	r25, 7
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <Device_Encode_Property_APDU+0x3b2>
    17e6:	1c c0       	rjmp	.+56     	; 0x1820 <Device_Encode_Property_APDU+0x3d6>
            *error_class = ERROR_CLASS_PROPERTY;
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	f5 01       	movw	r30, r10
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    17f2:	80 e2       	ldi	r24, 0x20	; 32
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <Device_Encode_Property_APDU+0x3cc>
    int apdu_len = 0;   /* return value */
    17f8:	00 e0       	ldi	r16, 0x00	; 0
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    if ((apdu_len >= 0) && (property != PROP_OBJECT_LIST) &&
    17fc:	ff ef       	ldi	r31, 0xFF	; 255
    17fe:	cf 16       	cp	r12, r31
    1800:	df 06       	cpc	r13, r31
    1802:	ef 06       	cpc	r14, r31
    1804:	ff 06       	cpc	r15, r31
    1806:	61 f0       	breq	.+24     	; 0x1820 <Device_Encode_Property_APDU+0x3d6>
        (array_index != BACNET_ARRAY_ALL)) {
        *error_class = ERROR_CLASS_PROPERTY;
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	f5 01       	movw	r30, r10
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    1812:	82 e3       	ldi	r24, 0x32	; 50
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	f4 01       	movw	r30, r8
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
        apdu_len = BACNET_STATUS_ERROR;
    181c:	0f ef       	ldi	r16, 0xFF	; 255
    181e:	1f ef       	ldi	r17, 0xFF	; 255
    }

    return apdu_len;
}
    1820:	c8 01       	movw	r24, r16
    1822:	cb 5b       	subi	r28, 0xBB	; 187
    1824:	df 4f       	sbci	r29, 0xFF	; 255
    1826:	e2 e1       	ldi	r30, 0x12	; 18
    1828:	0c 94 6b 20 	jmp	0x40d6	; 0x40d6 <__epilogue_restores__>

0000182c <Device_Write_Property>:

bool Device_Write_Property(
    BACNET_WRITE_PROPERTY_DATA * wp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    182c:	a4 e3       	ldi	r26, 0x34	; 52
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ec e1       	ldi	r30, 0x1C	; 28
    1832:	fc e0       	ldi	r31, 0x0C	; 12
    1834:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    1838:	5c 01       	movw	r10, r24
    183a:	6b 01       	movw	r12, r22
    183c:	7a 01       	movw	r14, r20
    bool status = false;        /* return value */
    int len = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    if (!Device_Valid_Object_Instance_Number(wp_data->object_instance)) {
    183e:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <Object_Instance_Number>
    1842:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <Object_Instance_Number+0x1>
    1846:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Object_Instance_Number+0x2>
    184a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <Object_Instance_Number+0x3>
    184e:	fc 01       	movw	r30, r24
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	a4 81       	ldd	r26, Z+4	; 0x04
    1856:	b5 81       	ldd	r27, Z+5	; 0x05
    1858:	48 17       	cp	r20, r24
    185a:	59 07       	cpc	r21, r25
    185c:	6a 07       	cpc	r22, r26
    185e:	7b 07       	cpc	r23, r27
    1860:	41 f0       	breq	.+16     	; 0x1872 <Device_Write_Property+0x46>
        *error_class = ERROR_CLASS_OBJECT;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	f6 01       	movw	r30, r12
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_UNKNOWN_OBJECT;
    186c:	8f e1       	ldi	r24, 0x1F	; 31
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	5a c1       	rjmp	.+692    	; 0x1b26 <Device_Write_Property+0x2fa>
        return false;
    }
    /* decode the some of the request */
    len =
        bacapp_decode_application_data(wp_data->application_data,
        wp_data->application_data_len, &value);
    1872:	f5 01       	movw	r30, r10
    1874:	e0 5c       	subi	r30, 0xC0	; 192
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    len =
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	ae 01       	movw	r20, r28
    187e:	4f 5f       	subi	r20, 0xFF	; 255
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	c5 01       	movw	r24, r10
    1884:	0e 96       	adiw	r24, 0x0e	; 14
    1886:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <bacapp_decode_application_data>
    /* FIXME: len < application_data_len: more data? */
    if (len < 0) {
    188a:	97 ff       	sbrs	r25, 7
    188c:	08 c0       	rjmp	.+16     	; 0x189e <Device_Write_Property+0x72>
        /* error while decoding - a value larger than we can handle */
        *error_class = ERROR_CLASS_PROPERTY;
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	f6 01       	movw	r30, r12
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    1898:	85 e2       	ldi	r24, 0x25	; 37
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	44 c1       	rjmp	.+648    	; 0x1b26 <Device_Write_Property+0x2fa>
        return false;
    }
    if ((wp_data->object_property != PROP_OBJECT_LIST) &&
    189e:	f5 01       	movw	r30, r10
    18a0:	06 81       	ldd	r16, Z+6	; 0x06
    18a2:	17 81       	ldd	r17, Z+7	; 0x07
    18a4:	20 85       	ldd	r18, Z+8	; 0x08
    18a6:	31 85       	ldd	r19, Z+9	; 0x09
    18a8:	0c 34       	cpi	r16, 0x4C	; 76
    18aa:	11 05       	cpc	r17, r1
    18ac:	21 05       	cpc	r18, r1
    18ae:	31 05       	cpc	r19, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <Device_Write_Property+0x88>
    18b2:	2a c1       	rjmp	.+596    	; 0x1b08 <Device_Write_Property+0x2dc>
    18b4:	82 85       	ldd	r24, Z+10	; 0x0a
    18b6:	93 85       	ldd	r25, Z+11	; 0x0b
    18b8:	a4 85       	ldd	r26, Z+12	; 0x0c
    18ba:	b5 85       	ldd	r27, Z+13	; 0x0d
    18bc:	8f 3f       	cpi	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	af 4f       	sbci	r26, 0xFF	; 255
    18c2:	bf 4f       	sbci	r27, 0xFF	; 255
    18c4:	41 f0       	breq	.+16     	; 0x18d6 <Device_Write_Property+0xaa>
        (wp_data->array_index != BACNET_ARRAY_ALL)) {
        /*  only array properties can have array options */
        *error_class = ERROR_CLASS_PROPERTY;
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	f6 01       	movw	r30, r12
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    18d0:	82 e3       	ldi	r24, 0x32	; 50
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	28 c1       	rjmp	.+592    	; 0x1b26 <Device_Write_Property+0x2fa>
        return false;
    }
    switch (wp_data->object_property) {
    18d6:	09 34       	cpi	r16, 0x49	; 73
    18d8:	11 05       	cpc	r17, r1
    18da:	21 05       	cpc	r18, r1
    18dc:	31 05       	cpc	r19, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <Device_Write_Property+0xb6>
    18e0:	13 c1       	rjmp	.+550    	; 0x1b08 <Device_Write_Property+0x2dc>
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <Device_Write_Property+0xba>
    18e4:	41 c0       	rjmp	.+130    	; 0x1968 <Device_Write_Property+0x13c>
    18e6:	0c 32       	cpi	r16, 0x2C	; 44
    18e8:	11 05       	cpc	r17, r1
    18ea:	21 05       	cpc	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <Device_Write_Property+0xc6>
    18f0:	0b c1       	rjmp	.+534    	; 0x1b08 <Device_Write_Property+0x2dc>
    18f2:	f8 f4       	brcc	.+62     	; 0x1932 <Device_Write_Property+0x106>
    18f4:	08 31       	cpi	r16, 0x18	; 24
    18f6:	11 05       	cpc	r17, r1
    18f8:	21 05       	cpc	r18, r1
    18fa:	31 05       	cpc	r19, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <Device_Write_Property+0xd4>
    18fe:	04 c1       	rjmp	.+520    	; 0x1b08 <Device_Write_Property+0x2dc>
    1900:	58 f4       	brcc	.+22     	; 0x1918 <Device_Write_Property+0xec>
    1902:	0b 50       	subi	r16, 0x0B	; 11
    1904:	11 09       	sbc	r17, r1
    1906:	21 09       	sbc	r18, r1
    1908:	31 09       	sbc	r19, r1
    190a:	02 30       	cpi	r16, 0x02	; 2
    190c:	11 05       	cpc	r17, r1
    190e:	21 05       	cpc	r18, r1
    1910:	31 05       	cpc	r19, r1
    1912:	08 f0       	brcs	.+2      	; 0x1916 <Device_Write_Property+0xea>
    1914:	01 c1       	rjmp	.+514    	; 0x1b18 <Device_Write_Property+0x2ec>
    1916:	f8 c0       	rjmp	.+496    	; 0x1b08 <Device_Write_Property+0x2dc>
    1918:	0c 31       	cpi	r16, 0x1C	; 28
    191a:	11 05       	cpc	r17, r1
    191c:	21 05       	cpc	r18, r1
    191e:	31 05       	cpc	r19, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <Device_Write_Property+0xf8>
    1922:	f2 c0       	rjmp	.+484    	; 0x1b08 <Device_Write_Property+0x2dc>
    1924:	0e 31       	cpi	r16, 0x1E	; 30
    1926:	11 05       	cpc	r17, r1
    1928:	21 05       	cpc	r18, r1
    192a:	31 05       	cpc	r19, r1
    192c:	09 f0       	breq	.+2      	; 0x1930 <Device_Write_Property+0x104>
    192e:	f4 c0       	rjmp	.+488    	; 0x1b18 <Device_Write_Property+0x2ec>
    1930:	eb c0       	rjmp	.+470    	; 0x1b08 <Device_Write_Property+0x2dc>
    1932:	0e 33       	cpi	r16, 0x3E	; 62
    1934:	11 05       	cpc	r17, r1
    1936:	21 05       	cpc	r18, r1
    1938:	31 05       	cpc	r19, r1
    193a:	09 f4       	brne	.+2      	; 0x193e <Device_Write_Property+0x112>
    193c:	e5 c0       	rjmp	.+458    	; 0x1b08 <Device_Write_Property+0x2dc>
    193e:	28 f4       	brcc	.+10     	; 0x194a <Device_Write_Property+0x11e>
    1940:	08 53       	subi	r16, 0x38	; 56
    1942:	11 09       	sbc	r17, r1
    1944:	21 09       	sbc	r18, r1
    1946:	31 09       	sbc	r19, r1
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <Device_Write_Property+0x19c>
    194a:	00 34       	cpi	r16, 0x40	; 64
    194c:	11 05       	cpc	r17, r1
    194e:	21 05       	cpc	r18, r1
    1950:	31 05       	cpc	r19, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <Device_Write_Property+0x12a>
    1954:	88 c0       	rjmp	.+272    	; 0x1a66 <Device_Write_Property+0x23a>
    1956:	08 f4       	brcc	.+2      	; 0x195a <Device_Write_Property+0x12e>
    1958:	6d c0       	rjmp	.+218    	; 0x1a34 <Device_Write_Property+0x208>
    195a:	06 34       	cpi	r16, 0x46	; 70
    195c:	11 05       	cpc	r17, r1
    195e:	21 05       	cpc	r18, r1
    1960:	31 05       	cpc	r19, r1
    1962:	09 f0       	breq	.+2      	; 0x1966 <Device_Write_Property+0x13a>
    1964:	d9 c0       	rjmp	.+434    	; 0x1b18 <Device_Write_Property+0x2ec>
    1966:	d0 c0       	rjmp	.+416    	; 0x1b08 <Device_Write_Property+0x2dc>
    1968:	00 37       	cpi	r16, 0x70	; 112
    196a:	11 05       	cpc	r17, r1
    196c:	21 05       	cpc	r18, r1
    196e:	31 05       	cpc	r19, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <Device_Write_Property+0x148>
    1972:	ca c0       	rjmp	.+404    	; 0x1b08 <Device_Write_Property+0x2dc>
    1974:	f0 f4       	brcc	.+60     	; 0x19b2 <Device_Write_Property+0x186>
    1976:	03 36       	cpi	r16, 0x63	; 99
    1978:	11 05       	cpc	r17, r1
    197a:	21 05       	cpc	r18, r1
    197c:	31 05       	cpc	r19, r1
    197e:	90 f4       	brcc	.+36     	; 0x19a4 <Device_Write_Property+0x178>
    1980:	00 36       	cpi	r16, 0x60	; 96
    1982:	11 05       	cpc	r17, r1
    1984:	21 05       	cpc	r18, r1
    1986:	31 05       	cpc	r19, r1
    1988:	08 f0       	brcs	.+2      	; 0x198c <Device_Write_Property+0x160>
    198a:	be c0       	rjmp	.+380    	; 0x1b08 <Device_Write_Property+0x2dc>
    198c:	0b 34       	cpi	r16, 0x4B	; 75
    198e:	11 05       	cpc	r17, r1
    1990:	21 05       	cpc	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	a1 f1       	breq	.+104    	; 0x19fe <Device_Write_Property+0x1d2>
    1996:	0d 34       	cpi	r16, 0x4D	; 77
    1998:	11 05       	cpc	r17, r1
    199a:	21 05       	cpc	r18, r1
    199c:	31 05       	cpc	r19, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <Device_Write_Property+0x176>
    19a0:	78 c0       	rjmp	.+240    	; 0x1a92 <Device_Write_Property+0x266>
    19a2:	ba c0       	rjmp	.+372    	; 0x1b18 <Device_Write_Property+0x2ec>
    19a4:	0b 36       	cpi	r16, 0x6B	; 107
    19a6:	11 05       	cpc	r17, r1
    19a8:	21 05       	cpc	r18, r1
    19aa:	31 05       	cpc	r19, r1
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <Device_Write_Property+0x184>
    19ae:	b4 c0       	rjmp	.+360    	; 0x1b18 <Device_Write_Property+0x2ec>
    19b0:	ab c0       	rjmp	.+342    	; 0x1b08 <Device_Write_Property+0x2dc>
    19b2:	0b 38       	cpi	r16, 0x8B	; 139
    19b4:	11 05       	cpc	r17, r1
    19b6:	21 05       	cpc	r18, r1
    19b8:	31 05       	cpc	r19, r1
    19ba:	09 f4       	brne	.+2      	; 0x19be <Device_Write_Property+0x192>
    19bc:	a5 c0       	rjmp	.+330    	; 0x1b08 <Device_Write_Property+0x2dc>
    19be:	58 f4       	brcc	.+22     	; 0x19d6 <Device_Write_Property+0x1aa>
    19c0:	07 57       	subi	r16, 0x77	; 119
    19c2:	11 09       	sbc	r17, r1
    19c4:	21 09       	sbc	r18, r1
    19c6:	31 09       	sbc	r19, r1
    19c8:	03 30       	cpi	r16, 0x03	; 3
    19ca:	11 05       	cpc	r17, r1
    19cc:	21 05       	cpc	r18, r1
    19ce:	31 05       	cpc	r19, r1
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <Device_Write_Property+0x1a8>
    19d2:	a2 c0       	rjmp	.+324    	; 0x1b18 <Device_Write_Property+0x2ec>
    19d4:	99 c0       	rjmp	.+306    	; 0x1b08 <Device_Write_Property+0x2dc>
    19d6:	0b 39       	cpi	r16, 0x9B	; 155
    19d8:	11 05       	cpc	r17, r1
    19da:	21 05       	cpc	r18, r1
    19dc:	31 05       	cpc	r19, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <Device_Write_Property+0x1b6>
    19e0:	93 c0       	rjmp	.+294    	; 0x1b08 <Device_Write_Property+0x2dc>
    19e2:	00 38       	cpi	r16, 0x80	; 128
    19e4:	f5 e2       	ldi	r31, 0x25	; 37
    19e6:	1f 07       	cpc	r17, r31
    19e8:	21 05       	cpc	r18, r1
    19ea:	31 05       	cpc	r19, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <Device_Write_Property+0x1c4>
    19ee:	78 c0       	rjmp	.+240    	; 0x1ae0 <Device_Write_Property+0x2b4>
    19f0:	08 39       	cpi	r16, 0x98	; 152
    19f2:	11 05       	cpc	r17, r1
    19f4:	21 05       	cpc	r18, r1
    19f6:	31 05       	cpc	r19, r1
    19f8:	09 f0       	breq	.+2      	; 0x19fc <Device_Write_Property+0x1d0>
    19fa:	8e c0       	rjmp	.+284    	; 0x1b18 <Device_Write_Property+0x2ec>
    19fc:	85 c0       	rjmp	.+266    	; 0x1b08 <Device_Write_Property+0x2dc>
        case PROP_OBJECT_IDENTIFIER:
            if (value.tag == BACNET_APPLICATION_TAG_OBJECT_ID) {
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	8c 30       	cpi	r24, 0x0C	; 12
    1a02:	d9 f4       	brne	.+54     	; 0x1a3a <Device_Write_Property+0x20e>
                if ((value.type.Object_Id.type == OBJECT_DEVICE) &&
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	08 97       	sbiw	r24, 0x08	; 8
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <Device_Write_Property+0x1e2>
    1a0c:	40 cf       	rjmp	.-384    	; 0x188e <Device_Write_Property+0x62>
                    (Device_Set_Object_Instance_Number(value.type.
    1a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a10:	9f 81       	ldd	r25, Y+7	; 0x07
    1a12:	a8 85       	ldd	r26, Y+8	; 0x08
    1a14:	b9 85       	ldd	r27, Y+9	; 0x09
    if (object_id <= BACNET_MAX_INSTANCE) {
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	20 e4       	ldi	r18, 0x40	; 64
    1a1a:	a2 07       	cpc	r26, r18
    1a1c:	b1 05       	cpc	r27, r1
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <Device_Write_Property+0x1f6>
    1a20:	36 cf       	rjmp	.-404    	; 0x188e <Device_Write_Property+0x62>
        Object_Instance_Number = object_id;
    1a22:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Object_Instance_Number>
    1a26:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Object_Instance_Number+0x1>
    1a2a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <Object_Instance_Number+0x2>
    1a2e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <Object_Instance_Number+0x3>
    1a32:	68 c0       	rjmp	.+208    	; 0x1b04 <Device_Write_Property+0x2d8>
                *error_class = ERROR_CLASS_PROPERTY;
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
            }
            break;
        case PROP_MAX_INFO_FRAMES:
            if (value.tag == BACNET_APPLICATION_TAG_UNSIGNED_INT) {
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	41 f0       	breq	.+16     	; 0x1a4a <Device_Write_Property+0x21e>
                *error_class = ERROR_CLASS_PROPERTY;
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	f6 01       	movw	r30, r12
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
    1a44:	89 e0       	ldi	r24, 0x09	; 9
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	6e c0       	rjmp	.+220    	; 0x1b26 <Device_Write_Property+0x2fa>
                if (value.type.Unsigned_Int <= 255) {
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	ae 81       	ldd	r26, Y+6	; 0x06
    1a50:	bf 81       	ldd	r27, Y+7	; 0x07
    1a52:	8f 3f       	cpi	r24, 0xFF	; 255
    1a54:	91 05       	cpc	r25, r1
    1a56:	a1 05       	cpc	r26, r1
    1a58:	b1 05       	cpc	r27, r1
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <Device_Write_Property+0x234>
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <Device_Write_Property+0x234>
    1a5e:	17 cf       	rjmp	.-466    	; 0x188e <Device_Write_Property+0x62>
                    dlmstp_set_max_info_frames(value.type.Unsigned_Int);
    1a60:	0e 94 84 07 	call	0xf08	; 0xf08 <dlmstp_set_max_info_frames>
    1a64:	4f c0       	rjmp	.+158    	; 0x1b04 <Device_Write_Property+0x2d8>
                *error_class = ERROR_CLASS_PROPERTY;
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
            }
            break;
        case PROP_MAX_MASTER:
            if (value.tag == BACNET_APPLICATION_TAG_UNSIGNED_INT) {
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	82 30       	cpi	r24, 0x02	; 2
    1a6a:	39 f7       	brne	.-50     	; 0x1a3a <Device_Write_Property+0x20e>
                if ((value.type.Unsigned_Int > 0) &&
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	ae 81       	ldd	r26, Y+6	; 0x06
    1a72:	bf 81       	ldd	r27, Y+7	; 0x07
    1a74:	ac 01       	movw	r20, r24
    1a76:	bd 01       	movw	r22, r26
    1a78:	41 50       	subi	r20, 0x01	; 1
    1a7a:	51 09       	sbc	r21, r1
    1a7c:	61 09       	sbc	r22, r1
    1a7e:	71 09       	sbc	r23, r1
    1a80:	4f 37       	cpi	r20, 0x7F	; 127
    1a82:	51 05       	cpc	r21, r1
    1a84:	61 05       	cpc	r22, r1
    1a86:	71 05       	cpc	r23, r1
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <Device_Write_Property+0x260>
    1a8a:	01 cf       	rjmp	.-510    	; 0x188e <Device_Write_Property+0x62>
                    (value.type.Unsigned_Int <= 127)) {
                    dlmstp_set_max_master(value.type.Unsigned_Int);
    1a8c:	0e 94 8b 07 	call	0xf16	; 0xf16 <dlmstp_set_max_master>
    1a90:	39 c0       	rjmp	.+114    	; 0x1b04 <Device_Write_Property+0x2d8>
                *error_class = ERROR_CLASS_PROPERTY;
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
            }
            break;
        case PROP_OBJECT_NAME:
            if (value.tag == BACNET_APPLICATION_TAG_CHARACTER_STRING) {
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	87 30       	cpi	r24, 0x07	; 7
    1a96:	89 f6       	brne	.-94     	; 0x1a3a <Device_Write_Property+0x20e>
                uint8_t encoding;

                encoding =
    1a98:	ce 01       	movw	r24, r28
    1a9a:	04 96       	adiw	r24, 0x04	; 4
    1a9c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <characterstring_encoding>
                    characterstring_encoding(&value.type.Character_String);
                if (encoding == CHARACTER_ANSI_X34) {
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	16 c0       	rjmp	.+44     	; 0x1ad0 <Device_Write_Property+0x2a4>
                    if (characterstring_ansi_copy(&Object_Name[0],
    1aa4:	ae 01       	movw	r20, r28
    1aa6:	4c 5f       	subi	r20, 0xFC	; 252
    1aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aaa:	64 e1       	ldi	r22, 0x14	; 20
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	0e 94 9e 1a 	call	0x353c	; 0x353c <characterstring_ansi_copy>
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	3a c0       	rjmp	.+116    	; 0x1b2e <Device_Write_Property+0x302>
                            sizeof(Object_Name),
                            &value.type.Character_String)) {
                        status = true;
                    } else {
                        *error_class = ERROR_CLASS_PROPERTY;
    1aba:	22 e0       	ldi	r18, 0x02	; 2
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	f6 01       	movw	r30, r12
    1ac0:	31 83       	std	Z+1, r19	; 0x01
    1ac2:	20 83       	st	Z, r18
                        *error_code = ERROR_CODE_NO_SPACE_TO_WRITE_PROPERTY;
    1ac4:	24 e1       	ldi	r18, 0x14	; 20
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	f7 01       	movw	r30, r14
    1aca:	31 83       	std	Z+1, r19	; 0x01
    1acc:	20 83       	st	Z, r18
    1ace:	2f c0       	rjmp	.+94     	; 0x1b2e <Device_Write_Property+0x302>
                    }
                } else {
                    *error_class = ERROR_CLASS_PROPERTY;
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	f6 01       	movw	r30, r12
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
                    *error_code = ERROR_CODE_CHARACTER_SET_NOT_SUPPORTED;
    1ada:	89 e2       	ldi	r24, 0x29	; 41
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	23 c0       	rjmp	.+70     	; 0x1b26 <Device_Write_Property+0x2fa>
                *error_class = ERROR_CLASS_PROPERTY;
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
            }
            break;
        case 9600:
            if (value.tag == BACNET_APPLICATION_TAG_UNSIGNED_INT) {
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <Device_Write_Property+0x2bc>
    1ae6:	a9 cf       	rjmp	.-174    	; 0x1a3a <Device_Write_Property+0x20e>
                if (value.type.Unsigned_Int > 115200) {
    1ae8:	6c 81       	ldd	r22, Y+4	; 0x04
    1aea:	7d 81       	ldd	r23, Y+5	; 0x05
    1aec:	8e 81       	ldd	r24, Y+6	; 0x06
    1aee:	9f 81       	ldd	r25, Y+7	; 0x07
    1af0:	61 30       	cpi	r22, 0x01	; 1
    1af2:	f2 ec       	ldi	r31, 0xC2	; 194
    1af4:	7f 07       	cpc	r23, r31
    1af6:	f1 e0       	ldi	r31, 0x01	; 1
    1af8:	8f 07       	cpc	r24, r31
    1afa:	91 05       	cpc	r25, r1
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <Device_Write_Property+0x2d4>
    1afe:	c7 ce       	rjmp	.-626    	; 0x188e <Device_Write_Property+0x62>
                    RS485_Set_Baud_Rate(value.type.Unsigned_Int);
    1b00:	0e 94 6d 01 	call	0x2da	; 0x2da <RS485_Set_Baud_Rate>
                    status = true;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	13 c0       	rjmp	.+38     	; 0x1b2e <Device_Write_Property+0x302>
        case PROP_MAX_APDU_LENGTH_ACCEPTED:
        case PROP_SEGMENTATION_SUPPORTED:
        case PROP_DEVICE_ADDRESS_BINDING:
        case PROP_DATABASE_REVISION:
        case PROP_ACTIVE_COV_SUBSCRIPTIONS:
            *error_class = ERROR_CLASS_PROPERTY;
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	f6 01       	movw	r30, r12
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    1b12:	88 e2       	ldi	r24, 0x28	; 40
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <Device_Write_Property+0x2fa>
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	f6 01       	movw	r30, r12
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    1b22:	80 e2       	ldi	r24, 0x20	; 32
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	f7 01       	movw	r30, r14
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    bool status = false;        /* return value */
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }

    return status;
}
    1b2e:	e4 96       	adiw	r28, 0x34	; 52
    1b30:	ea e0       	ldi	r30, 0x0A	; 10
    1b32:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00001b36 <Analog_Value_Valid_Instance>:
/* more complex, and then you need validate that the */
/* given instance exists */
bool Analog_Value_Valid_Instance(
    uint32_t object_instance)
{
    if (object_instance < MAX_ANALOG_VALUES)
    1b36:	21 e0       	ldi	r18, 0x01	; 1
    1b38:	6a 30       	cpi	r22, 0x0A	; 10
    1b3a:	71 05       	cpc	r23, r1
    1b3c:	81 05       	cpc	r24, r1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <Analog_Value_Valid_Instance+0xe>
    1b42:	20 e0       	ldi	r18, 0x00	; 0
        return true;

    return false;
}
    1b44:	82 2f       	mov	r24, r18
    1b46:	08 95       	ret

00001b48 <Analog_Value_Count>:
/* more complex, and then count how many you have */
unsigned Analog_Value_Count(
    void)
{
    return MAX_ANALOG_VALUES;
}
    1b48:	8a e0       	ldi	r24, 0x0A	; 10
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	08 95       	ret

00001b4e <Analog_Value_Index_To_Instance>:
/* more complex, and then you need to return the instance */
/* that correlates to the correct index */
uint32_t Analog_Value_Index_To_Instance(
    unsigned index)
{
    return index;
    1b4e:	bc 01       	movw	r22, r24
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
}
    1b54:	08 95       	ret

00001b56 <Analog_Value_Encode_Property_APDU>:
    uint32_t object_instance,
    BACNET_PROPERTY_ID property,
    uint32_t array_index,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    1b56:	af e3       	ldi	r26, 0x3F	; 63
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e1 eb       	ldi	r30, 0xB1	; 177
    1b5c:	fd e0       	ldi	r31, 0x0D	; 13
    1b5e:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__prologue_saves__+0x8>
    1b62:	3c 01       	movw	r6, r24
    1b64:	85 2f       	mov	r24, r21
    1b66:	57 2f       	mov	r21, r23
    int apdu_len = 0;   /* return value */
    BACNET_BIT_STRING bit_string;
    BACNET_CHARACTER_STRING char_string;
    unsigned object_index;

    switch (property) {
    1b68:	0f 34       	cpi	r16, 0x4F	; 79
    1b6a:	11 05       	cpc	r17, r1
    1b6c:	21 05       	cpc	r18, r1
    1b6e:	31 05       	cpc	r19, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <Analog_Value_Encode_Property_APDU+0x1e>
    1b72:	4f c0       	rjmp	.+158    	; 0x1c12 <Analog_Value_Encode_Property_APDU+0xbc>
    1b74:	a0 f4       	brcc	.+40     	; 0x1b9e <Analog_Value_Encode_Property_APDU+0x48>
    1b76:	0b 34       	cpi	r16, 0x4B	; 75
    1b78:	11 05       	cpc	r17, r1
    1b7a:	21 05       	cpc	r18, r1
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	81 f1       	breq	.+96     	; 0x1be0 <Analog_Value_Encode_Property_APDU+0x8a>
    1b80:	0d 34       	cpi	r16, 0x4D	; 77
    1b82:	11 05       	cpc	r17, r1
    1b84:	21 05       	cpc	r18, r1
    1b86:	31 05       	cpc	r19, r1
    1b88:	a1 f1       	breq	.+104    	; 0x1bf2 <Analog_Value_Encode_Property_APDU+0x9c>
    1b8a:	04 32       	cpi	r16, 0x24	; 36
    1b8c:	11 05       	cpc	r17, r1
    1b8e:	21 05       	cpc	r18, r1
    1b90:	31 05       	cpc	r19, r1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <Analog_Value_Encode_Property_APDU+0x40>
    1b94:	7a c0       	rjmp	.+244    	; 0x1c8a <Analog_Value_Encode_Property_APDU+0x134>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE, false);
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
            break;
        case PROP_EVENT_STATE:
            apdu_len =
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	ba 01       	movw	r22, r20
    1b9c:	72 c0       	rjmp	.+228    	; 0x1c82 <Analog_Value_Encode_Property_APDU+0x12c>
    switch (property) {
    1b9e:	05 35       	cpi	r16, 0x55	; 85
    1ba0:	11 05       	cpc	r17, r1
    1ba2:	21 05       	cpc	r18, r1
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	d1 f1       	breq	.+116    	; 0x1c1c <Analog_Value_Encode_Property_APDU+0xc6>
    1ba8:	58 f4       	brcc	.+22     	; 0x1bc0 <Analog_Value_Encode_Property_APDU+0x6a>
    1baa:	01 35       	cpi	r16, 0x51	; 81
    1bac:	11 05       	cpc	r17, r1
    1bae:	21 05       	cpc	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <Analog_Value_Encode_Property_APDU+0x60>
    1bb4:	6a c0       	rjmp	.+212    	; 0x1c8a <Analog_Value_Encode_Property_APDU+0x134>
                encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
            break;
        case PROP_OUT_OF_SERVICE:
            apdu_len = encode_application_boolean(&apdu[0], false);
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	c3 01       	movw	r24, r6
    1bba:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <encode_application_boolean>
            break;
    1bbe:	6d c0       	rjmp	.+218    	; 0x1c9a <Analog_Value_Encode_Property_APDU+0x144>
    switch (property) {
    1bc0:	0f 36       	cpi	r16, 0x6F	; 111
    1bc2:	11 05       	cpc	r17, r1
    1bc4:	21 05       	cpc	r18, r1
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	c9 f1       	breq	.+114    	; 0x1c3c <Analog_Value_Encode_Property_APDU+0xe6>
    1bca:	05 37       	cpi	r16, 0x75	; 117
    1bcc:	11 05       	cpc	r17, r1
    1bce:	21 05       	cpc	r18, r1
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <Analog_Value_Encode_Property_APDU+0x80>
    1bd4:	5a c0       	rjmp	.+180    	; 0x1c8a <Analog_Value_Encode_Property_APDU+0x134>
        case PROP_UNITS:
            apdu_len = encode_application_enumerated(&apdu[0], UNITS_PERCENT);
    1bd6:	42 e6       	ldi	r20, 0x62	; 98
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	51 c0       	rjmp	.+162    	; 0x1c82 <Analog_Value_Encode_Property_APDU+0x12c>
            apdu_len =
    1be0:	24 2f       	mov	r18, r20
    1be2:	38 2f       	mov	r19, r24
    1be4:	46 2f       	mov	r20, r22
    1be6:	62 e0       	ldi	r22, 0x02	; 2
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	c3 01       	movw	r24, r6
    1bec:	0e 94 40 17 	call	0x2e80	; 0x2e80 <encode_application_object_id>
            break;
    1bf0:	54 c0       	rjmp	.+168    	; 0x1c9a <Analog_Value_Encode_Property_APDU+0x144>
    text_string[3] = '0' + (uint8_t) object_instance;
    1bf2:	40 5d       	subi	r20, 0xD0	; 208
    1bf4:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <text_string.4436+0x3>
            characterstring_init_ansi(&char_string,
    1bf8:	6c e1       	ldi	r22, 0x1C	; 28
    1bfa:	71 e0       	ldi	r23, 0x01	; 1
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	0e 94 8a 1a 	call	0x3514	; 0x3514 <characterstring_init_ansi>
            apdu_len =
    1c04:	be 01       	movw	r22, r28
    1c06:	6f 5f       	subi	r22, 0xFF	; 255
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	c3 01       	movw	r24, r6
    1c0c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <encode_application_character_string>
            break;
    1c10:	44 c0       	rjmp	.+136    	; 0x1c9a <Analog_Value_Encode_Property_APDU+0x144>
            apdu_len =
    1c12:	42 e0       	ldi	r20, 0x02	; 2
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	33 c0       	rjmp	.+102    	; 0x1c82 <Analog_Value_Encode_Property_APDU+0x12c>
                encode_application_real(&apdu[0],
    1c1c:	e4 2f       	mov	r30, r20
    1c1e:	f8 2f       	mov	r31, r24
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	ee 0f       	add	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	e7 56       	subi	r30, 0x67	; 103
    1c2a:	fd 4f       	sbci	r31, 0xFD	; 253
            apdu_len =
    1c2c:	40 81       	ld	r20, Z
    1c2e:	51 81       	ldd	r21, Z+1	; 0x01
    1c30:	62 81       	ldd	r22, Z+2	; 0x02
    1c32:	73 81       	ldd	r23, Z+3	; 0x03
    1c34:	c3 01       	movw	r24, r6
    1c36:	0e 94 3d 19 	call	0x327a	; 0x327a <encode_application_real>
            break;
    1c3a:	2f c0       	rjmp	.+94     	; 0x1c9a <Analog_Value_Encode_Property_APDU+0x144>
            bitstring_init(&bit_string);
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	c0 96       	adiw	r24, 0x30	; 48
    1c40:	0e 94 01 1a 	call	0x3402	; 0x3402 <bitstring_init>
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	ce 01       	movw	r24, r28
    1c4a:	c0 96       	adiw	r24, 0x30	; 48
    1c4c:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	ce 01       	movw	r24, r28
    1c56:	c0 96       	adiw	r24, 0x30	; 48
    1c58:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	62 e0       	ldi	r22, 0x02	; 2
    1c60:	ce 01       	movw	r24, r28
    1c62:	c0 96       	adiw	r24, 0x30	; 48
    1c64:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE, false);
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	63 e0       	ldi	r22, 0x03	; 3
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	c0 96       	adiw	r24, 0x30	; 48
    1c70:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    1c74:	be 01       	movw	r22, r28
    1c76:	60 5d       	subi	r22, 0xD0	; 208
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	c3 01       	movw	r24, r6
    1c7c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <encode_application_bitstring>
            break;
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <Analog_Value_Encode_Property_APDU+0x144>
            apdu_len =
    1c82:	c3 01       	movw	r24, r6
    1c84:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <encode_application_enumerated>
            break;
    1c88:	08 c0       	rjmp	.+16     	; 0x1c9a <Analog_Value_Encode_Property_APDU+0x144>
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	f5 01       	movw	r30, r10
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    1c94:	80 e2       	ldi	r24, 0x20	; 32
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <Analog_Value_Encode_Property_APDU+0x162>
            apdu_len = -1;
            break;
    }
    /*  only array properties can have array options */
    if ((apdu_len >= 0) && (array_index != BACNET_ARRAY_ALL)) {
    1c9a:	97 fd       	sbrc	r25, 7
    1c9c:	12 c0       	rjmp	.+36     	; 0x1cc2 <Analog_Value_Encode_Property_APDU+0x16c>
    1c9e:	ff ef       	ldi	r31, 0xFF	; 255
    1ca0:	cf 16       	cp	r12, r31
    1ca2:	df 06       	cpc	r13, r31
    1ca4:	ef 06       	cpc	r14, r31
    1ca6:	ff 06       	cpc	r15, r31
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <Analog_Value_Encode_Property_APDU+0x16c>
        *error_class = ERROR_CLASS_PROPERTY;
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	f5 01       	movw	r30, r10
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    1cb4:	82 e3       	ldi	r24, 0x32	; 50
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	f4 01       	movw	r30, r8
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
        apdu_len = -1;
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	9f ef       	ldi	r25, 0xFF	; 255
    }

    return apdu_len;
}
    1cc2:	ef 96       	adiw	r28, 0x3f	; 63
    1cc4:	ee e0       	ldi	r30, 0x0E	; 14
    1cc6:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__epilogue_restores__+0x8>

00001cca <Analog_Value_Write_Property>:
/* returns true if successful */
bool Analog_Value_Write_Property(
    BACNET_WRITE_PROPERTY_DATA * wp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    1cca:	a4 e3       	ldi	r26, 0x34	; 52
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e6       	ldi	r30, 0x6B	; 107
    1cd0:	fe e0       	ldi	r31, 0x0E	; 14
    1cd2:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    1cd6:	5c 01       	movw	r10, r24
    1cd8:	7b 01       	movw	r14, r22
    1cda:	6a 01       	movw	r12, r20
    if (object_instance < MAX_ANALOG_VALUES)
    1cdc:	fc 01       	movw	r30, r24
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	a4 81       	ldd	r26, Z+4	; 0x04
    1ce4:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce6:	0a 97       	sbiw	r24, 0x0a	; 10
    1ce8:	a1 05       	cpc	r26, r1
    1cea:	b1 05       	cpc	r27, r1
    1cec:	60 f0       	brcs	.+24     	; 0x1d06 <Analog_Value_Write_Property+0x3c>
    unsigned int object_index = 0;
    int len = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    if (!Analog_Value_Valid_Instance(wp_data->object_instance)) {
        *error_class = ERROR_CLASS_OBJECT;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_UNKNOWN_OBJECT;
    1cf8:	8f e1       	ldi	r24, 0x1F	; 31
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	d6 01       	movw	r26, r12
    1cfe:	8d 93       	st	X+, r24
    1d00:	9c 93       	st	X, r25
        return false;
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	99 c0       	rjmp	.+306    	; 0x1e38 <Analog_Value_Write_Property+0x16e>
    }
    /* decode the some of the request */
    len =
        bacapp_decode_application_data(wp_data->application_data,
        wp_data->application_data_len, &value);
    1d06:	f5 01       	movw	r30, r10
    1d08:	e0 5c       	subi	r30, 0xC0	; 192
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    len =
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	ae 01       	movw	r20, r28
    1d12:	4f 5f       	subi	r20, 0xFF	; 255
    1d14:	5f 4f       	sbci	r21, 0xFF	; 255
    1d16:	c5 01       	movw	r24, r10
    1d18:	0e 96       	adiw	r24, 0x0e	; 14
    1d1a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <bacapp_decode_application_data>
    /* FIXME: len < application_data_len: more data? */
    if (len < 0) {
    1d1e:	97 ff       	sbrs	r25, 7
    1d20:	08 c0       	rjmp	.+16     	; 0x1d32 <Analog_Value_Write_Property+0x68>
        /* error while decoding - a value larger than we can handle */
        *error_class = ERROR_CLASS_PROPERTY;
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	d7 01       	movw	r26, r14
    1d28:	8d 93       	st	X+, r24
    1d2a:	9c 93       	st	X, r25
        *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    1d2c:	85 e2       	ldi	r24, 0x25	; 37
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	1f c0       	rjmp	.+62     	; 0x1d70 <Analog_Value_Write_Property+0xa6>
        return false;
    }
    if ((wp_data->object_property != PROP_PRIORITY_ARRAY) &&
    1d32:	d5 01       	movw	r26, r10
    1d34:	16 96       	adiw	r26, 0x06	; 6
    1d36:	0d 91       	ld	r16, X+
    1d38:	1d 91       	ld	r17, X+
    1d3a:	2d 91       	ld	r18, X+
    1d3c:	3c 91       	ld	r19, X
    1d3e:	19 97       	sbiw	r26, 0x09	; 9
    1d40:	07 35       	cpi	r16, 0x57	; 87
    1d42:	11 05       	cpc	r17, r1
    1d44:	21 05       	cpc	r18, r1
    1d46:	31 05       	cpc	r19, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <Analog_Value_Write_Property+0x82>
    1d4a:	66 c0       	rjmp	.+204    	; 0x1e18 <Analog_Value_Write_Property+0x14e>
    1d4c:	1a 96       	adiw	r26, 0x0a	; 10
    1d4e:	8d 91       	ld	r24, X+
    1d50:	9d 91       	ld	r25, X+
    1d52:	0d 90       	ld	r0, X+
    1d54:	bc 91       	ld	r27, X
    1d56:	a0 2d       	mov	r26, r0
    1d58:	8f 3f       	cpi	r24, 0xFF	; 255
    1d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5c:	af 4f       	sbci	r26, 0xFF	; 255
    1d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d60:	59 f0       	breq	.+22     	; 0x1d78 <Analog_Value_Write_Property+0xae>
        (wp_data->array_index != BACNET_ARRAY_ALL)) {
        /*  only array properties can have array options */
        *error_class = ERROR_CLASS_PROPERTY;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	d7 01       	movw	r26, r14
    1d68:	8d 93       	st	X+, r24
    1d6a:	9c 93       	st	X, r25
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    1d6c:	82 e3       	ldi	r24, 0x32	; 50
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	f6 01       	movw	r30, r12
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	80 83       	st	Z, r24
    1d76:	c5 cf       	rjmp	.-118    	; 0x1d02 <Analog_Value_Write_Property+0x38>
        return false;
    }
    switch (wp_data->object_property) {
    1d78:	0d 34       	cpi	r16, 0x4D	; 77
    1d7a:	11 05       	cpc	r17, r1
    1d7c:	21 05       	cpc	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <Analog_Value_Write_Property+0xba>
    1d82:	4a c0       	rjmp	.+148    	; 0x1e18 <Analog_Value_Write_Property+0x14e>
    1d84:	90 f4       	brcc	.+36     	; 0x1daa <Analog_Value_Write_Property+0xe0>
    1d86:	04 32       	cpi	r16, 0x24	; 36
    1d88:	11 05       	cpc	r17, r1
    1d8a:	21 05       	cpc	r18, r1
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <Analog_Value_Write_Property+0xc8>
    1d90:	43 c0       	rjmp	.+134    	; 0x1e18 <Analog_Value_Write_Property+0x14e>
    1d92:	0b 34       	cpi	r16, 0x4B	; 75
    1d94:	11 05       	cpc	r17, r1
    1d96:	21 05       	cpc	r18, r1
    1d98:	31 05       	cpc	r19, r1
    1d9a:	f1 f1       	breq	.+124    	; 0x1e18 <Analog_Value_Write_Property+0x14e>
    1d9c:	0c 31       	cpi	r16, 0x1C	; 28
    1d9e:	11 05       	cpc	r17, r1
    1da0:	21 05       	cpc	r18, r1
    1da2:	31 05       	cpc	r19, r1
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <Analog_Value_Write_Property+0xde>
    1da6:	40 c0       	rjmp	.+128    	; 0x1e28 <Analog_Value_Write_Property+0x15e>
    1da8:	37 c0       	rjmp	.+110    	; 0x1e18 <Analog_Value_Write_Property+0x14e>
    1daa:	01 35       	cpi	r16, 0x51	; 81
    1dac:	11 05       	cpc	r17, r1
    1dae:	21 05       	cpc	r18, r1
    1db0:	31 05       	cpc	r19, r1
    1db2:	91 f1       	breq	.+100    	; 0x1e18 <Analog_Value_Write_Property+0x14e>
    1db4:	30 f4       	brcc	.+12     	; 0x1dc2 <Analog_Value_Write_Property+0xf8>
    1db6:	0f 34       	cpi	r16, 0x4F	; 79
    1db8:	11 05       	cpc	r17, r1
    1dba:	21 05       	cpc	r18, r1
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	a1 f5       	brne	.+104    	; 0x1e28 <Analog_Value_Write_Property+0x15e>
    1dc0:	2b c0       	rjmp	.+86     	; 0x1e18 <Analog_Value_Write_Property+0x14e>
    1dc2:	05 35       	cpi	r16, 0x55	; 85
    1dc4:	11 05       	cpc	r17, r1
    1dc6:	21 05       	cpc	r18, r1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	31 f0       	breq	.+12     	; 0x1dd8 <Analog_Value_Write_Property+0x10e>
    1dcc:	0f 36       	cpi	r16, 0x6F	; 111
    1dce:	11 05       	cpc	r17, r1
    1dd0:	21 05       	cpc	r18, r1
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	49 f5       	brne	.+82     	; 0x1e28 <Analog_Value_Write_Property+0x15e>
    1dd6:	20 c0       	rjmp	.+64     	; 0x1e18 <Analog_Value_Write_Property+0x14e>
        case PROP_PRESENT_VALUE:
            if (value.tag == BACNET_APPLICATION_TAG_REAL) {
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	84 30       	cpi	r24, 0x04	; 4
    1ddc:	a9 f4       	brne	.+42     	; 0x1e08 <Analog_Value_Write_Property+0x13e>
                object_index =
                    Analog_Value_Instance_To_Index(wp_data->object_instance);
                AV_Present_Value[object_index] = value.type.Real;
    1dde:	d5 01       	movw	r26, r10
    1de0:	12 96       	adiw	r26, 0x02	; 2
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	13 97       	sbiw	r26, 0x03	; 3
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	e7 56       	subi	r30, 0x67	; 103
    1df2:	fd 4f       	sbci	r31, 0xFD	; 253
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	ae 81       	ldd	r26, Y+6	; 0x06
    1dfa:	bf 81       	ldd	r27, Y+7	; 0x07
    1dfc:	80 83       	st	Z, r24
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	a2 83       	std	Z+2, r26	; 0x02
    1e02:	b3 83       	std	Z+3, r27	; 0x03
                status = true;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	18 c0       	rjmp	.+48     	; 0x1e38 <Analog_Value_Write_Property+0x16e>
            } else {
                *error_class = ERROR_CLASS_PROPERTY;
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	f7 01       	movw	r30, r14
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
    1e12:	89 e0       	ldi	r24, 0x09	; 9
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	72 cf       	rjmp	.-284    	; 0x1cfc <Analog_Value_Write_Property+0x32>
        case PROP_STATUS_FLAGS:
        case PROP_EVENT_STATE:
        case PROP_OUT_OF_SERVICE:
        case PROP_DESCRIPTION:
        case PROP_PRIORITY_ARRAY:
            *error_class = ERROR_CLASS_PROPERTY;
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	f7 01       	movw	r30, r14
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    1e22:	88 e2       	ldi	r24, 0x28	; 40
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	6a cf       	rjmp	.-300    	; 0x1cfc <Analog_Value_Write_Property+0x32>
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    1e32:	80 e2       	ldi	r24, 0x20	; 32
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	62 cf       	rjmp	.-316    	; 0x1cfc <Analog_Value_Write_Property+0x32>
            break;
    }

    return status;
}
    1e38:	e4 96       	adiw	r28, 0x34	; 52
    1e3a:	ea e0       	ldi	r30, 0x0A	; 10
    1e3c:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00001e40 <Binary_Value_Valid_Instance>:

/* we simply have 0-n object instances. */
bool Binary_Value_Valid_Instance(
    uint32_t object_instance)
{
    if (object_instance < MAX_BINARY_VALUES)
    1e40:	21 e0       	ldi	r18, 0x01	; 1
    1e42:	6a 30       	cpi	r22, 0x0A	; 10
    1e44:	71 05       	cpc	r23, r1
    1e46:	81 05       	cpc	r24, r1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <Binary_Value_Valid_Instance+0xe>
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
        return true;

    return false;
}
    1e4e:	82 2f       	mov	r24, r18
    1e50:	08 95       	ret

00001e52 <Binary_Value_Count>:
/* we simply have 0-n object instances. */
unsigned Binary_Value_Count(
    void)
{
    return MAX_BINARY_VALUES;
}
    1e52:	8a e0       	ldi	r24, 0x0A	; 10
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	08 95       	ret

00001e58 <Binary_Value_Index_To_Instance>:

/* we simply have 0-n object instances. */
uint32_t Binary_Value_Index_To_Instance(
    unsigned index)
{
    return index;
    1e58:	bc 01       	movw	r22, r24
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
}
    1e5e:	08 95       	ret

00001e60 <Binary_Value_Name>:
char *Binary_Value_Name(
    uint32_t object_instance)
{
    static char text_string[5] = "BV-0";        /* okay for single thread */

    if (object_instance < MAX_BINARY_VALUES) {
    1e60:	6a 30       	cpi	r22, 0x0A	; 10
    1e62:	71 05       	cpc	r23, r1
    1e64:	81 05       	cpc	r24, r1
    1e66:	91 05       	cpc	r25, r1
    1e68:	30 f4       	brcc	.+12     	; 0x1e76 <Binary_Value_Name+0x16>
        text_string[3] = '0' + (uint8_t) object_instance;
    1e6a:	60 5d       	subi	r22, 0xD0	; 208
    1e6c:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <text_string.4435+0x3>
        return text_string;
    1e70:	81 e2       	ldi	r24, 0x21	; 33
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	08 95       	ret
    }

    return NULL;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
}
    1e7a:	08 95       	ret

00001e7c <Binary_Value_Encode_Property_APDU>:
    uint32_t object_instance,
    BACNET_PROPERTY_ID property,
    uint32_t array_index,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    1e7c:	af e3       	ldi	r26, 0x3F	; 63
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e4 e4       	ldi	r30, 0x44	; 68
    1e82:	ff e0       	ldi	r31, 0x0F	; 15
    1e84:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__prologue_saves__+0x8>
    1e88:	3c 01       	movw	r6, r24
    BACNET_BIT_STRING bit_string;
    BACNET_CHARACTER_STRING char_string;
    BACNET_BINARY_PV present_value = BINARY_INACTIVE;
    BACNET_POLARITY polarity = POLARITY_NORMAL;

    switch (property) {
    1e8a:	0f 34       	cpi	r16, 0x4F	; 79
    1e8c:	11 05       	cpc	r17, r1
    1e8e:	21 05       	cpc	r18, r1
    1e90:	31 05       	cpc	r19, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <Binary_Value_Encode_Property_APDU+0x1a>
    1e94:	6b c0       	rjmp	.+214    	; 0x1f6c <Binary_Value_Encode_Property_APDU+0xf0>
    1e96:	98 f4       	brcc	.+38     	; 0x1ebe <Binary_Value_Encode_Property_APDU+0x42>
    1e98:	0b 34       	cpi	r16, 0x4B	; 75
    1e9a:	11 05       	cpc	r17, r1
    1e9c:	21 05       	cpc	r18, r1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <Binary_Value_Encode_Property_APDU+0x28>
    1ea2:	4d c0       	rjmp	.+154    	; 0x1f3e <Binary_Value_Encode_Property_APDU+0xc2>
    1ea4:	0d 34       	cpi	r16, 0x4D	; 77
    1ea6:	11 05       	cpc	r17, r1
    1ea8:	21 05       	cpc	r18, r1
    1eaa:	31 05       	cpc	r19, r1
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <Binary_Value_Encode_Property_APDU+0x34>
    1eae:	4e c0       	rjmp	.+156    	; 0x1f4c <Binary_Value_Encode_Property_APDU+0xd0>
    1eb0:	04 32       	cpi	r16, 0x24	; 36
    1eb2:	11 05       	cpc	r17, r1
    1eb4:	21 05       	cpc	r18, r1
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <Binary_Value_Encode_Property_APDU+0x40>
    1eba:	76 c0       	rjmp	.+236    	; 0x1fa8 <Binary_Value_Encode_Property_APDU+0x12c>
    1ebc:	71 c0       	rjmp	.+226    	; 0x1fa0 <Binary_Value_Encode_Property_APDU+0x124>
    1ebe:	04 35       	cpi	r16, 0x54	; 84
    1ec0:	11 05       	cpc	r17, r1
    1ec2:	21 05       	cpc	r18, r1
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <Binary_Value_Encode_Property_APDU+0x4e>
    1ec8:	6b c0       	rjmp	.+214    	; 0x1fa0 <Binary_Value_Encode_Property_APDU+0x124>
    1eca:	50 f4       	brcc	.+20     	; 0x1ee0 <Binary_Value_Encode_Property_APDU+0x64>
    1ecc:	01 35       	cpi	r16, 0x51	; 81
    1ece:	11 05       	cpc	r17, r1
    1ed0:	21 05       	cpc	r18, r1
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <Binary_Value_Encode_Property_APDU+0x5c>
    1ed6:	68 c0       	rjmp	.+208    	; 0x1fa8 <Binary_Value_Encode_Property_APDU+0x12c>
            /* note: see the details in the standard on how to use this */
            apdu_len =
                encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
            break;
        case PROP_OUT_OF_SERVICE:
            apdu_len = encode_application_boolean(&apdu[0], false);
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <encode_application_boolean>
            break;
    1ede:	6c c0       	rjmp	.+216    	; 0x1fb8 <Binary_Value_Encode_Property_APDU+0x13c>
    switch (property) {
    1ee0:	05 35       	cpi	r16, 0x55	; 85
    1ee2:	11 05       	cpc	r17, r1
    1ee4:	21 05       	cpc	r18, r1
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <Binary_Value_Encode_Property_APDU+0x70>
    1eea:	45 c0       	rjmp	.+138    	; 0x1f76 <Binary_Value_Encode_Property_APDU+0xfa>
    1eec:	0f 36       	cpi	r16, 0x6F	; 111
    1eee:	11 05       	cpc	r17, r1
    1ef0:	21 05       	cpc	r18, r1
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <Binary_Value_Encode_Property_APDU+0x7c>
    1ef6:	58 c0       	rjmp	.+176    	; 0x1fa8 <Binary_Value_Encode_Property_APDU+0x12c>
            bitstring_init(&bit_string);
    1ef8:	ce 01       	movw	r24, r28
    1efa:	c0 96       	adiw	r24, 0x30	; 48
    1efc:	0e 94 01 1a 	call	0x3402	; 0x3402 <bitstring_init>
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	ce 01       	movw	r24, r28
    1f06:	c0 96       	adiw	r24, 0x30	; 48
    1f08:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	ce 01       	movw	r24, r28
    1f12:	c0 96       	adiw	r24, 0x30	; 48
    1f14:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	62 e0       	ldi	r22, 0x02	; 2
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	c0 96       	adiw	r24, 0x30	; 48
    1f20:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE, false);
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	63 e0       	ldi	r22, 0x03	; 3
    1f28:	ce 01       	movw	r24, r28
    1f2a:	c0 96       	adiw	r24, 0x30	; 48
    1f2c:	0e 94 0f 1a 	call	0x341e	; 0x341e <bitstring_set_bit>
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    1f30:	be 01       	movw	r22, r28
    1f32:	60 5d       	subi	r22, 0xD0	; 208
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	c3 01       	movw	r24, r6
    1f38:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <encode_application_bitstring>
            break;
    1f3c:	3d c0       	rjmp	.+122    	; 0x1fb8 <Binary_Value_Encode_Property_APDU+0x13c>
            apdu_len =
    1f3e:	9a 01       	movw	r18, r20
    1f40:	ab 01       	movw	r20, r22
    1f42:	65 e0       	ldi	r22, 0x05	; 5
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	0e 94 40 17 	call	0x2e80	; 0x2e80 <encode_application_object_id>
            break;
    1f4a:	36 c0       	rjmp	.+108    	; 0x1fb8 <Binary_Value_Encode_Property_APDU+0x13c>
                Binary_Value_Name(object_instance));
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	ba 01       	movw	r22, r20
    1f50:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Binary_Value_Name>
            characterstring_init_ansi(&char_string,
    1f54:	bc 01       	movw	r22, r24
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <characterstring_init_ansi>
            apdu_len =
    1f5e:	be 01       	movw	r22, r28
    1f60:	6f 5f       	subi	r22, 0xFF	; 255
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	c3 01       	movw	r24, r6
    1f66:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <encode_application_character_string>
            break;
    1f6a:	26 c0       	rjmp	.+76     	; 0x1fb8 <Binary_Value_Encode_Property_APDU+0x13c>
            apdu_len =
    1f6c:	45 e0       	ldi	r20, 0x05	; 5
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	11 c0       	rjmp	.+34     	; 0x1f98 <Binary_Value_Encode_Property_APDU+0x11c>
    if (object_instance < MAX_BINARY_VALUES) {
    1f76:	4a 30       	cpi	r20, 0x0A	; 10
    1f78:	51 05       	cpc	r21, r1
    1f7a:	61 05       	cpc	r22, r1
    1f7c:	71 05       	cpc	r23, r1
    1f7e:	40 f4       	brcc	.+16     	; 0x1f90 <Binary_Value_Encode_Property_APDU+0x114>
        value = Present_Value[object_instance];
    1f80:	fa 01       	movw	r30, r20
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	ee 50       	subi	r30, 0x0E	; 14
    1f88:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8a:	40 81       	ld	r20, Z
    1f8c:	51 81       	ldd	r21, Z+1	; 0x01
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <Binary_Value_Encode_Property_APDU+0x118>
    BACNET_BINARY_PV value = BINARY_INACTIVE;
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	50 e0       	ldi	r21, 0x00	; 0
            apdu_len = encode_application_enumerated(&apdu[0], present_value);
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	c3 01       	movw	r24, r6
    1f9a:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <encode_application_enumerated>
            break;
    1f9e:	0c c0       	rjmp	.+24     	; 0x1fb8 <Binary_Value_Encode_Property_APDU+0x13c>
        case PROP_POLARITY:
            /* FIXME: figure out the polarity */
            apdu_len = encode_application_enumerated(&apdu[0], polarity);
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	ba 01       	movw	r22, r20
    1fa6:	f8 cf       	rjmp	.-16     	; 0x1f98 <Binary_Value_Encode_Property_APDU+0x11c>
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	f5 01       	movw	r30, r10
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    1fb2:	80 e2       	ldi	r24, 0x20	; 32
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <Binary_Value_Encode_Property_APDU+0x15a>
            apdu_len = -1;
            break;
    }
    /*  only array properties can have array options */
    if ((apdu_len >= 0) && (array_index != BACNET_ARRAY_ALL)) {
    1fb8:	97 fd       	sbrc	r25, 7
    1fba:	12 c0       	rjmp	.+36     	; 0x1fe0 <Binary_Value_Encode_Property_APDU+0x164>
    1fbc:	ff ef       	ldi	r31, 0xFF	; 255
    1fbe:	cf 16       	cp	r12, r31
    1fc0:	df 06       	cpc	r13, r31
    1fc2:	ef 06       	cpc	r14, r31
    1fc4:	ff 06       	cpc	r15, r31
    1fc6:	61 f0       	breq	.+24     	; 0x1fe0 <Binary_Value_Encode_Property_APDU+0x164>
        *error_class = ERROR_CLASS_PROPERTY;
    1fc8:	82 e0       	ldi	r24, 0x02	; 2
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	f5 01       	movw	r30, r10
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    1fd2:	82 e3       	ldi	r24, 0x32	; 50
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	f4 01       	movw	r30, r8
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
        apdu_len = -1;
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	9f ef       	ldi	r25, 0xFF	; 255
    }

    return apdu_len;
}
    1fe0:	ef 96       	adiw	r28, 0x3f	; 63
    1fe2:	ee e0       	ldi	r30, 0x0E	; 14
    1fe4:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__epilogue_restores__+0x8>

00001fe8 <Binary_Value_Write_Property>:
/* returns true if successful */
bool Binary_Value_Write_Property(
    BACNET_WRITE_PROPERTY_DATA * wp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    1fe8:	a4 e3       	ldi	r26, 0x34	; 52
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	ea ef       	ldi	r30, 0xFA	; 250
    1fee:	ff e0       	ldi	r31, 0x0F	; 15
    1ff0:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    1ff4:	5c 01       	movw	r10, r24
    1ff6:	7b 01       	movw	r14, r22
    1ff8:	6a 01       	movw	r12, r20
    if (object_instance < MAX_BINARY_VALUES)
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	a4 81       	ldd	r26, Z+4	; 0x04
    2002:	b5 81       	ldd	r27, Z+5	; 0x05
    2004:	0a 97       	sbiw	r24, 0x0a	; 10
    2006:	a1 05       	cpc	r26, r1
    2008:	b1 05       	cpc	r27, r1
    200a:	60 f0       	brcs	.+24     	; 0x2024 <Binary_Value_Write_Property+0x3c>
    unsigned int object_index = 0;
    int len = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    if (!Binary_Value_Valid_Instance(wp_data->object_instance)) {
        *error_class = ERROR_CLASS_OBJECT;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	fb 01       	movw	r30, r22
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_UNKNOWN_OBJECT;
    2016:	8f e1       	ldi	r24, 0x1F	; 31
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	f6 01       	movw	r30, r12
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
        return false;
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	a8 c0       	rjmp	.+336    	; 0x2174 <Binary_Value_Write_Property+0x18c>
    }
    /* decode the some of the request */
    len =
        bacapp_decode_application_data(wp_data->application_data,
        wp_data->application_data_len, &value);
    2024:	f5 01       	movw	r30, r10
    2026:	e0 5c       	subi	r30, 0xC0	; 192
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    len =
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	ae 01       	movw	r20, r28
    2030:	4f 5f       	subi	r20, 0xFF	; 255
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	c5 01       	movw	r24, r10
    2036:	0e 96       	adiw	r24, 0x0e	; 14
    2038:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <bacapp_decode_application_data>
    /* FIXME: len < application_data_len: more data? */
    if (len < 0) {
    203c:	97 ff       	sbrs	r25, 7
    203e:	08 c0       	rjmp	.+16     	; 0x2050 <Binary_Value_Write_Property+0x68>
        /* error while decoding - a value larger than we can handle */
        *error_class = ERROR_CLASS_PROPERTY;
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	f7 01       	movw	r30, r14
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    204a:	85 e2       	ldi	r24, 0x25	; 37
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	e5 cf       	rjmp	.-54     	; 0x201a <Binary_Value_Write_Property+0x32>
        return false;
    }
    if ((wp_data->object_property != PROP_PRIORITY_ARRAY) &&
    2050:	f5 01       	movw	r30, r10
    2052:	06 81       	ldd	r16, Z+6	; 0x06
    2054:	17 81       	ldd	r17, Z+7	; 0x07
    2056:	20 85       	ldd	r18, Z+8	; 0x08
    2058:	31 85       	ldd	r19, Z+9	; 0x09
    205a:	07 35       	cpi	r16, 0x57	; 87
    205c:	11 05       	cpc	r17, r1
    205e:	21 05       	cpc	r18, r1
    2060:	31 05       	cpc	r19, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <Binary_Value_Write_Property+0x7e>
    2064:	7f c0       	rjmp	.+254    	; 0x2164 <Binary_Value_Write_Property+0x17c>
    2066:	82 85       	ldd	r24, Z+10	; 0x0a
    2068:	93 85       	ldd	r25, Z+11	; 0x0b
    206a:	a4 85       	ldd	r26, Z+12	; 0x0c
    206c:	b5 85       	ldd	r27, Z+13	; 0x0d
    206e:	8f 3f       	cpi	r24, 0xFF	; 255
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	af 4f       	sbci	r26, 0xFF	; 255
    2074:	bf 4f       	sbci	r27, 0xFF	; 255
    2076:	41 f0       	breq	.+16     	; 0x2088 <Binary_Value_Write_Property+0xa0>
        (wp_data->array_index != BACNET_ARRAY_ALL)) {
        /*  only array properties can have array options */
        *error_class = ERROR_CLASS_PROPERTY;
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	f7 01       	movw	r30, r14
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    2082:	82 e3       	ldi	r24, 0x32	; 50
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	c9 cf       	rjmp	.-110    	; 0x201a <Binary_Value_Write_Property+0x32>
        return false;
    }
    switch (wp_data->object_property) {
    2088:	0f 34       	cpi	r16, 0x4F	; 79
    208a:	11 05       	cpc	r17, r1
    208c:	21 05       	cpc	r18, r1
    208e:	31 05       	cpc	r19, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <Binary_Value_Write_Property+0xac>
    2092:	60 c0       	rjmp	.+192    	; 0x2154 <Binary_Value_Write_Property+0x16c>
    2094:	98 f4       	brcc	.+38     	; 0x20bc <Binary_Value_Write_Property+0xd4>
    2096:	0b 34       	cpi	r16, 0x4B	; 75
    2098:	11 05       	cpc	r17, r1
    209a:	21 05       	cpc	r18, r1
    209c:	31 05       	cpc	r19, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <Binary_Value_Write_Property+0xba>
    20a0:	59 c0       	rjmp	.+178    	; 0x2154 <Binary_Value_Write_Property+0x16c>
    20a2:	0d 34       	cpi	r16, 0x4D	; 77
    20a4:	11 05       	cpc	r17, r1
    20a6:	21 05       	cpc	r18, r1
    20a8:	31 05       	cpc	r19, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <Binary_Value_Write_Property+0xc6>
    20ac:	53 c0       	rjmp	.+166    	; 0x2154 <Binary_Value_Write_Property+0x16c>
    20ae:	04 32       	cpi	r16, 0x24	; 36
    20b0:	11 05       	cpc	r17, r1
    20b2:	21 05       	cpc	r18, r1
    20b4:	31 05       	cpc	r19, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <Binary_Value_Write_Property+0xd2>
    20b8:	4d c0       	rjmp	.+154    	; 0x2154 <Binary_Value_Write_Property+0x16c>
    20ba:	54 c0       	rjmp	.+168    	; 0x2164 <Binary_Value_Write_Property+0x17c>
    20bc:	04 35       	cpi	r16, 0x54	; 84
    20be:	11 05       	cpc	r17, r1
    20c0:	21 05       	cpc	r18, r1
    20c2:	31 05       	cpc	r19, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <Binary_Value_Write_Property+0xe0>
    20c6:	46 c0       	rjmp	.+140    	; 0x2154 <Binary_Value_Write_Property+0x16c>
    20c8:	38 f4       	brcc	.+14     	; 0x20d8 <Binary_Value_Write_Property+0xf0>
    20ca:	01 35       	cpi	r16, 0x51	; 81
    20cc:	11 05       	cpc	r17, r1
    20ce:	21 05       	cpc	r18, r1
    20d0:	31 05       	cpc	r19, r1
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <Binary_Value_Write_Property+0xee>
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <Binary_Value_Write_Property+0x16c>
    20d6:	46 c0       	rjmp	.+140    	; 0x2164 <Binary_Value_Write_Property+0x17c>
    20d8:	05 35       	cpi	r16, 0x55	; 85
    20da:	11 05       	cpc	r17, r1
    20dc:	21 05       	cpc	r18, r1
    20de:	31 05       	cpc	r19, r1
    20e0:	31 f0       	breq	.+12     	; 0x20ee <Binary_Value_Write_Property+0x106>
    20e2:	0f 36       	cpi	r16, 0x6F	; 111
    20e4:	11 05       	cpc	r17, r1
    20e6:	21 05       	cpc	r18, r1
    20e8:	31 05       	cpc	r19, r1
    20ea:	a1 f1       	breq	.+104    	; 0x2154 <Binary_Value_Write_Property+0x16c>
    20ec:	3b c0       	rjmp	.+118    	; 0x2164 <Binary_Value_Write_Property+0x17c>
        case PROP_PRESENT_VALUE:
            if (value.tag == BACNET_APPLICATION_TAG_ENUMERATED) {
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	89 30       	cpi	r24, 0x09	; 9
    20f2:	41 f5       	brne	.+80     	; 0x2144 <Binary_Value_Write_Property+0x15c>
                if ((value.type.Enumerated == BINARY_ACTIVE) ||
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	9d 81       	ldd	r25, Y+5	; 0x05
    20f8:	ae 81       	ldd	r26, Y+6	; 0x06
    20fa:	bf 81       	ldd	r27, Y+7	; 0x07
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	91 05       	cpc	r25, r1
    2100:	a1 05       	cpc	r26, r1
    2102:	b1 05       	cpc	r27, r1
    2104:	08 f0       	brcs	.+2      	; 0x2108 <Binary_Value_Write_Property+0x120>
    2106:	9c cf       	rjmp	.-200    	; 0x2040 <Binary_Value_Write_Property+0x58>
                    (value.type.Enumerated == BINARY_INACTIVE)) {
                    object_index =
                        Binary_Value_Instance_To_Index
                        (wp_data->object_instance);
    2108:	f5 01       	movw	r30, r10
    210a:	42 81       	ldd	r20, Z+2	; 0x02
    210c:	53 81       	ldd	r21, Z+3	; 0x03
    210e:	64 81       	ldd	r22, Z+4	; 0x04
    2110:	75 81       	ldd	r23, Z+5	; 0x05
    if (object_instance < MAX_BINARY_VALUES)
    2112:	4a 30       	cpi	r20, 0x0A	; 10
    2114:	51 05       	cpc	r21, r1
    2116:	61 05       	cpc	r22, r1
    2118:	71 05       	cpc	r23, r1
    211a:	10 f0       	brcs	.+4      	; 0x2120 <Binary_Value_Write_Property+0x138>
    unsigned index = MAX_BINARY_VALUES;
    211c:	4a e0       	ldi	r20, 0x0A	; 10
    211e:	50 e0       	ldi	r21, 0x00	; 0
                    /* NOTE: this Binary value has no priority array */
                    Present_Value[object_index] =
    2120:	fa 01       	movw	r30, r20
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	ee 50       	subi	r30, 0x0E	; 14
    2128:	fe 4f       	sbci	r31, 0xFE	; 254
                        (BACNET_BINARY_PV) value.type.Enumerated;
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
                    /* Note: you could set the physical output here if we
                       are the highest priority.
                       However, if Out of Service is TRUE, then don't set the
                       physical output. */
                    if (Present_Value[0] == BINARY_ACTIVE) {
    212e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <Present_Value>
    2132:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <Present_Value+0x1>
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	11 f4       	brne	.+4      	; 0x213e <Binary_Value_Write_Property+0x156>
                        LED_GREEN_ON();
    213a:	5c 98       	cbi	0x0b, 4	; 11
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <Binary_Value_Write_Property+0x158>
                    } else {
                        LED_GREEN_OFF();
    213e:	5c 9a       	sbi	0x0b, 4	; 11
                    }
                    status = true;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	18 c0       	rjmp	.+48     	; 0x2174 <Binary_Value_Write_Property+0x18c>
                } else {
                    *error_class = ERROR_CLASS_PROPERTY;
                    *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
                }
            } else {
                *error_class = ERROR_CLASS_PROPERTY;
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	f7 01       	movw	r30, r14
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
    214e:	89 e0       	ldi	r24, 0x09	; 9
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	63 cf       	rjmp	.-314    	; 0x201a <Binary_Value_Write_Property+0x32>
        case PROP_OBJECT_NAME:
        case PROP_OBJECT_TYPE:
        case PROP_STATUS_FLAGS:
        case PROP_EVENT_STATE:
        case PROP_POLARITY:
            *error_class = ERROR_CLASS_PROPERTY;
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	f7 01       	movw	r30, r14
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    215e:	88 e2       	ldi	r24, 0x28	; 40
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	5b cf       	rjmp	.-330    	; 0x201a <Binary_Value_Write_Property+0x32>
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	f7 01       	movw	r30, r14
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    216e:	80 e2       	ldi	r24, 0x20	; 32
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	53 cf       	rjmp	.-346    	; 0x201a <Binary_Value_Write_Property+0x32>
            break;
    }

    return status;
}
    2174:	e4 96       	adiw	r28, 0x34	; 52
    2176:	ea e0       	ldi	r30, 0x0A	; 10
    2178:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

0000217c <handler_who_is>:

void handler_who_is(
    uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src)
{
    217c:	a8 e0       	ldi	r26, 0x08	; 8
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e4 ec       	ldi	r30, 0xC4	; 196
    2182:	f0 e1       	ldi	r31, 0x10	; 16
    2184:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x1c>
    int len = 0;
    int32_t low_limit = 0;
    2188:	1d 82       	std	Y+5, r1	; 0x05
    218a:	1e 82       	std	Y+6, r1	; 0x06
    218c:	1f 82       	std	Y+7, r1	; 0x07
    218e:	18 86       	std	Y+8, r1	; 0x08
    int32_t high_limit = 0;
    2190:	19 82       	std	Y+1, r1	; 0x01
    2192:	1a 82       	std	Y+2, r1	; 0x02
    2194:	1b 82       	std	Y+3, r1	; 0x03
    2196:	1c 82       	std	Y+4, r1	; 0x04
    int32_t target_device;

    (void) src;
    len =
    2198:	9e 01       	movw	r18, r28
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	ae 01       	movw	r20, r28
    21a0:	4b 5f       	subi	r20, 0xFB	; 251
    21a2:	5f 4f       	sbci	r21, 0xFF	; 255
    21a4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <whois_decode_service_request>
        whois_decode_service_request(service_request, service_len, &low_limit,
        &high_limit);
    if (len == 0) {
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	b1 f0       	breq	.+44     	; 0x21d8 <handler_who_is+0x5c>
        Send_I_Am_Flag = true;
    } else if (len != BACNET_STATUS_ERROR) {
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	b9 f0       	breq	.+46     	; 0x21de <handler_who_is+0x62>
        /* is my device id within the limits? */
        target_device = Device_Object_Instance_Number();
    21b0:	0e 94 8c 09 	call	0x1318	; 0x1318 <Device_Object_Instance_Number>
        if ((target_device >= low_limit) && (target_device <= high_limit)) {
    21b4:	0d 81       	ldd	r16, Y+5	; 0x05
    21b6:	1e 81       	ldd	r17, Y+6	; 0x06
    21b8:	2f 81       	ldd	r18, Y+7	; 0x07
    21ba:	38 85       	ldd	r19, Y+8	; 0x08
    21bc:	60 17       	cp	r22, r16
    21be:	71 07       	cpc	r23, r17
    21c0:	82 07       	cpc	r24, r18
    21c2:	93 07       	cpc	r25, r19
    21c4:	64 f0       	brlt	.+24     	; 0x21de <handler_who_is+0x62>
    21c6:	09 81       	ldd	r16, Y+1	; 0x01
    21c8:	1a 81       	ldd	r17, Y+2	; 0x02
    21ca:	2b 81       	ldd	r18, Y+3	; 0x03
    21cc:	3c 81       	ldd	r19, Y+4	; 0x04
    21ce:	06 17       	cp	r16, r22
    21d0:	17 07       	cpc	r17, r23
    21d2:	28 07       	cpc	r18, r24
    21d4:	39 07       	cpc	r19, r25
    21d6:	1c f0       	brlt	.+6      	; 0x21de <handler_who_is+0x62>
            Send_I_Am_Flag = true;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Send_I_Am_Flag>
        }
    }

    return;
}
    21de:	28 96       	adiw	r28, 0x08	; 8
    21e0:	e4 e0       	ldi	r30, 0x04	; 4
    21e2:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x1c>

000021e6 <handler_write_property>:
void handler_write_property(
    uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src,
    BACNET_CONFIRMED_SERVICE_DATA * service_data)
{
    21e6:	a0 e2       	ldi	r26, 0x20	; 32
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e9 ef       	ldi	r30, 0xF9	; 249
    21ec:	f0 e1       	ldi	r31, 0x10	; 16
    21ee:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__prologue_saves__+0xc>
    21f2:	5a 01       	movw	r10, r20
    21f4:	79 01       	movw	r14, r18
    int len = 0;
    int pdu_len = 0;
    BACNET_NPDU_DATA npdu_data;
    BACNET_ERROR_CLASS error_class = ERROR_CLASS_OBJECT;
    21f6:	21 e0       	ldi	r18, 0x01	; 1
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	38 a3       	std	Y+32, r19	; 0x20
    21fc:	2f 8f       	std	Y+31, r18	; 0x1f
    BACNET_ERROR_CODE error_code = ERROR_CODE_UNKNOWN_OBJECT;
    21fe:	2f e1       	ldi	r18, 0x1F	; 31
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	3e 8f       	std	Y+30, r19	; 0x1e
    2204:	2d 8f       	std	Y+29, r18	; 0x1d
    int bytes_sent = 0;
    BACNET_ADDRESS my_address;

    /* decode the service request only */
    len = wp_decode_service_request(service_request, service_len, &wp_data);
    2206:	46 e0       	ldi	r20, 0x06	; 6
    2208:	52 e0       	ldi	r21, 0x02	; 2
    220a:	0e 94 28 1c 	call	0x3850	; 0x3850 <wp_decode_service_request>
    220e:	8c 01       	movw	r16, r24
    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    2210:	ce 01       	movw	r24, r28
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	0e 94 a2 07 	call	0xf44	; 0xf44 <dlmstp_get_my_address>
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	ce 01       	movw	r24, r28
    2220:	43 96       	adiw	r24, 0x13	; 19
    2222:	0e 94 83 13 	call	0x2706	; 0x2706 <npdu_encode_npdu_data>
    pdu_len =
    2226:	9e 01       	movw	r18, r28
    2228:	2d 5e       	subi	r18, 0xED	; 237
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	ae 01       	movw	r20, r28
    222e:	4f 5f       	subi	r20, 0xFF	; 255
    2230:	5f 4f       	sbci	r21, 0xFF	; 255
    2232:	b5 01       	movw	r22, r10
    2234:	8d e4       	ldi	r24, 0x4D	; 77
    2236:	92 e0       	ldi	r25, 0x02	; 2
    2238:	0e 94 99 12 	call	0x2532	; 0x2532 <npdu_encode_pdu>
    223c:	4c 01       	movw	r8, r24
    223e:	83 5b       	subi	r24, 0xB3	; 179
    2240:	9d 4f       	sbci	r25, 0xFD	; 253
    2242:	6c 01       	movw	r12, r24
        npdu_encode_pdu(&Handler_Transmit_Buffer[0], src, &my_address,
        &npdu_data);
    /* bad decoding or something we didn't understand - send an abort */
    if (len <= 0) {
    2244:	10 16       	cp	r1, r16
    2246:	11 06       	cpc	r1, r17
    2248:	2c f0       	brlt	.+10     	; 0x2254 <handler_write_property+0x6e>
        len =
    224a:	21 e0       	ldi	r18, 0x01	; 1
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	f7 01       	movw	r30, r14
    2250:	67 81       	ldd	r22, Z+7	; 0x07
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <handler_write_property+0x7e>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_OTHER, true);
    } else if (service_data->segmented_message) {
    2254:	f7 01       	movw	r30, r14
    2256:	80 81       	ld	r24, Z
    2258:	88 23       	and	r24, r24
    225a:	39 f0       	breq	.+14     	; 0x226a <handler_write_property+0x84>
        len =
    225c:	21 e0       	ldi	r18, 0x01	; 1
    225e:	44 e0       	ldi	r20, 0x04	; 4
    2260:	67 81       	ldd	r22, Z+7	; 0x07
    2262:	c6 01       	movw	r24, r12
    2264:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <abort_encode_apdu>
    2268:	40 c0       	rjmp	.+128    	; 0x22ea <handler_write_property+0x104>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_SEGMENTATION_NOT_SUPPORTED,
            true);
    } else {
        switch (wp_data.object_type) {
    226a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <wp_data>
    226e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <wp_data+0x1>
    2272:	85 30       	cpi	r24, 0x05	; 5
    2274:	91 05       	cpc	r25, r1
    2276:	d9 f0       	breq	.+54     	; 0x22ae <handler_write_property+0xc8>
    2278:	88 30       	cpi	r24, 0x08	; 8
    227a:	91 05       	cpc	r25, r1
    227c:	69 f0       	breq	.+26     	; 0x2298 <handler_write_property+0xb2>
    227e:	02 97       	sbiw	r24, 0x02	; 2
    2280:	49 f5       	brne	.+82     	; 0x22d4 <handler_write_property+0xee>
                        SERVICE_CONFIRMED_WRITE_PROPERTY, error_class,
                        error_code);
                }
                break;
            case OBJECT_ANALOG_VALUE:
                if (Analog_Value_Write_Property(&wp_data, &error_class,
    2282:	ae 01       	movw	r20, r28
    2284:	43 5e       	subi	r20, 0xE3	; 227
    2286:	5f 4f       	sbci	r21, 0xFF	; 255
    2288:	be 01       	movw	r22, r28
    228a:	61 5e       	subi	r22, 0xE1	; 225
    228c:	7f 4f       	sbci	r23, 0xFF	; 255
    228e:	86 e0       	ldi	r24, 0x06	; 6
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Analog_Value_Write_Property>
    2296:	15 c0       	rjmp	.+42     	; 0x22c2 <handler_write_property+0xdc>
                if (Device_Write_Property(&wp_data, &error_class, &error_code)) {
    2298:	ae 01       	movw	r20, r28
    229a:	43 5e       	subi	r20, 0xE3	; 227
    229c:	5f 4f       	sbci	r21, 0xFF	; 255
    229e:	be 01       	movw	r22, r28
    22a0:	61 5e       	subi	r22, 0xE1	; 225
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	86 e0       	ldi	r24, 0x06	; 6
    22a6:	92 e0       	ldi	r25, 0x02	; 2
    22a8:	0e 94 16 0c 	call	0x182c	; 0x182c <Device_Write_Property>
    22ac:	0a c0       	rjmp	.+20     	; 0x22c2 <handler_write_property+0xdc>
                        SERVICE_CONFIRMED_WRITE_PROPERTY, error_class,
                        error_code);
                }
                break;
            case OBJECT_BINARY_VALUE:
                if (Binary_Value_Write_Property(&wp_data, &error_class,
    22ae:	ae 01       	movw	r20, r28
    22b0:	43 5e       	subi	r20, 0xE3	; 227
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255
    22b4:	be 01       	movw	r22, r28
    22b6:	61 5e       	subi	r22, 0xE1	; 225
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	86 e0       	ldi	r24, 0x06	; 6
    22bc:	92 e0       	ldi	r25, 0x02	; 2
    22be:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <Binary_Value_Write_Property>
    22c2:	88 23       	and	r24, r24
    22c4:	39 f0       	breq	.+14     	; 0x22d4 <handler_write_property+0xee>
                        &error_code)) {
                    len =
    22c6:	4f e0       	ldi	r20, 0x0F	; 15
    22c8:	f7 01       	movw	r30, r14
    22ca:	67 81       	ldd	r22, Z+7	; 0x07
    22cc:	c6 01       	movw	r24, r12
    22ce:	0e 94 5d 19 	call	0x32ba	; 0x32ba <encode_simple_ack>
    22d2:	0b c0       	rjmp	.+22     	; 0x22ea <handler_write_property+0x104>
                        SERVICE_CONFIRMED_WRITE_PROPERTY, error_class,
                        error_code);
                }
                break;
            default:
                len =
    22d4:	0d 8d       	ldd	r16, Y+29	; 0x1d
    22d6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    22d8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    22da:	38 a1       	ldd	r19, Y+32	; 0x20
    22dc:	4f e0       	ldi	r20, 0x0F	; 15
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	f7 01       	movw	r30, r14
    22e2:	67 81       	ldd	r22, Z+7	; 0x07
    22e4:	c6 01       	movw	r24, r12
    22e6:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bacerror_encode_apdu>
                    service_data->invoke_id, SERVICE_CONFIRMED_WRITE_PROPERTY,
                    error_class, error_code);
                break;
        }
    }
    pdu_len += len;
    22ea:	94 01       	movw	r18, r8
    22ec:	28 0f       	add	r18, r24
    22ee:	39 1f       	adc	r19, r25
    bytes_sent =
    22f0:	4d e4       	ldi	r20, 0x4D	; 77
    22f2:	52 e0       	ldi	r21, 0x02	; 2
    22f4:	be 01       	movw	r22, r28
    22f6:	6d 5e       	subi	r22, 0xED	; 237
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	c5 01       	movw	r24, r10
    22fc:	0e 94 98 02 	call	0x530	; 0x530 <dlmstp_send_pdu>
        datalink_send_pdu(src, &npdu_data, &Handler_Transmit_Buffer[0],
        pdu_len);

    return;
}
    2300:	a0 96       	adiw	r28, 0x20	; 32
    2302:	ec e0       	ldi	r30, 0x0C	; 12
    2304:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__epilogue_restores__+0xc>

00002308 <npdu_handler>:
 */
void npdu_handler(
    BACNET_ADDRESS * src,       /* source address */
    uint8_t * pdu,      /* PDU data */
    uint16_t pdu_len)
{       /* length PDU  */
    2308:	ac e1       	ldi	r26, 0x1C	; 28
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	ea e8       	ldi	r30, 0x8A	; 138
    230e:	f1 e1       	ldi	r31, 0x11	; 17
    2310:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    2314:	7c 01       	movw	r14, r24
    2316:	8b 01       	movw	r16, r22
    2318:	6a 01       	movw	r12, r20
    int apdu_offset = 0;
    BACNET_ADDRESS dest = { 0 };
    231a:	be 01       	movw	r22, r28
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	82 e1       	ldi	r24, 0x12	; 18
    2322:	fb 01       	movw	r30, r22
    2324:	11 92       	st	Z+, r1
    2326:	8a 95       	dec	r24
    2328:	e9 f7       	brne	.-6      	; 0x2324 <npdu_handler+0x1c>
    BACNET_NPDU_DATA npdu_data = { 0 };
    232a:	9e 01       	movw	r18, r28
    232c:	2d 5e       	subi	r18, 0xED	; 237
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	8a e0       	ldi	r24, 0x0A	; 10
    2332:	f9 01       	movw	r30, r18
    2334:	11 92       	st	Z+, r1
    2336:	8a 95       	dec	r24
    2338:	e9 f7       	brne	.-6      	; 0x2334 <npdu_handler+0x2c>

    /* only handle the version that we know how to handle */
    if (pdu[0] == BACNET_PROTOCOL_VERSION) {
    233a:	f8 01       	movw	r30, r16
    233c:	80 81       	ld	r24, Z
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	29 f5       	brne	.+74     	; 0x238c <npdu_handler+0x84>
        apdu_offset = npdu_decode(&pdu[0], &dest, src, &npdu_data);
    2342:	a7 01       	movw	r20, r14
    2344:	c8 01       	movw	r24, r16
    2346:	0e 94 95 13 	call	0x272a	; 0x272a <npdu_decode>
    234a:	9c 01       	movw	r18, r24
        if (npdu_data.network_layer_message) {
    234c:	8d 89       	ldd	r24, Y+21	; 0x15
    234e:	81 11       	cpse	r24, r1
    2350:	1d c0       	rjmp	.+58     	; 0x238c <npdu_handler+0x84>
            /*FIXME: network layer message received!  Handle it! */
#if PRINT_ENABLED
            fprintf(stderr, "NPDU: Network Layer Message discarded!\n");
#endif
        } else if ((apdu_offset > 0) && (apdu_offset <= pdu_len)) {
    2352:	12 16       	cp	r1, r18
    2354:	13 06       	cpc	r1, r19
    2356:	d4 f4       	brge	.+52     	; 0x238c <npdu_handler+0x84>
    2358:	c2 16       	cp	r12, r18
    235a:	d3 06       	cpc	r13, r19
    235c:	b8 f0       	brcs	.+46     	; 0x238c <npdu_handler+0x84>
            if ((dest.net == 0) || (dest.net == BACNET_BROADCAST_NETWORK)) {
    235e:	89 85       	ldd	r24, Y+9	; 0x09
    2360:	9a 85       	ldd	r25, Y+10	; 0x0a
    2362:	ac 01       	movw	r20, r24
    2364:	41 50       	subi	r20, 0x01	; 1
    2366:	51 09       	sbc	r21, r1
    2368:	4e 3f       	cpi	r20, 0xFE	; 254
    236a:	5f 4f       	sbci	r21, 0xFF	; 255
    236c:	78 f0       	brcs	.+30     	; 0x238c <npdu_handler+0x84>
    236e:	b8 01       	movw	r22, r16
    2370:	62 0f       	add	r22, r18
    2372:	73 1f       	adc	r23, r19
                /* only handle the version that we know how to handle */
                /* and we are not a router, so ignore messages with
                   routing information cause they are not for us */
                if ((dest.net == BACNET_BROADCAST_NETWORK) &&
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	21 f4       	brne	.+8      	; 0x2380 <npdu_handler+0x78>
                    ((pdu[apdu_offset] & 0xF0) ==
    2378:	fb 01       	movw	r30, r22
    237a:	80 81       	ld	r24, Z
    237c:	80 7f       	andi	r24, 0xF0	; 240
                if ((dest.net == BACNET_BROADCAST_NETWORK) &&
    237e:	31 f0       	breq	.+12     	; 0x238c <npdu_handler+0x84>
                    /* hack for 5.4.5.1 - IDLE */
                    /* ConfirmedBroadcastReceived */
                    /* then enter IDLE - ignore the PDU */
                } else {
                    apdu_handler(src, &pdu[apdu_offset],
                        (uint16_t) (pdu_len - apdu_offset));
    2380:	a6 01       	movw	r20, r12
    2382:	42 1b       	sub	r20, r18
    2384:	53 0b       	sbc	r21, r19
                    apdu_handler(src, &pdu[apdu_offset],
    2386:	c7 01       	movw	r24, r14
    2388:	0e 94 25 08 	call	0x104a	; 0x104a <apdu_handler>
            (unsigned) pdu[0]);
#endif
    }

    return;
}
    238c:	6c 96       	adiw	r28, 0x1c	; 28
    238e:	e8 e0       	ldi	r30, 0x08	; 8
    2390:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00002394 <iam_encode_pdu>:
 */
int iam_encode_pdu(
    uint8_t * buffer,
    BACNET_ADDRESS * dest,
    BACNET_NPDU_DATA * npdu_data)
{
    2394:	a2 e1       	ldi	r26, 0x12	; 18
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e0 ed       	ldi	r30, 0xD0	; 208
    239a:	f1 e1       	ldi	r31, 0x11	; 17
    239c:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    23a0:	5c 01       	movw	r10, r24
    23a2:	6b 01       	movw	r12, r22
    23a4:	8a 01       	movw	r16, r20
    int len = 0;
    int pdu_len = 0;
    BACNET_ADDRESS my_address;
    datalink_get_my_address(&my_address);
    23a6:	ce 01       	movw	r24, r28
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	0e 94 a2 07 	call	0xf44	; 0xf44 <dlmstp_get_my_address>

    datalink_get_broadcast_address(dest);
    23ae:	c6 01       	movw	r24, r12
    23b0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <dlmstp_get_broadcast_address>
    /* encode the NPDU portion of the packet */
    npdu_encode_npdu_data(npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	c8 01       	movw	r24, r16
    23bc:	0e 94 83 13 	call	0x2706	; 0x2706 <npdu_encode_npdu_data>
    pdu_len = npdu_encode_pdu(&buffer[0], dest, &my_address, npdu_data);
    23c0:	98 01       	movw	r18, r16
    23c2:	ae 01       	movw	r20, r28
    23c4:	4f 5f       	subi	r20, 0xFF	; 255
    23c6:	5f 4f       	sbci	r21, 0xFF	; 255
    23c8:	b6 01       	movw	r22, r12
    23ca:	c5 01       	movw	r24, r10
    23cc:	0e 94 99 12 	call	0x2532	; 0x2532 <npdu_encode_pdu>
    23d0:	6c 01       	movw	r12, r24

    /* encode the APDU portion of the packet */
    len =
        iam_encode_apdu(&buffer[pdu_len], Device_Object_Instance_Number(),
    23d2:	0e 94 bc 09 	call	0x1378	; 0x1378 <Device_Vendor_Identifier>
    23d6:	7c 01       	movw	r14, r24
    23d8:	0e 94 8c 09 	call	0x1318	; 0x1318 <Device_Object_Instance_Number>
    23dc:	ab 01       	movw	r20, r22
    23de:	bc 01       	movw	r22, r24
    len =
    23e0:	03 e0       	ldi	r16, 0x03	; 3
    23e2:	10 e0       	ldi	r17, 0x00	; 0
    23e4:	22 e3       	ldi	r18, 0x32	; 50
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	c5 01       	movw	r24, r10
    23ea:	8c 0d       	add	r24, r12
    23ec:	9d 1d       	adc	r25, r13
    23ee:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <iam_encode_apdu>
        MAX_APDU, SEGMENTATION_NONE, Device_Vendor_Identifier());
    pdu_len += len;

    return pdu_len;
}
    23f2:	8c 0d       	add	r24, r12
    23f4:	9d 1d       	adc	r25, r13
    23f6:	62 96       	adiw	r28, 0x12	; 18
    23f8:	ea e0       	ldi	r30, 0x0A	; 10
    23fa:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

000023fe <handler_unrecognized_service>:
void handler_unrecognized_service(
    uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src,
    BACNET_CONFIRMED_SERVICE_DATA * service_data)
{
    23fe:	ac e1       	ldi	r26, 0x1C	; 28
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e5 e0       	ldi	r30, 0x05	; 5
    2404:	f2 e1       	ldi	r31, 0x12	; 18
    2406:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    240a:	8a 01       	movw	r16, r20
    240c:	69 01       	movw	r12, r18

    (void) service_request;
    (void) service_len;

    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    240e:	ce 01       	movw	r24, r28
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	0e 94 a2 07 	call	0xf44	; 0xf44 <dlmstp_get_my_address>
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	ce 01       	movw	r24, r28
    241e:	43 96       	adiw	r24, 0x13	; 19
    2420:	0e 94 83 13 	call	0x2706	; 0x2706 <npdu_encode_npdu_data>
    pdu_len =
    2424:	9e 01       	movw	r18, r28
    2426:	2d 5e       	subi	r18, 0xED	; 237
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	ae 01       	movw	r20, r28
    242c:	4f 5f       	subi	r20, 0xFF	; 255
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	b8 01       	movw	r22, r16
    2432:	8d e4       	ldi	r24, 0x4D	; 77
    2434:	92 e0       	ldi	r25, 0x02	; 2
    2436:	0e 94 99 12 	call	0x2532	; 0x2532 <npdu_encode_pdu>
    243a:	7c 01       	movw	r14, r24
        npdu_encode_pdu(&Handler_Transmit_Buffer[0], src, &my_address,
        &npdu_data);
    /* encode the APDU portion of the packet */
    len =
    243c:	49 e0       	ldi	r20, 0x09	; 9
    243e:	f6 01       	movw	r30, r12
    2440:	67 81       	ldd	r22, Z+7	; 0x07
    2442:	83 5b       	subi	r24, 0xB3	; 179
    2444:	9d 4f       	sbci	r25, 0xFD	; 253
    2446:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <reject_encode_apdu>
        reject_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
        service_data->invoke_id, REJECT_REASON_UNRECOGNIZED_SERVICE);
    pdu_len += len;
    244a:	97 01       	movw	r18, r14
    244c:	28 0f       	add	r18, r24
    244e:	39 1f       	adc	r19, r25
    /* send the data */
    bytes_sent =
    2450:	4d e4       	ldi	r20, 0x4D	; 77
    2452:	52 e0       	ldi	r21, 0x02	; 2
    2454:	be 01       	movw	r22, r28
    2456:	6d 5e       	subi	r22, 0xED	; 237
    2458:	7f 4f       	sbci	r23, 0xFF	; 255
    245a:	c8 01       	movw	r24, r16
    245c:	0e 94 98 02 	call	0x530	; 0x530 <dlmstp_send_pdu>
    } else {
#if PRINT_ENABLED
        fprintf(stderr, "Failed to Send Reject (%s)!\n", strerror(errno));
#endif
    }
}
    2460:	6c 96       	adiw	r28, 0x1c	; 28
    2462:	e8 e0       	ldi	r30, 0x08	; 8
    2464:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00002468 <CRC_Calc_Header>:
    uint8_t dataValue,
    uint8_t crcValue)
{
    uint16_t crc;

    crc = crcValue ^ dataValue; /* XOR C7..C0 with D7..D0 */
    2468:	68 27       	eor	r22, r24
    246a:	70 e0       	ldi	r23, 0x00	; 0

    /* Exclusive OR the terms in the table (top down) */
    crc = crc ^ (crc << 1) ^ (crc << 2) ^ (crc << 3)
    246c:	cb 01       	movw	r24, r22
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	9b 01       	movw	r18, r22
    2474:	22 0f       	add	r18, r18
    2476:	33 1f       	adc	r19, r19
    2478:	22 0f       	add	r18, r18
    247a:	33 1f       	adc	r19, r19
    247c:	82 27       	eor	r24, r18
    247e:	93 27       	eor	r25, r19
    2480:	86 27       	eor	r24, r22
    2482:	97 27       	eor	r25, r23
    2484:	9b 01       	movw	r18, r22
    2486:	53 e0       	ldi	r21, 0x03	; 3
    2488:	22 0f       	add	r18, r18
    248a:	33 1f       	adc	r19, r19
    248c:	5a 95       	dec	r21
    248e:	e1 f7       	brne	.-8      	; 0x2488 <CRC_Calc_Header+0x20>
    2490:	82 27       	eor	r24, r18
    2492:	93 27       	eor	r25, r19
        ^ (crc << 4) ^ (crc << 5) ^ (crc << 6)
    2494:	9b 01       	movw	r18, r22
    2496:	e4 e0       	ldi	r30, 0x04	; 4
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	ea 95       	dec	r30
    249e:	e1 f7       	brne	.-8      	; 0x2498 <CRC_Calc_Header+0x30>
    24a0:	82 27       	eor	r24, r18
    24a2:	93 27       	eor	r25, r19
    24a4:	9b 01       	movw	r18, r22
    24a6:	f5 e0       	ldi	r31, 0x05	; 5
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	fa 95       	dec	r31
    24ae:	e1 f7       	brne	.-8      	; 0x24a8 <CRC_Calc_Header+0x40>
    24b0:	82 27       	eor	r24, r18
    24b2:	93 27       	eor	r25, r19
    24b4:	9b 01       	movw	r18, r22
    24b6:	a6 e0       	ldi	r26, 0x06	; 6
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	aa 95       	dec	r26
    24be:	e1 f7       	brne	.-8      	; 0x24b8 <CRC_Calc_Header+0x50>
    24c0:	82 27       	eor	r24, r18
    24c2:	93 27       	eor	r25, r19
        ^ (crc << 7);
    24c4:	76 95       	lsr	r23
    24c6:	76 2f       	mov	r23, r22
    24c8:	66 27       	eor	r22, r22
    24ca:	77 95       	ror	r23
    24cc:	67 95       	ror	r22
    crc = crc ^ (crc << 1) ^ (crc << 2) ^ (crc << 3)
    24ce:	86 27       	eor	r24, r22
    24d0:	97 27       	eor	r25, r23

    /* Combine bits shifted out left hand end */
    return (crc & 0xfe) ^ ((crc >> 8) & 1);
}
    24d2:	90 fb       	bst	r25, 0
    24d4:	80 f9       	bld	r24, 0
    24d6:	08 95       	ret

000024d8 <CRC_Calc_Data>:
/*  The ^ operator means exclusive OR. */
/* Note: This function is copied directly from the BACnet standard. */
uint16_t CRC_Calc_Data(
    uint8_t dataValue,
    uint16_t crcValue)
{
    24d8:	a7 2f       	mov	r26, r23
    uint16_t crcLow;

    crcLow = (crcValue & 0xff) ^ dataValue;     /* XOR C7..C0 with D7..D0 */
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	86 27       	eor	r24, r22

    /* Exclusive OR the terms in the table (top down) */
    return (crcValue >> 8) ^ (crcLow << 8) ^ (crcLow << 3)
        ^ (crcLow << 12) ^ (crcLow >> 4)
        ^ (crcLow & 0x0f) ^ ((crcLow & 0x0f) << 7);
    24de:	bc 01       	movw	r22, r24
    24e0:	6f 70       	andi	r22, 0x0F	; 15
    24e2:	77 27       	eor	r23, r23
    return (crcValue >> 8) ^ (crcLow << 8) ^ (crcLow << 3)
    24e4:	38 2f       	mov	r19, r24
    24e6:	22 27       	eor	r18, r18
    24e8:	fc 01       	movw	r30, r24
    24ea:	43 e0       	ldi	r20, 0x03	; 3
    24ec:	ee 0f       	add	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	4a 95       	dec	r20
    24f2:	e1 f7       	brne	.-8      	; 0x24ec <CRC_Calc_Data+0x14>
    24f4:	2e 27       	eor	r18, r30
    24f6:	3f 27       	eor	r19, r31
    24f8:	4a 2f       	mov	r20, r26
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	24 27       	eor	r18, r20
    24fe:	35 27       	eor	r19, r21
        ^ (crcLow << 12) ^ (crcLow >> 4)
    2500:	ac 01       	movw	r20, r24
    2502:	54 2f       	mov	r21, r20
    2504:	44 27       	eor	r20, r20
    2506:	52 95       	swap	r21
    2508:	50 7f       	andi	r21, 0xF0	; 240
    250a:	24 27       	eor	r18, r20
    250c:	35 27       	eor	r19, r21
    250e:	f4 e0       	ldi	r31, 0x04	; 4
    2510:	96 95       	lsr	r25
    2512:	87 95       	ror	r24
    2514:	fa 95       	dec	r31
    2516:	e1 f7       	brne	.-8      	; 0x2510 <CRC_Calc_Data+0x38>
    2518:	28 27       	eor	r18, r24
    251a:	39 27       	eor	r19, r25
        ^ (crcLow & 0x0f) ^ ((crcLow & 0x0f) << 7);
    251c:	26 27       	eor	r18, r22
    251e:	37 27       	eor	r19, r23
    2520:	cb 01       	movw	r24, r22
    2522:	96 95       	lsr	r25
    2524:	98 2f       	mov	r25, r24
    2526:	88 27       	eor	r24, r24
    2528:	97 95       	ror	r25
    252a:	87 95       	ror	r24
}
    252c:	82 27       	eor	r24, r18
    252e:	93 27       	eor	r25, r19
    2530:	08 95       	ret

00002532 <npdu_encode_pdu>:
int npdu_encode_pdu(
    uint8_t * npdu,
    BACNET_ADDRESS * dest,
    BACNET_ADDRESS * src,
    BACNET_NPDU_DATA * npdu_data)
{
    2532:	a0 e0       	ldi	r26, 0x00	; 0
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e9       	ldi	r30, 0x9F	; 159
    2538:	f2 e1       	ldi	r31, 0x12	; 18
    253a:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    253e:	ec 01       	movw	r28, r24
    2540:	7b 01       	movw	r14, r22
    2542:	5a 01       	movw	r10, r20
    2544:	69 01       	movw	r12, r18
    int len = 0;        /* return value - number of octets loaded in this function */
    uint8_t i = 0;      /* counter  */


    if (npdu && npdu_data) {
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	09 f4       	brne	.+2      	; 0x254c <npdu_encode_pdu+0x1a>
    254a:	d5 c0       	rjmp	.+426    	; 0x26f6 <npdu_encode_pdu+0x1c4>
    254c:	21 15       	cp	r18, r1
    254e:	31 05       	cpc	r19, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <npdu_encode_pdu+0x22>
    2552:	d1 c0       	rjmp	.+418    	; 0x26f6 <npdu_encode_pdu+0x1c4>
        /* protocol version */
        npdu[0] = npdu_data->protocol_version;
    2554:	d9 01       	movw	r26, r18
    2556:	8c 91       	ld	r24, X
    2558:	88 83       	st	Y, r24
        /* initialize the control octet */
        npdu[1] = 0;
    255a:	19 82       	std	Y+1, r1	; 0x01
        /* Bit 7: 1 indicates that the NSDU conveys a network layer message. */
        /*          Message Type field is present. */
        /*        0 indicates that the NSDU contains a BACnet APDU. */
        /*          Message Type field is absent. */
        if (npdu_data->network_layer_message)
    255c:	12 96       	adiw	r26, 0x02	; 2
    255e:	8c 91       	ld	r24, X
    2560:	88 23       	and	r24, r24
    2562:	11 f0       	breq	.+4      	; 0x2568 <npdu_encode_pdu+0x36>
            npdu[1] |= BIT7;
    2564:	80 e8       	ldi	r24, 0x80	; 128
    2566:	89 83       	std	Y+1, r24	; 0x01
        /*Bit 5: Destination specifier where: */
        /* 0 = DNET, DLEN, DADR, and Hop Count absent */
        /* 1 = DNET, DLEN, and Hop Count present */
        /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
        /* DLEN > 0 specifies length of DADR field */
        if (dest && dest->net)
    2568:	e1 14       	cp	r14, r1
    256a:	f1 04       	cpc	r15, r1
    256c:	41 f0       	breq	.+16     	; 0x257e <npdu_encode_pdu+0x4c>
    256e:	f7 01       	movw	r30, r14
    2570:	80 85       	ldd	r24, Z+8	; 0x08
    2572:	91 85       	ldd	r25, Z+9	; 0x09
    2574:	89 2b       	or	r24, r25
    2576:	19 f0       	breq	.+6      	; 0x257e <npdu_encode_pdu+0x4c>
            npdu[1] |= BIT5;
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	80 62       	ori	r24, 0x20	; 32
    257c:	89 83       	std	Y+1, r24	; 0x01
        /* Bit 3: Source specifier where: */
        /* 0 =  SNET, SLEN, and SADR absent */
        /* 1 =  SNET, SLEN, and SADR present */
        /* SLEN = 0 Invalid */
        /* SLEN > 0 specifies length of SADR field */
        if (src && src->net && src->len)
    257e:	a1 14       	cp	r10, r1
    2580:	b1 04       	cpc	r11, r1
    2582:	71 f0       	breq	.+28     	; 0x25a0 <npdu_encode_pdu+0x6e>
    2584:	d5 01       	movw	r26, r10
    2586:	18 96       	adiw	r26, 0x08	; 8
    2588:	8d 91       	ld	r24, X+
    258a:	9c 91       	ld	r25, X
    258c:	19 97       	sbiw	r26, 0x09	; 9
    258e:	89 2b       	or	r24, r25
    2590:	39 f0       	breq	.+14     	; 0x25a0 <npdu_encode_pdu+0x6e>
    2592:	1a 96       	adiw	r26, 0x0a	; 10
    2594:	8c 91       	ld	r24, X
    2596:	88 23       	and	r24, r24
    2598:	19 f0       	breq	.+6      	; 0x25a0 <npdu_encode_pdu+0x6e>
            npdu[1] |= BIT3;
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	88 60       	ori	r24, 0x08	; 8
    259e:	89 83       	std	Y+1, r24	; 0x01
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        /* 0 indicates that other than a BACnet-Confirmed-Request-PDU, */
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        if (npdu_data->data_expecting_reply)
    25a0:	f6 01       	movw	r30, r12
    25a2:	81 81       	ldd	r24, Z+1	; 0x01
    25a4:	88 23       	and	r24, r24
    25a6:	19 f0       	breq	.+6      	; 0x25ae <npdu_encode_pdu+0x7c>
            npdu[1] |= BIT2;
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	84 60       	ori	r24, 0x04	; 4
    25ac:	89 83       	std	Y+1, r24	; 0x01
        /* Bits 1,0: Network priority where: */
        /* B'11' = Life Safety message */
        /* B'10' = Critical Equipment message */
        /* B'01' = Urgent message */
        /* B'00' = Normal message */
        npdu[1] |= (npdu_data->priority & 0x03);
    25ae:	d6 01       	movw	r26, r12
    25b0:	13 96       	adiw	r26, 0x03	; 3
    25b2:	9c 91       	ld	r25, X
    25b4:	93 70       	andi	r25, 0x03	; 3
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	89 2b       	or	r24, r25
    25ba:	89 83       	std	Y+1, r24	; 0x01
        len = 2;
        if (dest && dest->net) {
    25bc:	e1 14       	cp	r14, r1
    25be:	f1 04       	cpc	r15, r1
    25c0:	59 f1       	breq	.+86     	; 0x2618 <npdu_encode_pdu+0xe6>
    25c2:	f7 01       	movw	r30, r14
    25c4:	60 85       	ldd	r22, Z+8	; 0x08
    25c6:	71 85       	ldd	r23, Z+9	; 0x09
    25c8:	61 15       	cp	r22, r1
    25ca:	71 05       	cpc	r23, r1
    25cc:	29 f1       	breq	.+74     	; 0x2618 <npdu_encode_pdu+0xe6>
            len += encode_unsigned16(&npdu[len], dest->net);
    25ce:	ce 01       	movw	r24, r28
    25d0:	02 96       	adiw	r24, 0x02	; 2
    25d2:	0e 94 65 19 	call	0x32ca	; 0x32ca <encode_unsigned16>
            npdu[len++] = dest->len;
    25d6:	9c 01       	movw	r18, r24
    25d8:	2d 5f       	subi	r18, 0xFD	; 253
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	d7 01       	movw	r26, r14
    25de:	1a 96       	adiw	r26, 0x0a	; 10
    25e0:	4c 91       	ld	r20, X
    25e2:	1a 97       	sbiw	r26, 0x0a	; 10
    25e4:	fe 01       	movw	r30, r28
    25e6:	e8 0f       	add	r30, r24
    25e8:	f9 1f       	adc	r31, r25
    25ea:	42 83       	std	Z+2, r20	; 0x02
            /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
            /* DLEN > 0 specifies length of DADR field */
            if (dest->len) {
    25ec:	1a 96       	adiw	r26, 0x0a	; 10
    25ee:	8c 91       	ld	r24, X
    25f0:	88 23       	and	r24, r24
    25f2:	a9 f0       	breq	.+42     	; 0x261e <npdu_encode_pdu+0xec>
    25f4:	c9 01       	movw	r24, r18
    25f6:	48 2f       	mov	r20, r24
    25f8:	42 1b       	sub	r20, r18
    25fa:	8c 01       	movw	r16, r24
                for (i = 0; i < dest->len; i++) {
    25fc:	f7 01       	movw	r30, r14
    25fe:	52 85       	ldd	r21, Z+10	; 0x0a
    2600:	45 17       	cp	r20, r21
    2602:	70 f4       	brcc	.+28     	; 0x2620 <npdu_encode_pdu+0xee>
                    npdu[len++] = dest->adr[i];
    2604:	f7 01       	movw	r30, r14
    2606:	e4 0f       	add	r30, r20
    2608:	f1 1d       	adc	r31, r1
    260a:	43 85       	ldd	r20, Z+11	; 0x0b
    260c:	fe 01       	movw	r30, r28
    260e:	e8 0f       	add	r30, r24
    2610:	f9 1f       	adc	r31, r25
    2612:	40 83       	st	Z, r20
    2614:	01 96       	adiw	r24, 0x01	; 1
    2616:	ef cf       	rjmp	.-34     	; 0x25f6 <npdu_encode_pdu+0xc4>
        len = 2;
    2618:	02 e0       	ldi	r16, 0x02	; 2
    261a:	10 e0       	ldi	r17, 0x00	; 0
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <npdu_encode_pdu+0xee>
            npdu[len++] = dest->len;
    261e:	89 01       	movw	r16, r18
                }
            }
        }
        if (src && src->net && src->len) {      /* Only insert if valid */
    2620:	a1 14       	cp	r10, r1
    2622:	b1 04       	cpc	r11, r1
    2624:	a1 f1       	breq	.+104    	; 0x268e <npdu_encode_pdu+0x15c>
    2626:	d5 01       	movw	r26, r10
    2628:	18 96       	adiw	r26, 0x08	; 8
    262a:	6d 91       	ld	r22, X+
    262c:	7c 91       	ld	r23, X
    262e:	19 97       	sbiw	r26, 0x09	; 9
    2630:	61 15       	cp	r22, r1
    2632:	71 05       	cpc	r23, r1
    2634:	61 f1       	breq	.+88     	; 0x268e <npdu_encode_pdu+0x15c>
    2636:	1a 96       	adiw	r26, 0x0a	; 10
    2638:	8c 91       	ld	r24, X
    263a:	88 23       	and	r24, r24
    263c:	41 f1       	breq	.+80     	; 0x268e <npdu_encode_pdu+0x15c>
            len += encode_unsigned16(&npdu[len], src->net);
    263e:	ce 01       	movw	r24, r28
    2640:	80 0f       	add	r24, r16
    2642:	91 1f       	adc	r25, r17
    2644:	0e 94 65 19 	call	0x32ca	; 0x32ca <encode_unsigned16>
    2648:	08 0f       	add	r16, r24
    264a:	19 1f       	adc	r17, r25
            npdu[len++] = src->len;
    264c:	98 01       	movw	r18, r16
    264e:	2f 5f       	subi	r18, 0xFF	; 255
    2650:	3f 4f       	sbci	r19, 0xFF	; 255
    2652:	f5 01       	movw	r30, r10
    2654:	82 85       	ldd	r24, Z+10	; 0x0a
    2656:	fe 01       	movw	r30, r28
    2658:	e0 0f       	add	r30, r16
    265a:	f1 1f       	adc	r31, r17
    265c:	80 83       	st	Z, r24
            /* SLEN = 0 denotes broadcast MAC SADR and SADR field is absent */
            /* SLEN > 0 specifies length of SADR field */
            if (src->len) {
    265e:	d5 01       	movw	r26, r10
    2660:	1a 96       	adiw	r26, 0x0a	; 10
    2662:	8c 91       	ld	r24, X
    2664:	88 23       	and	r24, r24
    2666:	91 f0       	breq	.+36     	; 0x268c <npdu_encode_pdu+0x15a>
    2668:	c9 01       	movw	r24, r18
    266a:	48 2f       	mov	r20, r24
    266c:	42 1b       	sub	r20, r18
    266e:	8c 01       	movw	r16, r24
                for (i = 0; i < src->len; i++) {
    2670:	f5 01       	movw	r30, r10
    2672:	52 85       	ldd	r21, Z+10	; 0x0a
    2674:	45 17       	cp	r20, r21
    2676:	58 f4       	brcc	.+22     	; 0x268e <npdu_encode_pdu+0x15c>
                    npdu[len++] = src->adr[i];
    2678:	f5 01       	movw	r30, r10
    267a:	e4 0f       	add	r30, r20
    267c:	f1 1d       	adc	r31, r1
    267e:	43 85       	ldd	r20, Z+11	; 0x0b
    2680:	fe 01       	movw	r30, r28
    2682:	e8 0f       	add	r30, r24
    2684:	f9 1f       	adc	r31, r25
    2686:	40 83       	st	Z, r20
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	ef cf       	rjmp	.-34     	; 0x266a <npdu_encode_pdu+0x138>
            npdu[len++] = src->len;
    268c:	89 01       	movw	r16, r18
            }
        }
        /* The Hop Count field shall be present only if the message is */
        /* destined for a remote network, i.e., if DNET is present. */
        /* This is a one-octet field that is initialized to a value of 0xff. */
        if (dest && dest->net) {
    268e:	e1 14       	cp	r14, r1
    2690:	f1 04       	cpc	r15, r1
    2692:	79 f0       	breq	.+30     	; 0x26b2 <npdu_encode_pdu+0x180>
    2694:	d7 01       	movw	r26, r14
    2696:	18 96       	adiw	r26, 0x08	; 8
    2698:	8d 91       	ld	r24, X+
    269a:	9c 91       	ld	r25, X
    269c:	19 97       	sbiw	r26, 0x09	; 9
    269e:	89 2b       	or	r24, r25
    26a0:	41 f0       	breq	.+16     	; 0x26b2 <npdu_encode_pdu+0x180>
            npdu[len] = npdu_data->hop_count;
    26a2:	f6 01       	movw	r30, r12
    26a4:	81 85       	ldd	r24, Z+9	; 0x09
    26a6:	fe 01       	movw	r30, r28
    26a8:	e0 0f       	add	r30, r16
    26aa:	f1 1f       	adc	r31, r17
    26ac:	80 83       	st	Z, r24
            len++;
    26ae:	0f 5f       	subi	r16, 0xFF	; 255
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        if (npdu_data->network_layer_message) {
    26b2:	d6 01       	movw	r26, r12
    26b4:	12 96       	adiw	r26, 0x02	; 2
    26b6:	8c 91       	ld	r24, X
    26b8:	12 97       	sbiw	r26, 0x02	; 2
    26ba:	88 23       	and	r24, r24
    26bc:	f1 f0       	breq	.+60     	; 0x26fa <npdu_encode_pdu+0x1c8>
            npdu[len] = npdu_data->network_message_type;
    26be:	fe 01       	movw	r30, r28
    26c0:	e0 0f       	add	r30, r16
    26c2:	f1 1f       	adc	r31, r17
    26c4:	15 96       	adiw	r26, 0x05	; 5
    26c6:	8c 91       	ld	r24, X
    26c8:	15 97       	sbiw	r26, 0x05	; 5
    26ca:	80 83       	st	Z, r24
            len++;
    26cc:	0f 5f       	subi	r16, 0xFF	; 255
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
            /* Message Type field contains a value in the range 0x80 - 0xFF, */
            /* then a Vendor ID field shall be present */
            if (npdu_data->network_message_type >= 0x80)
    26d0:	15 96       	adiw	r26, 0x05	; 5
    26d2:	8d 91       	ld	r24, X+
    26d4:	9c 91       	ld	r25, X
    26d6:	16 97       	sbiw	r26, 0x06	; 6
    26d8:	80 38       	cpi	r24, 0x80	; 128
    26da:	91 05       	cpc	r25, r1
    26dc:	70 f0       	brcs	.+28     	; 0x26fa <npdu_encode_pdu+0x1c8>
                len += encode_unsigned16(&npdu[len], npdu_data->vendor_id);
    26de:	17 96       	adiw	r26, 0x07	; 7
    26e0:	6d 91       	ld	r22, X+
    26e2:	7c 91       	ld	r23, X
    26e4:	18 97       	sbiw	r26, 0x08	; 8
    26e6:	ce 01       	movw	r24, r28
    26e8:	80 0f       	add	r24, r16
    26ea:	91 1f       	adc	r25, r17
    26ec:	0e 94 65 19 	call	0x32ca	; 0x32ca <encode_unsigned16>
    26f0:	08 0f       	add	r16, r24
    26f2:	19 1f       	adc	r17, r25
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <npdu_encode_pdu+0x1c8>
    int len = 0;        /* return value - number of octets loaded in this function */
    26f6:	00 e0       	ldi	r16, 0x00	; 0
    26f8:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    return len;
}
    26fa:	c8 01       	movw	r24, r16
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	ea e0       	ldi	r30, 0x0A	; 10
    2702:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00002706 <npdu_encode_npdu_data>:
 */
void npdu_encode_npdu_data(
    BACNET_NPDU_DATA * npdu_data,
    bool data_expecting_reply,
    BACNET_MESSAGE_PRIORITY priority)
{
    2706:	fc 01       	movw	r30, r24
    if (npdu_data) {
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	71 f0       	breq	.+28     	; 0x2728 <npdu_encode_npdu_data+0x22>
        npdu_data->data_expecting_reply = data_expecting_reply;
    270c:	61 83       	std	Z+1, r22	; 0x01
        npdu_data->protocol_version = BACNET_PROTOCOL_VERSION;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	80 83       	st	Z, r24
        npdu_data->network_layer_message = false;       /* false if APDU */
    2712:	12 82       	std	Z+2, r1	; 0x02
        npdu_data->network_message_type = NETWORK_MESSAGE_INVALID;      /* optional */
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	96 83       	std	Z+6, r25	; 0x06
    271a:	85 83       	std	Z+5, r24	; 0x05
        npdu_data->vendor_id = 0;       /* optional, if net message type is > 0x80 */
    271c:	10 86       	std	Z+8, r1	; 0x08
    271e:	17 82       	std	Z+7, r1	; 0x07
        npdu_data->priority = priority;
    2720:	54 83       	std	Z+4, r21	; 0x04
    2722:	43 83       	std	Z+3, r20	; 0x03
        npdu_data->hop_count = HOP_COUNT_DEFAULT;
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	81 87       	std	Z+9, r24	; 0x09
    2728:	08 95       	ret

0000272a <npdu_decode>:
int npdu_decode(
    uint8_t * npdu,
    BACNET_ADDRESS * dest,
    BACNET_ADDRESS * src,
    BACNET_NPDU_DATA * npdu_data)
{
    272a:	a4 e0       	ldi	r26, 0x04	; 4
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	eb e9       	ldi	r30, 0x9B	; 155
    2730:	f3 e1       	ldi	r31, 0x13	; 19
    2732:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__prologue_saves__+0xc>
    2736:	7c 01       	movw	r14, r24
    2738:	4b 01       	movw	r8, r22
    273a:	5a 01       	movw	r10, r20
    273c:	69 01       	movw	r12, r18
    int len = 0;        /* return value - number of octets loaded in this function */
    uint8_t i = 0;      /* counter */
    uint16_t src_net = 0;
    273e:	1c 82       	std	Y+4, r1	; 0x04
    2740:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t dest_net = 0;
    2742:	1a 82       	std	Y+2, r1	; 0x02
    2744:	19 82       	std	Y+1, r1	; 0x01
    uint8_t address_len = 0;
    uint8_t mac_octet = 0;

    if (npdu && npdu_data) {
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	09 f4       	brne	.+2      	; 0x274c <npdu_decode+0x22>
    274a:	03 c1       	rjmp	.+518    	; 0x2952 <npdu_decode+0x228>
    274c:	21 15       	cp	r18, r1
    274e:	31 05       	cpc	r19, r1
    2750:	09 f4       	brne	.+2      	; 0x2754 <npdu_decode+0x2a>
    2752:	ff c0       	rjmp	.+510    	; 0x2952 <npdu_decode+0x228>
        /* Protocol Version */
        npdu_data->protocol_version = npdu[0];
    2754:	dc 01       	movw	r26, r24
    2756:	8c 91       	ld	r24, X
    2758:	f9 01       	movw	r30, r18
    275a:	80 83       	st	Z, r24
        /* control octet */
        /* Bit 7: 1 indicates that the NSDU conveys a network layer message. */
        /*          Message Type field is present. */
        /*        0 indicates that the NSDU contains a BACnet APDU. */
        /*          Message Type field is absent. */
        npdu_data->network_layer_message = (npdu[1] & BIT7) ? true : false;
    275c:	11 96       	adiw	r26, 0x01	; 1
    275e:	8c 91       	ld	r24, X
    2760:	11 97       	sbiw	r26, 0x01	; 1
    2762:	88 1f       	adc	r24, r24
    2764:	88 27       	eor	r24, r24
    2766:	88 1f       	adc	r24, r24
    2768:	82 83       	std	Z+2, r24	; 0x02
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        /* 0 indicates that other than a BACnet-Confirmed-Request-PDU, */
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        npdu_data->data_expecting_reply = (npdu[1] & BIT2) ? true : false;
    276a:	11 96       	adiw	r26, 0x01	; 1
    276c:	8c 91       	ld	r24, X
    276e:	11 97       	sbiw	r26, 0x01	; 1
    2770:	82 fb       	bst	r24, 2
    2772:	88 27       	eor	r24, r24
    2774:	80 f9       	bld	r24, 0
    2776:	81 83       	std	Z+1, r24	; 0x01
        /* Bits 1,0: Network priority where: */
        /* B'11' = Life Safety message */
        /* B'10' = Critical Equipment message */
        /* B'01' = Urgent message */
        /* B'00' = Normal message */
        npdu_data->priority = (BACNET_MESSAGE_PRIORITY) (npdu[1] & 0x03);
    2778:	11 96       	adiw	r26, 0x01	; 1
    277a:	8c 91       	ld	r24, X
    277c:	11 97       	sbiw	r26, 0x01	; 1
    277e:	83 70       	andi	r24, 0x03	; 3
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	94 83       	std	Z+4, r25	; 0x04
    2784:	83 83       	std	Z+3, r24	; 0x03
        /*Bit 5: Destination specifier where: */
        /* 0 = DNET, DLEN, DADR, and Hop Count absent */
        /* 1 = DNET, DLEN, and Hop Count present */
        /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
        /* DLEN > 0 specifies length of DADR field */
        if (npdu[1] & BIT5) {
    2786:	11 96       	adiw	r26, 0x01	; 1
    2788:	8c 91       	ld	r24, X
    278a:	85 ff       	sbrs	r24, 5
    278c:	3b c0       	rjmp	.+118    	; 0x2804 <npdu_decode+0xda>
            len += decode_unsigned16(&npdu[len], &dest_net);
    278e:	be 01       	movw	r22, r28
    2790:	6f 5f       	subi	r22, 0xFF	; 255
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	c7 01       	movw	r24, r14
    2796:	02 96       	adiw	r24, 0x02	; 2
    2798:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <decode_unsigned16>
            /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
            /* DLEN > 0 specifies length of DADR field */
            address_len = npdu[len++];
    279c:	8c 01       	movw	r16, r24
    279e:	0d 5f       	subi	r16, 0xFD	; 253
    27a0:	1f 4f       	sbci	r17, 0xFF	; 255
    27a2:	f7 01       	movw	r30, r14
    27a4:	e8 0f       	add	r30, r24
    27a6:	f9 1f       	adc	r31, r25
    27a8:	42 81       	ldd	r20, Z+2	; 0x02
            if (dest) {
    27aa:	81 14       	cp	r8, r1
    27ac:	91 04       	cpc	r9, r1
    27ae:	49 f0       	breq	.+18     	; 0x27c2 <npdu_decode+0x98>
                dest->net = dest_net;
    27b0:	29 81       	ldd	r18, Y+1	; 0x01
    27b2:	3a 81       	ldd	r19, Y+2	; 0x02
    27b4:	d4 01       	movw	r26, r8
    27b6:	19 96       	adiw	r26, 0x09	; 9
    27b8:	3c 93       	st	X, r19
    27ba:	2e 93       	st	-X, r18
    27bc:	18 97       	sbiw	r26, 0x08	; 8
                dest->len = address_len;
    27be:	1a 96       	adiw	r26, 0x0a	; 10
    27c0:	4c 93       	st	X, r20
            }
            if (address_len) {
    27c2:	44 23       	and	r20, r20
    27c4:	a1 f1       	breq	.+104    	; 0x282e <npdu_decode+0x104>
                if (address_len > MAX_MAC_LEN) {
    27c6:	48 30       	cpi	r20, 0x08	; 8
    27c8:	18 f0       	brcs	.+6      	; 0x27d0 <npdu_decode+0xa6>
                    /* address is too large could be a malformed message */
                    return -1;
    27ca:	8f ef       	ldi	r24, 0xFF	; 255
    27cc:	9f ef       	ldi	r25, 0xFF	; 255
    27ce:	c5 c0       	rjmp	.+394    	; 0x295a <npdu_decode+0x230>
                if (address_len > MAX_MAC_LEN) {
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	df 01       	movw	r26, r30
    27d6:	a2 0f       	add	r26, r18
    27d8:	b3 1f       	adc	r27, r19
                }

                for (i = 0; i < address_len; i++) {
                    mac_octet = npdu[len++];
    27da:	13 96       	adiw	r26, 0x03	; 3
    27dc:	5c 91       	ld	r21, X
                    if (dest)
    27de:	81 14       	cp	r8, r1
    27e0:	91 04       	cpc	r9, r1
    27e2:	29 f0       	breq	.+10     	; 0x27ee <npdu_decode+0xc4>
    27e4:	d4 01       	movw	r26, r8
    27e6:	a2 0f       	add	r26, r18
    27e8:	b3 1f       	adc	r27, r19
                        dest->adr[i] = mac_octet;
    27ea:	1b 96       	adiw	r26, 0x0b	; 11
    27ec:	5c 93       	st	X, r21
    27ee:	2f 5f       	subi	r18, 0xFF	; 255
    27f0:	3f 4f       	sbci	r19, 0xFF	; 255
                for (i = 0; i < address_len; i++) {
    27f2:	24 17       	cp	r18, r20
    27f4:	78 f3       	brcs	.-34     	; 0x27d4 <npdu_decode+0xaa>
    27f6:	8c 01       	movw	r16, r24
    27f8:	0c 5f       	subi	r16, 0xFC	; 252
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	41 50       	subi	r20, 0x01	; 1
    27fe:	04 0f       	add	r16, r20
    2800:	11 1d       	adc	r17, r1
    2802:	15 c0       	rjmp	.+42     	; 0x282e <npdu_decode+0x104>
                }
            }
        }
        /* zero out the destination address */
        else if (dest) {
    2804:	61 15       	cp	r22, r1
    2806:	71 05       	cpc	r23, r1
    2808:	19 f4       	brne	.+6      	; 0x2810 <npdu_decode+0xe6>
        len = 2;
    280a:	02 e0       	ldi	r16, 0x02	; 2
    280c:	10 e0       	ldi	r17, 0x00	; 0
    280e:	0f c0       	rjmp	.+30     	; 0x282e <npdu_decode+0x104>
            dest->net = 0;
    2810:	fb 01       	movw	r30, r22
    2812:	11 86       	std	Z+9, r1	; 0x09
    2814:	10 86       	std	Z+8, r1	; 0x08
            dest->len = 0;
    2816:	12 86       	std	Z+10, r1	; 0x0a
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	f4 01       	movw	r30, r8
    281e:	e8 0f       	add	r30, r24
    2820:	f9 1f       	adc	r31, r25
            for (i = 0; i < MAX_MAC_LEN; i++) {
                dest->adr[i] = 0;
    2822:	13 86       	std	Z+11, r1	; 0x0b
    2824:	01 96       	adiw	r24, 0x01	; 1
            for (i = 0; i < MAX_MAC_LEN; i++) {
    2826:	87 30       	cpi	r24, 0x07	; 7
    2828:	91 05       	cpc	r25, r1
    282a:	c1 f7       	brne	.-16     	; 0x281c <npdu_decode+0xf2>
    282c:	ee cf       	rjmp	.-36     	; 0x280a <npdu_decode+0xe0>
        /* Bit 3: Source specifier where: */
        /* 0 =  SNET, SLEN, and SADR absent */
        /* 1 =  SNET, SLEN, and SADR present */
        /* SLEN = 0 Invalid todo Steve: immediately below src->len == broadcast case, surely then this comment is incorrect? */
        /* SLEN > 0 specifies length of SADR field */
        if (npdu[1] & BIT3) {
    282e:	d7 01       	movw	r26, r14
    2830:	11 96       	adiw	r26, 0x01	; 1
    2832:	8c 91       	ld	r24, X
    2834:	83 ff       	sbrs	r24, 3
    2836:	3c c0       	rjmp	.+120    	; 0x28b0 <npdu_decode+0x186>
            len += decode_unsigned16(&npdu[len], &src_net);
    2838:	be 01       	movw	r22, r28
    283a:	6d 5f       	subi	r22, 0xFD	; 253
    283c:	7f 4f       	sbci	r23, 0xFF	; 255
    283e:	c7 01       	movw	r24, r14
    2840:	80 0f       	add	r24, r16
    2842:	91 1f       	adc	r25, r17
    2844:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <decode_unsigned16>
    2848:	80 0f       	add	r24, r16
    284a:	91 1f       	adc	r25, r17
            /* SLEN = 0 denotes broadcast MAC SADR and SADR field is absent */
            /* SLEN > 0 specifies length of SADR field */
            address_len = npdu[len++];
    284c:	8c 01       	movw	r16, r24
    284e:	0f 5f       	subi	r16, 0xFF	; 255
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	f7 01       	movw	r30, r14
    2854:	e8 0f       	add	r30, r24
    2856:	f9 1f       	adc	r31, r25
    2858:	40 81       	ld	r20, Z
            if (src) {
    285a:	a1 14       	cp	r10, r1
    285c:	b1 04       	cpc	r11, r1
    285e:	49 f0       	breq	.+18     	; 0x2872 <npdu_decode+0x148>
                src->net = src_net;
    2860:	2b 81       	ldd	r18, Y+3	; 0x03
    2862:	3c 81       	ldd	r19, Y+4	; 0x04
    2864:	d5 01       	movw	r26, r10
    2866:	19 96       	adiw	r26, 0x09	; 9
    2868:	3c 93       	st	X, r19
    286a:	2e 93       	st	-X, r18
    286c:	18 97       	sbiw	r26, 0x08	; 8
                src->len = address_len;
    286e:	1a 96       	adiw	r26, 0x0a	; 10
    2870:	4c 93       	st	X, r20
            }
            if (address_len) {
    2872:	44 23       	and	r20, r20
    2874:	b1 f1       	breq	.+108    	; 0x28e2 <npdu_decode+0x1b8>
                if (address_len > MAX_MAC_LEN) {
    2876:	48 30       	cpi	r20, 0x08	; 8
    2878:	08 f0       	brcs	.+2      	; 0x287c <npdu_decode+0x152>
    287a:	a7 cf       	rjmp	.-178    	; 0x27ca <npdu_decode+0xa0>
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	df 01       	movw	r26, r30
    2882:	a2 0f       	add	r26, r18
    2884:	b3 1f       	adc	r27, r19
                    /* address is too large could be a malformed message */
                    return -1;
                }

                for (i = 0; i < address_len; i++) {
                    mac_octet = npdu[len++];
    2886:	11 96       	adiw	r26, 0x01	; 1
    2888:	5c 91       	ld	r21, X
                    if (src)
    288a:	a1 14       	cp	r10, r1
    288c:	b1 04       	cpc	r11, r1
    288e:	29 f0       	breq	.+10     	; 0x289a <npdu_decode+0x170>
    2890:	d5 01       	movw	r26, r10
    2892:	a2 0f       	add	r26, r18
    2894:	b3 1f       	adc	r27, r19
                        src->adr[i] = mac_octet;
    2896:	1b 96       	adiw	r26, 0x0b	; 11
    2898:	5c 93       	st	X, r21
    289a:	2f 5f       	subi	r18, 0xFF	; 255
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
                for (i = 0; i < address_len; i++) {
    289e:	24 17       	cp	r18, r20
    28a0:	78 f3       	brcs	.-34     	; 0x2880 <npdu_decode+0x156>
    28a2:	8c 01       	movw	r16, r24
    28a4:	0e 5f       	subi	r16, 0xFE	; 254
    28a6:	1f 4f       	sbci	r17, 0xFF	; 255
    28a8:	41 50       	subi	r20, 0x01	; 1
    28aa:	04 0f       	add	r16, r20
    28ac:	11 1d       	adc	r17, r1
    28ae:	19 c0       	rjmp	.+50     	; 0x28e2 <npdu_decode+0x1b8>
                }
            }
        } else if (src) {
    28b0:	a1 14       	cp	r10, r1
    28b2:	b1 04       	cpc	r11, r1
    28b4:	b1 f0       	breq	.+44     	; 0x28e2 <npdu_decode+0x1b8>
            /* Clear the net number, with one exception: if the receive() 
             * function set it to BACNET_BROADCAST_NETWORK, (eg, for 
             * BVLC_ORIGINAL_BROADCAST_NPDU) then don't stomp on that.
             */
            if (src->net != BACNET_BROADCAST_NETWORK)
    28b6:	f5 01       	movw	r30, r10
    28b8:	80 85       	ldd	r24, Z+8	; 0x08
    28ba:	91 85       	ldd	r25, Z+9	; 0x09
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	29 f0       	breq	.+10     	; 0x28ca <npdu_decode+0x1a0>
                src->net = 0;
    28c0:	d5 01       	movw	r26, r10
    28c2:	19 96       	adiw	r26, 0x09	; 9
    28c4:	1c 92       	st	X, r1
    28c6:	1e 92       	st	-X, r1
    28c8:	18 97       	sbiw	r26, 0x08	; 8
            src->len = 0;
    28ca:	f5 01       	movw	r30, r10
    28cc:	12 86       	std	Z+10, r1	; 0x0a
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	f5 01       	movw	r30, r10
    28d4:	e8 0f       	add	r30, r24
    28d6:	f9 1f       	adc	r31, r25
            for (i = 0; i < MAX_MAC_LEN; i++) {
                src->adr[i] = 0;
    28d8:	13 86       	std	Z+11, r1	; 0x0b
    28da:	01 96       	adiw	r24, 0x01	; 1
            for (i = 0; i < MAX_MAC_LEN; i++) {
    28dc:	87 30       	cpi	r24, 0x07	; 7
    28de:	91 05       	cpc	r25, r1
    28e0:	c1 f7       	brne	.-16     	; 0x28d2 <npdu_decode+0x1a8>
            }
        }
        /* The Hop Count field shall be present only if the message is */
        /* destined for a remote network, i.e., if DNET is present. */
        /* This is a one-octet field that is initialized to a value of 0xff. */
        if (dest_net) {
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	89 2b       	or	r24, r25
    28e8:	51 f0       	breq	.+20     	; 0x28fe <npdu_decode+0x1d4>
            npdu_data->hop_count = npdu[len++];
    28ea:	f7 01       	movw	r30, r14
    28ec:	e0 0f       	add	r30, r16
    28ee:	f1 1f       	adc	r31, r17
    28f0:	80 81       	ld	r24, Z
    28f2:	d6 01       	movw	r26, r12
    28f4:	19 96       	adiw	r26, 0x09	; 9
    28f6:	8c 93       	st	X, r24
    28f8:	0f 5f       	subi	r16, 0xFF	; 255
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <npdu_decode+0x1d8>
        } else {
            npdu_data->hop_count = 0;
    28fe:	f6 01       	movw	r30, r12
    2900:	11 86       	std	Z+9, r1	; 0x09
        }
        /* Indicates that the NSDU conveys a network layer message. */
        /* Message Type field is present. */
        if (npdu_data->network_layer_message) {
    2902:	d6 01       	movw	r26, r12
    2904:	12 96       	adiw	r26, 0x02	; 2
    2906:	8c 91       	ld	r24, X
    2908:	88 23       	and	r24, r24
    290a:	d1 f0       	breq	.+52     	; 0x2940 <npdu_decode+0x216>
            npdu_data->network_message_type =
                (BACNET_NETWORK_MESSAGE_TYPE) npdu[len++];
    290c:	58 01       	movw	r10, r16
    290e:	bf ef       	ldi	r27, 0xFF	; 255
    2910:	ab 1a       	sub	r10, r27
    2912:	bb 0a       	sbc	r11, r27
    2914:	f7 01       	movw	r30, r14
    2916:	e0 0f       	add	r30, r16
    2918:	f1 1f       	adc	r31, r17
    291a:	80 81       	ld	r24, Z
    291c:	90 e0       	ldi	r25, 0x00	; 0
            npdu_data->network_message_type =
    291e:	f6 01       	movw	r30, r12
    2920:	96 83       	std	Z+6, r25	; 0x06
    2922:	85 83       	std	Z+5, r24	; 0x05
            /* Message Type field contains a value in the range 0x80 - 0xFF, */
            /* then a Vendor ID field shall be present */
            if (npdu_data->network_message_type >= 0x80)
    2924:	80 38       	cpi	r24, 0x80	; 128
    2926:	91 05       	cpc	r25, r1
    2928:	b8 f0       	brcs	.+46     	; 0x2958 <npdu_decode+0x22e>
                len += decode_unsigned16(&npdu[len], &npdu_data->vendor_id);
    292a:	b6 01       	movw	r22, r12
    292c:	69 5f       	subi	r22, 0xF9	; 249
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	c7 01       	movw	r24, r14
    2932:	8a 0d       	add	r24, r10
    2934:	9b 1d       	adc	r25, r11
    2936:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <decode_unsigned16>
    293a:	8a 0d       	add	r24, r10
    293c:	9b 1d       	adc	r25, r11
    293e:	0d c0       	rjmp	.+26     	; 0x295a <npdu_decode+0x230>
        } else {
            /* Since npdu_data->network_layer_message is false,
             * it doesn't much matter what we set here; this is safe: */
            npdu_data->network_message_type = NETWORK_MESSAGE_INVALID;
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	d6 01       	movw	r26, r12
    2946:	16 96       	adiw	r26, 0x06	; 6
    2948:	9c 93       	st	X, r25
    294a:	8e 93       	st	-X, r24
    294c:	15 97       	sbiw	r26, 0x05	; 5
    294e:	c8 01       	movw	r24, r16
    2950:	04 c0       	rjmp	.+8      	; 0x295a <npdu_decode+0x230>
    int len = 0;        /* return value - number of octets loaded in this function */
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	01 c0       	rjmp	.+2      	; 0x295a <npdu_decode+0x230>
                (BACNET_NETWORK_MESSAGE_TYPE) npdu[len++];
    2958:	c5 01       	movw	r24, r10
        }
    }

    return len;
}
    295a:	24 96       	adiw	r28, 0x04	; 4
    295c:	ec e0       	ldi	r30, 0x0C	; 12
    295e:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__epilogue_restores__+0xc>

00002962 <byte_reverse_bits>:
    return encode_tag(&apdu[0], tag_number, true, 0);
}

static uint8_t byte_reverse_bits(
    uint8_t in_byte)
{
    2962:	98 2f       	mov	r25, r24
    uint8_t out_byte = 0;

    if (in_byte & BIT0) {
    2964:	80 fd       	sbrc	r24, 0
    2966:	02 c0       	rjmp	.+4      	; 0x296c <byte_reverse_bits+0xa>
    uint8_t out_byte = 0;
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	01 c0       	rjmp	.+2      	; 0x296e <byte_reverse_bits+0xc>
        out_byte |= BIT7;
    296c:	80 e8       	ldi	r24, 0x80	; 128
    }
    if (in_byte & BIT1) {
    296e:	91 fd       	sbrc	r25, 1
        out_byte |= BIT6;
    2970:	80 64       	ori	r24, 0x40	; 64
    }
    if (in_byte & BIT2) {
    2972:	92 fd       	sbrc	r25, 2
        out_byte |= BIT5;
    2974:	80 62       	ori	r24, 0x20	; 32
    }
    if (in_byte & BIT3) {
    2976:	93 fd       	sbrc	r25, 3
        out_byte |= BIT4;
    2978:	80 61       	ori	r24, 0x10	; 16
    }
    if (in_byte & BIT4) {
    297a:	94 fd       	sbrc	r25, 4
        out_byte |= BIT3;
    297c:	88 60       	ori	r24, 0x08	; 8
    }
    if (in_byte & BIT5) {
    297e:	95 fd       	sbrc	r25, 5
        out_byte |= BIT2;
    2980:	84 60       	ori	r24, 0x04	; 4
    }
    if (in_byte & BIT6) {
    2982:	96 fd       	sbrc	r25, 6
        out_byte |= BIT1;
    2984:	82 60       	ori	r24, 0x02	; 2
    }
    if (in_byte & BIT7) {
    2986:	97 fd       	sbrc	r25, 7
        out_byte |= BIT0;
    2988:	81 60       	ori	r24, 0x01	; 1
    }

    return out_byte;
}
    298a:	08 95       	ret

0000298c <decode_max_segs>:
    switch (octet & 0xF0) {
    298c:	80 7f       	andi	r24, 0xF0	; 240
    298e:	80 34       	cpi	r24, 0x40	; 64
    2990:	b9 f0       	breq	.+46     	; 0x29c0 <decode_max_segs+0x34>
    2992:	38 f4       	brcc	.+14     	; 0x29a2 <decode_max_segs+0x16>
    2994:	80 32       	cpi	r24, 0x20	; 32
    2996:	71 f0       	breq	.+28     	; 0x29b4 <decode_max_segs+0x28>
    2998:	80 33       	cpi	r24, 0x30	; 48
    299a:	79 f0       	breq	.+30     	; 0x29ba <decode_max_segs+0x2e>
    299c:	80 31       	cpi	r24, 0x10	; 16
    299e:	39 f4       	brne	.+14     	; 0x29ae <decode_max_segs+0x22>
    29a0:	1b c0       	rjmp	.+54     	; 0x29d8 <decode_max_segs+0x4c>
    29a2:	80 36       	cpi	r24, 0x60	; 96
    29a4:	99 f0       	breq	.+38     	; 0x29cc <decode_max_segs+0x40>
    29a6:	80 37       	cpi	r24, 0x70	; 112
    29a8:	a1 f0       	breq	.+40     	; 0x29d2 <decode_max_segs+0x46>
    29aa:	80 35       	cpi	r24, 0x50	; 80
    29ac:	61 f0       	breq	.+24     	; 0x29c6 <decode_max_segs+0x3a>
    int max_segs = 0;
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	08 95       	ret
            max_segs = 4;
    29b4:	84 e0       	ldi	r24, 0x04	; 4
    29b6:	90 e0       	ldi	r25, 0x00	; 0
            break;
    29b8:	08 95       	ret
            max_segs = 8;
    29ba:	88 e0       	ldi	r24, 0x08	; 8
    29bc:	90 e0       	ldi	r25, 0x00	; 0
            break;
    29be:	08 95       	ret
            max_segs = 16;
    29c0:	80 e1       	ldi	r24, 0x10	; 16
    29c2:	90 e0       	ldi	r25, 0x00	; 0
            break;
    29c4:	08 95       	ret
            max_segs = 32;
    29c6:	80 e2       	ldi	r24, 0x20	; 32
    29c8:	90 e0       	ldi	r25, 0x00	; 0
            break;
    29ca:	08 95       	ret
            max_segs = 64;
    29cc:	80 e4       	ldi	r24, 0x40	; 64
    29ce:	90 e0       	ldi	r25, 0x00	; 0
            break;
    29d0:	08 95       	ret
            max_segs = 65;
    29d2:	81 e4       	ldi	r24, 0x41	; 65
    29d4:	90 e0       	ldi	r25, 0x00	; 0
            break;
    29d6:	08 95       	ret
            max_segs = 2;
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	90 e0       	ldi	r25, 0x00	; 0
}
    29dc:	08 95       	ret

000029de <decode_max_apdu>:
    switch (octet & 0x0F) {
    29de:	8f 70       	andi	r24, 0x0F	; 15
    29e0:	86 30       	cpi	r24, 0x06	; 6
    29e2:	48 f4       	brcc	.+18     	; 0x29f6 <decode_max_apdu+0x18>
    29e4:	e8 2f       	mov	r30, r24
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	ea 5a       	subi	r30, 0xAA	; 170
    29ee:	fe 4f       	sbci	r31, 0xFE	; 254
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	08 95       	ret
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
}
    29fa:	08 95       	ret

000029fc <encode_tag>:
{
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	fc 01       	movw	r30, r24
    if (context_specific)
    2a06:	41 11       	cpse	r20, r1
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <encode_tag+0x12>
    apdu[0] = 0;
    2a0a:	10 82       	st	Z, r1
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <encode_tag+0x16>
        apdu[0] = BIT3;
    2a0e:	88 e0       	ldi	r24, 0x08	; 8
    2a10:	80 83       	st	Z, r24
    2a12:	80 81       	ld	r24, Z
    if (tag_number <= 14) {
    2a14:	6f 30       	cpi	r22, 0x0F	; 15
    2a16:	48 f4       	brcc	.+18     	; 0x2a2a <encode_tag+0x2e>
        apdu[0] |= (tag_number << 4);
    2a18:	90 e1       	ldi	r25, 0x10	; 16
    2a1a:	69 9f       	mul	r22, r25
    2a1c:	b0 01       	movw	r22, r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	68 2b       	or	r22, r24
    2a22:	60 83       	st	Z, r22
    int len = 1;        /* return value */
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <encode_tag+0x38>
        apdu[0] |= 0xF0;
    2a2a:	80 6f       	ori	r24, 0xF0	; 240
    2a2c:	80 83       	st	Z, r24
        apdu[1] = tag_number;
    2a2e:	61 83       	std	Z+1, r22	; 0x01
        len++;
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	40 81       	ld	r20, Z
    if (len_value_type <= 4) {
    2a36:	05 30       	cpi	r16, 0x05	; 5
    2a38:	11 05       	cpc	r17, r1
    2a3a:	21 05       	cpc	r18, r1
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	18 f4       	brcc	.+6      	; 0x2a46 <encode_tag+0x4a>
        apdu[0] |= len_value_type;
    2a40:	04 2b       	or	r16, r20
    2a42:	00 83       	st	Z, r16
    2a44:	29 c0       	rjmp	.+82     	; 0x2a98 <encode_tag+0x9c>
        apdu[0] |= 5;
    2a46:	45 60       	ori	r20, 0x05	; 5
    2a48:	40 83       	st	Z, r20
    2a4a:	ec 01       	movw	r28, r24
    2a4c:	21 96       	adiw	r28, 0x01	; 1
    2a4e:	df 01       	movw	r26, r30
    2a50:	a8 0f       	add	r26, r24
    2a52:	b9 1f       	adc	r27, r25
        if (len_value_type <= 253) {
    2a54:	0e 3f       	cpi	r16, 0xFE	; 254
    2a56:	11 05       	cpc	r17, r1
    2a58:	21 05       	cpc	r18, r1
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	18 f4       	brcc	.+6      	; 0x2a64 <encode_tag+0x68>
            apdu[len++] = (uint8_t) len_value_type;
    2a5e:	0c 93       	st	X, r16
    2a60:	ce 01       	movw	r24, r28
    2a62:	1a c0       	rjmp	.+52     	; 0x2a98 <encode_tag+0x9c>
        } else if (len_value_type <= 65535) {
    2a64:	01 15       	cp	r16, r1
    2a66:	11 05       	cpc	r17, r1
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	28 07       	cpc	r18, r24
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	48 f4       	brcc	.+18     	; 0x2a82 <encode_tag+0x86>
            apdu[len++] = 254;
    2a70:	8e ef       	ldi	r24, 0xFE	; 254
    2a72:	8c 93       	st	X, r24
            len += encode_unsigned16(&apdu[len], (uint16_t) len_value_type);
    2a74:	b8 01       	movw	r22, r16
    2a76:	cf 01       	movw	r24, r30
    2a78:	8c 0f       	add	r24, r28
    2a7a:	9d 1f       	adc	r25, r29
    2a7c:	0e 94 65 19 	call	0x32ca	; 0x32ca <encode_unsigned16>
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <encode_tag+0x98>
            apdu[len++] = 255;
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	8c 93       	st	X, r24
            len += encode_unsigned32(&apdu[len], len_value_type);
    2a86:	b9 01       	movw	r22, r18
    2a88:	a8 01       	movw	r20, r16
    2a8a:	cf 01       	movw	r24, r30
    2a8c:	8c 0f       	add	r24, r28
    2a8e:	9d 1f       	adc	r25, r29
    2a90:	0e 94 a7 19 	call	0x334e	; 0x334e <encode_unsigned32>
    2a94:	8c 0f       	add	r24, r28
    2a96:	9d 1f       	adc	r25, r29
}
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	08 95       	ret

00002aa2 <encode_opening_tag>:
{
    2aa2:	fc 01       	movw	r30, r24
    apdu[0] = BIT3;
    2aa4:	88 e0       	ldi	r24, 0x08	; 8
    2aa6:	80 83       	st	Z, r24
    if (tag_number <= 14) {
    2aa8:	6f 30       	cpi	r22, 0x0F	; 15
    2aaa:	48 f4       	brcc	.+18     	; 0x2abe <encode_opening_tag+0x1c>
        apdu[0] |= (tag_number << 4);
    2aac:	80 e1       	ldi	r24, 0x10	; 16
    2aae:	68 9f       	mul	r22, r24
    2ab0:	b0 01       	movw	r22, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	68 60       	ori	r22, 0x08	; 8
    2ab6:	60 83       	st	Z, r22
    int len = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <encode_opening_tag+0x26>
        apdu[0] |= 0xF0;
    2abe:	88 ef       	ldi	r24, 0xF8	; 248
    2ac0:	80 83       	st	Z, r24
        apdu[1] = tag_number;
    2ac2:	61 83       	std	Z+1, r22	; 0x01
        len++;
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    apdu[0] |= 6;
    2ac8:	20 81       	ld	r18, Z
    2aca:	26 60       	ori	r18, 0x06	; 6
    2acc:	20 83       	st	Z, r18
}
    2ace:	08 95       	ret

00002ad0 <encode_closing_tag>:
{
    2ad0:	fc 01       	movw	r30, r24
    apdu[0] = BIT3;
    2ad2:	88 e0       	ldi	r24, 0x08	; 8
    2ad4:	80 83       	st	Z, r24
    if (tag_number <= 14) {
    2ad6:	6f 30       	cpi	r22, 0x0F	; 15
    2ad8:	48 f4       	brcc	.+18     	; 0x2aec <encode_closing_tag+0x1c>
        apdu[0] |= (tag_number << 4);
    2ada:	80 e1       	ldi	r24, 0x10	; 16
    2adc:	68 9f       	mul	r22, r24
    2ade:	b0 01       	movw	r22, r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	68 60       	ori	r22, 0x08	; 8
    2ae4:	60 83       	st	Z, r22
    int len = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	05 c0       	rjmp	.+10     	; 0x2af6 <encode_closing_tag+0x26>
        apdu[0] |= 0xF0;
    2aec:	88 ef       	ldi	r24, 0xF8	; 248
    2aee:	80 83       	st	Z, r24
        apdu[1] = tag_number;
    2af0:	61 83       	std	Z+1, r22	; 0x01
        len++;
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    apdu[0] |= 7;
    2af6:	20 81       	ld	r18, Z
    2af8:	27 60       	ori	r18, 0x07	; 7
    2afa:	20 83       	st	Z, r18
}
    2afc:	08 95       	ret

00002afe <decode_tag_number>:
    if (IS_EXTENDED_TAG_NUMBER(apdu[0])) {
    2afe:	fc 01       	movw	r30, r24
    2b00:	20 81       	ld	r18, Z
    2b02:	32 2f       	mov	r19, r18
    2b04:	30 7f       	andi	r19, 0xF0	; 240
    2b06:	30 3f       	cpi	r19, 0xF0	; 240
    2b08:	39 f4       	brne	.+14     	; 0x2b18 <decode_tag_number+0x1a>
        if (tag_number) {
    2b0a:	61 15       	cp	r22, r1
    2b0c:	71 05       	cpc	r23, r1
    2b0e:	61 f0       	breq	.+24     	; 0x2b28 <decode_tag_number+0x2a>
            *tag_number = apdu[1];
    2b10:	81 81       	ldd	r24, Z+1	; 0x01
    2b12:	fb 01       	movw	r30, r22
    2b14:	80 83       	st	Z, r24
    2b16:	08 c0       	rjmp	.+16     	; 0x2b28 <decode_tag_number+0x2a>
        if (tag_number) {
    2b18:	61 15       	cp	r22, r1
    2b1a:	71 05       	cpc	r23, r1
    2b1c:	41 f0       	breq	.+16     	; 0x2b2e <decode_tag_number+0x30>
            *tag_number = (uint8_t) (apdu[0] >> 4);
    2b1e:	22 95       	swap	r18
    2b20:	2f 70       	andi	r18, 0x0F	; 15
    2b22:	fb 01       	movw	r30, r22
    2b24:	20 83       	st	Z, r18
    2b26:	03 c0       	rjmp	.+6      	; 0x2b2e <decode_tag_number+0x30>
        len++;
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	08 95       	ret
    int len = 1;        /* return value */
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
}
    2b32:	08 95       	ret

00002b34 <decode_tag_number_and_value>:
{
    2b34:	a4 e0       	ldi	r26, 0x04	; 4
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e0 ea       	ldi	r30, 0xA0	; 160
    2b3a:	f5 e1       	ldi	r31, 0x15	; 21
    2b3c:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    2b40:	6c 01       	movw	r12, r24
    2b42:	7a 01       	movw	r14, r20
    len = decode_tag_number(&apdu[0], tag_number);
    2b44:	0e 94 7f 15 	call	0x2afe	; 0x2afe <decode_tag_number>
    if (IS_EXTENDED_VALUE(apdu[0])) {
    2b48:	f6 01       	movw	r30, r12
    2b4a:	00 81       	ld	r16, Z
    2b4c:	07 70       	andi	r16, 0x07	; 7
    2b4e:	05 30       	cpi	r16, 0x05	; 5
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <decode_tag_number_and_value+0x20>
    2b52:	42 c0       	rjmp	.+132    	; 0x2bd8 <decode_tag_number_and_value+0xa4>
        if (apdu[len] == 255) {
    2b54:	e8 0f       	add	r30, r24
    2b56:	f9 1f       	adc	r31, r25
    2b58:	00 81       	ld	r16, Z
    2b5a:	9c 01       	movw	r18, r24
    2b5c:	2f 5f       	subi	r18, 0xFF	; 255
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	59 01       	movw	r10, r18
    2b62:	0f 3f       	cpi	r16, 0xFF	; 255
    2b64:	99 f4       	brne	.+38     	; 0x2b8c <decode_tag_number_and_value+0x58>
            len += decode_unsigned32(&apdu[len], &value32);
    2b66:	be 01       	movw	r22, r28
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	c6 01       	movw	r24, r12
    2b6e:	82 0f       	add	r24, r18
    2b70:	93 1f       	adc	r25, r19
    2b72:	0e 94 af 19 	call	0x335e	; 0x335e <decode_unsigned32>
    2b76:	8a 0d       	add	r24, r10
    2b78:	9b 1d       	adc	r25, r11
            if (value) {
    2b7a:	e1 14       	cp	r14, r1
    2b7c:	f1 04       	cpc	r15, r1
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <decode_tag_number_and_value+0x4e>
    2b80:	43 c0       	rjmp	.+134    	; 0x2c08 <decode_tag_number_and_value+0xd4>
                *value = value32;
    2b82:	49 81       	ldd	r20, Y+1	; 0x01
    2b84:	5a 81       	ldd	r21, Y+2	; 0x02
    2b86:	6b 81       	ldd	r22, Y+3	; 0x03
    2b88:	7c 81       	ldd	r23, Y+4	; 0x04
    2b8a:	13 c0       	rjmp	.+38     	; 0x2bb2 <decode_tag_number_and_value+0x7e>
        else if (apdu[len] == 254) {
    2b8c:	0e 3f       	cpi	r16, 0xFE	; 254
    2b8e:	b9 f4       	brne	.+46     	; 0x2bbe <decode_tag_number_and_value+0x8a>
            len += decode_unsigned16(&apdu[len], &value16);
    2b90:	be 01       	movw	r22, r28
    2b92:	6f 5f       	subi	r22, 0xFF	; 255
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	c6 01       	movw	r24, r12
    2b98:	82 0f       	add	r24, r18
    2b9a:	93 1f       	adc	r25, r19
    2b9c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <decode_unsigned16>
    2ba0:	8a 0d       	add	r24, r10
    2ba2:	9b 1d       	adc	r25, r11
            if (value) {
    2ba4:	e1 14       	cp	r14, r1
    2ba6:	f1 04       	cpc	r15, r1
    2ba8:	79 f1       	breq	.+94     	; 0x2c08 <decode_tag_number_and_value+0xd4>
                *value = value16;
    2baa:	49 81       	ldd	r20, Y+1	; 0x01
    2bac:	5a 81       	ldd	r21, Y+2	; 0x02
    2bae:	60 e0       	ldi	r22, 0x00	; 0
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	f7 01       	movw	r30, r14
    2bb4:	40 83       	st	Z, r20
    2bb6:	51 83       	std	Z+1, r21	; 0x01
    2bb8:	62 83       	std	Z+2, r22	; 0x02
    2bba:	73 83       	std	Z+3, r23	; 0x03
    2bbc:	25 c0       	rjmp	.+74     	; 0x2c08 <decode_tag_number_and_value+0xd4>
            if (value) {
    2bbe:	e1 14       	cp	r14, r1
    2bc0:	f1 04       	cpc	r15, r1
    2bc2:	41 f0       	breq	.+16     	; 0x2bd4 <decode_tag_number_and_value+0xa0>
                *value = apdu[len];
    2bc4:	10 e0       	ldi	r17, 0x00	; 0
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	f7 01       	movw	r30, r14
    2bcc:	00 83       	st	Z, r16
    2bce:	11 83       	std	Z+1, r17	; 0x01
    2bd0:	22 83       	std	Z+2, r18	; 0x02
    2bd2:	33 83       	std	Z+3, r19	; 0x03
            len++;
    2bd4:	c5 01       	movw	r24, r10
    2bd6:	18 c0       	rjmp	.+48     	; 0x2c08 <decode_tag_number_and_value+0xd4>
    } else if (IS_OPENING_TAG(apdu[0]) && value) {
    2bd8:	06 30       	cpi	r16, 0x06	; 6
    2bda:	11 f0       	breq	.+4      	; 0x2be0 <decode_tag_number_and_value+0xac>
    } else if (IS_CLOSING_TAG(apdu[0]) && value) {
    2bdc:	07 30       	cpi	r16, 0x07	; 7
    2bde:	49 f4       	brne	.+18     	; 0x2bf2 <decode_tag_number_and_value+0xbe>
    2be0:	e1 14       	cp	r14, r1
    2be2:	f1 04       	cpc	r15, r1
    2be4:	89 f0       	breq	.+34     	; 0x2c08 <decode_tag_number_and_value+0xd4>
        *value = 0;
    2be6:	f7 01       	movw	r30, r14
    2be8:	10 82       	st	Z, r1
    2bea:	11 82       	std	Z+1, r1	; 0x01
    2bec:	12 82       	std	Z+2, r1	; 0x02
    2bee:	13 82       	std	Z+3, r1	; 0x03
    2bf0:	0b c0       	rjmp	.+22     	; 0x2c08 <decode_tag_number_and_value+0xd4>
    } else if (value) {
    2bf2:	e1 14       	cp	r14, r1
    2bf4:	f1 04       	cpc	r15, r1
    2bf6:	41 f0       	breq	.+16     	; 0x2c08 <decode_tag_number_and_value+0xd4>
        *value = apdu[0] & 0x07;
    2bf8:	10 e0       	ldi	r17, 0x00	; 0
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	f7 01       	movw	r30, r14
    2c00:	00 83       	st	Z, r16
    2c02:	11 83       	std	Z+1, r17	; 0x01
    2c04:	22 83       	std	Z+2, r18	; 0x02
    2c06:	33 83       	std	Z+3, r19	; 0x03
}
    2c08:	24 96       	adiw	r28, 0x04	; 4
    2c0a:	ea e0       	ldi	r30, 0x0A	; 10
    2c0c:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00002c10 <decode_is_context_tag>:
{
    2c10:	a1 e0       	ldi	r26, 0x01	; 1
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ee e0       	ldi	r30, 0x0E	; 14
    2c16:	f6 e1       	ldi	r31, 0x16	; 22
    2c18:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__prologue_saves__+0x1a>
    2c1c:	8c 01       	movw	r16, r24
    2c1e:	f6 2e       	mov	r15, r22
    uint8_t my_tag_number = 0;
    2c20:	19 82       	std	Y+1, r1	; 0x01
    decode_tag_number(apdu, &my_tag_number);
    2c22:	be 01       	movw	r22, r28
    2c24:	6f 5f       	subi	r22, 0xFF	; 255
    2c26:	7f 4f       	sbci	r23, 0xFF	; 255
    2c28:	0e 94 7f 15 	call	0x2afe	; 0x2afe <decode_tag_number>
    return (bool) (IS_CONTEXT_SPECIFIC(*apdu) &&
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	80 81       	ld	r24, Z
    2c30:	83 ff       	sbrs	r24, 3
    2c32:	03 c0       	rjmp	.+6      	; 0x2c3a <decode_is_context_tag+0x2a>
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	99 81       	ldd	r25, Y+1	; 0x01
    2c38:	9f 11       	cpse	r25, r15
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c3c:	81 70       	andi	r24, 0x01	; 1
    2c3e:	21 96       	adiw	r28, 0x01	; 1
    2c40:	e5 e0       	ldi	r30, 0x05	; 5
    2c42:	0c 94 78 20 	jmp	0x40f0	; 0x40f0 <__epilogue_restores__+0x1a>

00002c46 <decode_is_opening_tag_number>:
{
    2c46:	a1 e0       	ldi	r26, 0x01	; 1
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e9 e2       	ldi	r30, 0x29	; 41
    2c4c:	f6 e1       	ldi	r31, 0x16	; 22
    2c4e:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__prologue_saves__+0x1a>
    2c52:	8c 01       	movw	r16, r24
    2c54:	f6 2e       	mov	r15, r22
    uint8_t my_tag_number = 0;
    2c56:	19 82       	std	Y+1, r1	; 0x01
    decode_tag_number(apdu, &my_tag_number);
    2c58:	be 01       	movw	r22, r28
    2c5a:	6f 5f       	subi	r22, 0xFF	; 255
    2c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <decode_tag_number>
    return (bool) (IS_OPENING_TAG(apdu[0]) && (my_tag_number == tag_number));
    2c62:	f8 01       	movw	r30, r16
    2c64:	80 81       	ld	r24, Z
    2c66:	87 70       	andi	r24, 0x07	; 7
    2c68:	86 30       	cpi	r24, 0x06	; 6
    2c6a:	19 f4       	brne	.+6      	; 0x2c72 <decode_is_opening_tag_number+0x2c>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	99 81       	ldd	r25, Y+1	; 0x01
    2c70:	9f 11       	cpse	r25, r15
    2c72:	80 e0       	ldi	r24, 0x00	; 0
}
    2c74:	81 70       	andi	r24, 0x01	; 1
    2c76:	21 96       	adiw	r28, 0x01	; 1
    2c78:	e5 e0       	ldi	r30, 0x05	; 5
    2c7a:	0c 94 78 20 	jmp	0x40f0	; 0x40f0 <__epilogue_restores__+0x1a>

00002c7e <decode_is_closing_tag_number>:
{
    2c7e:	a1 e0       	ldi	r26, 0x01	; 1
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e5 e4       	ldi	r30, 0x45	; 69
    2c84:	f6 e1       	ldi	r31, 0x16	; 22
    2c86:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__prologue_saves__+0x1a>
    2c8a:	8c 01       	movw	r16, r24
    2c8c:	f6 2e       	mov	r15, r22
    uint8_t my_tag_number = 0;
    2c8e:	19 82       	std	Y+1, r1	; 0x01
    decode_tag_number(apdu, &my_tag_number);
    2c90:	be 01       	movw	r22, r28
    2c92:	6f 5f       	subi	r22, 0xFF	; 255
    2c94:	7f 4f       	sbci	r23, 0xFF	; 255
    2c96:	0e 94 7f 15 	call	0x2afe	; 0x2afe <decode_tag_number>
    return (bool) (IS_CLOSING_TAG(apdu[0]) && (my_tag_number == tag_number));
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	80 81       	ld	r24, Z
    2c9e:	87 70       	andi	r24, 0x07	; 7
    2ca0:	87 30       	cpi	r24, 0x07	; 7
    2ca2:	19 f4       	brne	.+6      	; 0x2caa <decode_is_closing_tag_number+0x2c>
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	99 81       	ldd	r25, Y+1	; 0x01
    2ca8:	9f 11       	cpse	r25, r15
    2caa:	80 e0       	ldi	r24, 0x00	; 0
}
    2cac:	81 70       	andi	r24, 0x01	; 1
    2cae:	21 96       	adiw	r28, 0x01	; 1
    2cb0:	e5 e0       	ldi	r30, 0x05	; 5
    2cb2:	0c 94 78 20 	jmp	0x40f0	; 0x40f0 <__epilogue_restores__+0x1a>

00002cb6 <encode_application_boolean>:
{
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    uint32_t len_value = 0;
    2cba:	06 2f       	mov	r16, r22
    2cbc:	10 e0       	ldi	r17, 0x00	; 0
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    len =
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	61 e0       	ldi	r22, 0x01	; 1
    2cc6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
}
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	08 95       	ret

00002cd0 <encode_bitstring>:
/* from clause 20.2.10 Encoding of a Bit String Value */
/* returns the number of apdu bytes consumed */
int encode_bitstring(
    uint8_t * apdu,
    BACNET_BIT_STRING * bit_string)
{
    2cd0:	a0 e0       	ldi	r26, 0x00	; 0
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	ee e6       	ldi	r30, 0x6E	; 110
    2cd6:	f6 e1       	ldi	r31, 0x16	; 22
    2cd8:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    2cdc:	8c 01       	movw	r16, r24
    2cde:	eb 01       	movw	r28, r22
    uint8_t remaining_used_bits = 0;
    uint8_t used_bytes = 0;
    uint8_t i = 0;

    /* if the bit string is empty, then the first octet shall be zero */
    if (bitstring_bits_used(bit_string) == 0) {
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	0e 94 38 1a 	call	0x3470	; 0x3470 <bitstring_bits_used>
    2ce6:	81 11       	cpse	r24, r1
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <encode_bitstring+0x24>
        apdu[len++] = 0;
    2cea:	f8 01       	movw	r30, r16
    2cec:	10 82       	st	Z, r1
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	21 c0       	rjmp	.+66     	; 0x2d36 <encode_bitstring+0x66>
    } else {
        used_bytes = bitstring_bytes_used(bit_string);
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	0e 94 3b 1a 	call	0x3476	; 0x3476 <bitstring_bytes_used>
    2cfa:	c8 2e       	mov	r12, r24
        remaining_used_bits =
            (uint8_t) (bitstring_bits_used(bit_string) - ((used_bytes -
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	0e 94 38 1a 	call	0x3470	; 0x3470 <bitstring_bits_used>
    2d02:	ec 2c       	mov	r14, r12
    2d04:	f1 2c       	mov	r15, r1
                    1) * 8));
        /* number of unused bits in the subsequent final octet */
        apdu[len++] = (uint8_t) (8 - remaining_used_bits);
    2d06:	9c 2d       	mov	r25, r12
    2d08:	99 0f       	add	r25, r25
    2d0a:	99 0f       	add	r25, r25
    2d0c:	99 0f       	add	r25, r25
    2d0e:	98 1b       	sub	r25, r24
    2d10:	f8 01       	movw	r30, r16
    2d12:	91 93       	st	Z+, r25
    2d14:	8f 01       	movw	r16, r30
        for (i = 0; i < used_bytes; i++) {
    2d16:	d1 2c       	mov	r13, r1
    2d18:	dc 14       	cp	r13, r12
    2d1a:	59 f0       	breq	.+22     	; 0x2d32 <encode_bitstring+0x62>
            apdu[len++] = byte_reverse_bits(bitstring_octet(bit_string, i));
    2d1c:	6d 2d       	mov	r22, r13
    2d1e:	ce 01       	movw	r24, r28
    2d20:	0e 94 47 1a 	call	0x348e	; 0x348e <bitstring_octet>
    2d24:	0e 94 b1 14 	call	0x2962	; 0x2962 <byte_reverse_bits>
    2d28:	f8 01       	movw	r30, r16
    2d2a:	81 93       	st	Z+, r24
    2d2c:	8f 01       	movw	r16, r30
        for (i = 0; i < used_bytes; i++) {
    2d2e:	d3 94       	inc	r13
    2d30:	f3 cf       	rjmp	.-26     	; 0x2d18 <encode_bitstring+0x48>
    2d32:	c7 01       	movw	r24, r14
    2d34:	01 96       	adiw	r24, 0x01	; 1
        }
    }

    return len;
}
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	e8 e0       	ldi	r30, 0x08	; 8
    2d3c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00002d40 <encode_application_bitstring>:

int encode_application_bitstring(
    uint8_t * apdu,
    BACNET_BIT_STRING * bit_string)
{
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	ec 01       	movw	r28, r24
    2d4e:	7b 01       	movw	r14, r22
    int len = 0;
    uint32_t bit_string_encoded_length = 1;     /* 1 for the bits remaining octet */

    /* bit string may use more than 1 octet for the tag, so find out how many */
    bit_string_encoded_length += bitstring_bytes_used(bit_string);
    2d50:	cb 01       	movw	r24, r22
    2d52:	0e 94 3b 1a 	call	0x3476	; 0x3476 <bitstring_bytes_used>
    2d56:	08 2f       	mov	r16, r24
    2d58:	10 e0       	ldi	r17, 0x00	; 0
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	0f 5f       	subi	r16, 0xFF	; 255
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	2f 4f       	sbci	r18, 0xFF	; 255
    2d64:	3f 4f       	sbci	r19, 0xFF	; 255
    len =
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	68 e0       	ldi	r22, 0x08	; 8
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
    2d70:	8c 01       	movw	r16, r24
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_BIT_STRING, false,
        bit_string_encoded_length);
    len += encode_bitstring(&apdu[len], bit_string);
    2d72:	b7 01       	movw	r22, r14
    2d74:	ce 01       	movw	r24, r28
    2d76:	80 0f       	add	r24, r16
    2d78:	91 1f       	adc	r25, r17
    2d7a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <encode_bitstring>

    return len;
}
    2d7e:	80 0f       	add	r24, r16
    2d80:	91 1f       	adc	r25, r17
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	e6 e0       	ldi	r30, 0x06	; 6
    2d88:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

00002d8c <decode_object_id>:
/* returns the number of apdu bytes consumed */
int decode_object_id(
    uint8_t * apdu,
    uint16_t * object_type,
    uint32_t * instance)
{
    2d8c:	a4 e0       	ldi	r26, 0x04	; 4
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	ec ec       	ldi	r30, 0xCC	; 204
    2d92:	f6 e1       	ldi	r31, 0x16	; 22
    2d94:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    2d98:	6b 01       	movw	r12, r22
    2d9a:	7a 01       	movw	r14, r20
    uint32_t value = 0;
    2d9c:	19 82       	std	Y+1, r1	; 0x01
    2d9e:	1a 82       	std	Y+2, r1	; 0x02
    2da0:	1b 82       	std	Y+3, r1	; 0x03
    2da2:	1c 82       	std	Y+4, r1	; 0x04
    int len = 0;

    len = decode_unsigned32(apdu, &value);
    2da4:	be 01       	movw	r22, r28
    2da6:	6f 5f       	subi	r22, 0xFF	; 255
    2da8:	7f 4f       	sbci	r23, 0xFF	; 255
    2daa:	0e 94 af 19 	call	0x335e	; 0x335e <decode_unsigned32>
    *object_type =
        (uint16_t) (((value >> BACNET_INSTANCE_BITS) & BACNET_MAX_OBJECT));
    2dae:	09 81       	ldd	r16, Y+1	; 0x01
    2db0:	1a 81       	ldd	r17, Y+2	; 0x02
    2db2:	2b 81       	ldd	r18, Y+3	; 0x03
    2db4:	3c 81       	ldd	r19, Y+4	; 0x04
    2db6:	b9 01       	movw	r22, r18
    2db8:	a8 01       	movw	r20, r16
    2dba:	e6 e1       	ldi	r30, 0x16	; 22
    2dbc:	76 95       	lsr	r23
    2dbe:	67 95       	ror	r22
    2dc0:	57 95       	ror	r21
    2dc2:	47 95       	ror	r20
    2dc4:	ea 95       	dec	r30
    2dc6:	d1 f7       	brne	.-12     	; 0x2dbc <decode_object_id+0x30>
    2dc8:	53 70       	andi	r21, 0x03	; 3
    *object_type =
    2dca:	f6 01       	movw	r30, r12
    2dcc:	51 83       	std	Z+1, r21	; 0x01
    2dce:	40 83       	st	Z, r20
    *instance = (value & BACNET_MAX_INSTANCE);
    2dd0:	2f 73       	andi	r18, 0x3F	; 63
    2dd2:	33 27       	eor	r19, r19
    2dd4:	f7 01       	movw	r30, r14
    2dd6:	00 83       	st	Z, r16
    2dd8:	11 83       	std	Z+1, r17	; 0x01
    2dda:	22 83       	std	Z+2, r18	; 0x02
    2ddc:	33 83       	std	Z+3, r19	; 0x03

    return len;
}
    2dde:	24 96       	adiw	r28, 0x04	; 4
    2de0:	e8 e0       	ldi	r30, 0x08	; 8
    2de2:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00002de6 <decode_object_id_safe>:
int decode_object_id_safe(
    uint8_t * apdu,
    uint32_t len_value,
    uint16_t * object_type,
    uint32_t * instance)
{
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    if (len_value != 4) {
    2dea:	44 30       	cpi	r20, 0x04	; 4
    2dec:	51 05       	cpc	r21, r1
    2dee:	61 05       	cpc	r22, r1
    2df0:	71 05       	cpc	r23, r1
    2df2:	29 f4       	brne	.+10     	; 0x2dfe <decode_object_id_safe+0x18>
        return 0;
    } else {
        return decode_object_id(apdu, object_type, instance);
    2df4:	a8 01       	movw	r20, r16
    2df6:	b9 01       	movw	r22, r18
    2df8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <decode_object_id>
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <decode_object_id_safe+0x1c>
        return 0;
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	08 95       	ret

00002e08 <encode_bacnet_object_id>:
/* returns the number of apdu bytes consumed */
int encode_bacnet_object_id(
    uint8_t * apdu,
    int object_type,
    uint32_t instance)
{
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	89 01       	movw	r16, r18
    2e0e:	9a 01       	movw	r18, r20
    uint32_t value = 0;
    uint32_t type = 0;
    int len = 0;

    type = (uint32_t) object_type;
    2e10:	ab 01       	movw	r20, r22
    2e12:	66 27       	eor	r22, r22
    2e14:	57 fd       	sbrc	r21, 7
    2e16:	60 95       	com	r22
    2e18:	76 2f       	mov	r23, r22
    value =
        ((type & BACNET_MAX_OBJECT) << BACNET_INSTANCE_BITS) | (instance &
    2e1a:	f6 e1       	ldi	r31, 0x16	; 22
    2e1c:	44 0f       	add	r20, r20
    2e1e:	55 1f       	adc	r21, r21
    2e20:	66 1f       	adc	r22, r22
    2e22:	77 1f       	adc	r23, r23
    2e24:	fa 95       	dec	r31
    2e26:	d1 f7       	brne	.-12     	; 0x2e1c <encode_bacnet_object_id+0x14>
    2e28:	2f 73       	andi	r18, 0x3F	; 63
    2e2a:	33 27       	eor	r19, r19
    value =
    2e2c:	40 2b       	or	r20, r16
    2e2e:	51 2b       	or	r21, r17
    2e30:	62 2b       	or	r22, r18
    2e32:	73 2b       	or	r23, r19
        BACNET_MAX_INSTANCE);
    len = encode_unsigned32(apdu, value);
    2e34:	0e 94 a7 19 	call	0x334e	; 0x334e <encode_unsigned32>

    return len;
}
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	08 95       	ret

00002e3e <encode_context_object_id>:
int encode_context_object_id(
    uint8_t * apdu,
    uint8_t tag_number,
    int object_type,
    uint32_t instance)
{
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e5 e2       	ldi	r30, 0x25	; 37
    2e44:	f7 e1       	ldi	r31, 0x17	; 23
    2e46:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    2e4a:	ec 01       	movw	r28, r24
    2e4c:	5a 01       	movw	r10, r20
    2e4e:	68 01       	movw	r12, r16
    2e50:	79 01       	movw	r14, r18
    int len = 0;

    /* length of object id is 4 octets, as per 20.2.14 */

    len = encode_tag(&apdu[0], tag_number, true, 4);
    2e52:	04 e0       	ldi	r16, 0x04	; 4
    2e54:	10 e0       	ldi	r17, 0x00	; 0
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	41 e0       	ldi	r20, 0x01	; 1
    2e5c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
    2e60:	8c 01       	movw	r16, r24
    len += encode_bacnet_object_id(&apdu[len], object_type, instance);
    2e62:	a7 01       	movw	r20, r14
    2e64:	96 01       	movw	r18, r12
    2e66:	b5 01       	movw	r22, r10
    2e68:	ce 01       	movw	r24, r28
    2e6a:	80 0f       	add	r24, r16
    2e6c:	91 1f       	adc	r25, r17
    2e6e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <encode_bacnet_object_id>

    return len;
}
    2e72:	80 0f       	add	r24, r16
    2e74:	91 1f       	adc	r25, r17
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	ea e0       	ldi	r30, 0x0A	; 10
    2e7c:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00002e80 <encode_application_object_id>:
/* returns the number of apdu bytes consumed */
int encode_application_object_id(
    uint8_t * apdu,
    int object_type,
    uint32_t instance)
{
    2e80:	ef 92       	push	r14
    2e82:	ff 92       	push	r15
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	ec 01       	movw	r28, r24
    int len = 0;

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_object_id(&apdu[1], object_type, instance);
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0e 94 04 17 	call	0x2e08	; 0x2e08 <encode_bacnet_object_id>
    2e94:	7c 01       	movw	r14, r24
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_OBJECT_ID, false,
    2e96:	8c 01       	movw	r16, r24
    2e98:	22 27       	eor	r18, r18
    2e9a:	17 fd       	sbrc	r17, 7
    2e9c:	20 95       	com	r18
    2e9e:	32 2f       	mov	r19, r18
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	6c e0       	ldi	r22, 0x0C	; 12
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
        (uint32_t) len);

    return len;
}
    2eaa:	8e 0d       	add	r24, r14
    2eac:	9f 1d       	adc	r25, r15
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	e6 e0       	ldi	r30, 0x06	; 6
    2eb4:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

00002eb8 <encode_bacnet_character_string_safe>:
    uint8_t * apdu,
    uint32_t max_apdu,
    uint8_t encoding,
    char *pString,
    uint32_t length)
{
    2eb8:	8f 92       	push	r8
    2eba:	9f 92       	push	r9
    2ebc:	af 92       	push	r10
    2ebe:	bf 92       	push	r11
    2ec0:	cf 92       	push	r12
    2ec2:	df 92       	push	r13
    2ec4:	ef 92       	push	r14
    2ec6:	ff 92       	push	r15
    2ec8:	0f 93       	push	r16
    2eca:	1f 93       	push	r17
    2ecc:	dc 01       	movw	r26, r24
    2ece:	4a 01       	movw	r8, r20
    2ed0:	5b 01       	movw	r10, r22
    uint32_t apdu_len = 1 /*encoding */ ;
    uint32_t i;

    apdu_len += length;
    2ed2:	c7 01       	movw	r24, r14
    2ed4:	b6 01       	movw	r22, r12
    2ed6:	6f 5f       	subi	r22, 0xFF	; 255
    2ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eda:	8f 4f       	sbci	r24, 0xFF	; 255
    2edc:	9f 4f       	sbci	r25, 0xFF	; 255
    if (apdu && (apdu_len <= max_apdu)) {
    2ede:	10 97       	sbiw	r26, 0x00	; 0
    2ee0:	b1 f0       	breq	.+44     	; 0x2f0e <encode_bacnet_character_string_safe+0x56>
    2ee2:	86 16       	cp	r8, r22
    2ee4:	97 06       	cpc	r9, r23
    2ee6:	a8 06       	cpc	r10, r24
    2ee8:	b9 06       	cpc	r11, r25
    2eea:	88 f0       	brcs	.+34     	; 0x2f0e <encode_bacnet_character_string_safe+0x56>
        apdu[0] = encoding;
    2eec:	2d 93       	st	X+, r18
    2eee:	f8 01       	movw	r30, r16
        for (i = 0; i < length; i++) {
    2ef0:	00 e0       	ldi	r16, 0x00	; 0
    2ef2:	10 e0       	ldi	r17, 0x00	; 0
    2ef4:	98 01       	movw	r18, r16
    2ef6:	0c 15       	cp	r16, r12
    2ef8:	1d 05       	cpc	r17, r13
    2efa:	2e 05       	cpc	r18, r14
    2efc:	3f 05       	cpc	r19, r15
    2efe:	51 f0       	breq	.+20     	; 0x2f14 <encode_bacnet_character_string_safe+0x5c>
            apdu[1 + i] = (uint8_t) pString[i];
    2f00:	41 91       	ld	r20, Z+
    2f02:	4d 93       	st	X+, r20
        for (i = 0; i < length; i++) {
    2f04:	0f 5f       	subi	r16, 0xFF	; 255
    2f06:	1f 4f       	sbci	r17, 0xFF	; 255
    2f08:	2f 4f       	sbci	r18, 0xFF	; 255
    2f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0c:	f4 cf       	rjmp	.-24     	; 0x2ef6 <encode_bacnet_character_string_safe+0x3e>
        }
    } else {
        apdu_len = 0;
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	70 e0       	ldi	r23, 0x00	; 0
    2f12:	cb 01       	movw	r24, r22
    }

    return apdu_len;
}
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	bf 90       	pop	r11
    2f22:	af 90       	pop	r10
    2f24:	9f 90       	pop	r9
    2f26:	8f 90       	pop	r8
    2f28:	08 95       	ret

00002f2a <encode_bacnet_character_string>:

int encode_bacnet_character_string(
    uint8_t * apdu,
    BACNET_CHARACTER_STRING * char_string)
{
    2f2a:	a0 e0       	ldi	r26, 0x00	; 0
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	eb e9       	ldi	r30, 0x9B	; 155
    2f30:	f7 e1       	ldi	r31, 0x17	; 23
    2f32:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    2f36:	ec 01       	movw	r28, r24
    2f38:	7b 01       	movw	r14, r22
    return (int) encode_bacnet_character_string_safe(apdu, MAX_APDU,
        characterstring_encoding(char_string),
        characterstring_value(char_string),
        characterstring_length(char_string));
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <characterstring_length>
    2f40:	6c 01       	movw	r12, r24
    return (int) encode_bacnet_character_string_safe(apdu, MAX_APDU,
    2f42:	c7 01       	movw	r24, r14
    2f44:	0e 94 c9 1a 	call	0x3592	; 0x3592 <characterstring_value>
    2f48:	8c 01       	movw	r16, r24
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <characterstring_encoding>
    2f50:	e1 2c       	mov	r14, r1
    2f52:	f1 2c       	mov	r15, r1
    2f54:	28 2f       	mov	r18, r24
    2f56:	42 e3       	ldi	r20, 0x32	; 50
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	ce 01       	movw	r24, r28
    2f60:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <encode_bacnet_character_string_safe>
}
    2f64:	cb 01       	movw	r24, r22
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	e8 e0       	ldi	r30, 0x08	; 8
    2f6c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00002f70 <encode_application_character_string>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_character_string(
    uint8_t * apdu,
    BACNET_CHARACTER_STRING * char_string)
{
    2f70:	a0 e0       	ldi	r26, 0x00	; 0
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	ee eb       	ldi	r30, 0xBE	; 190
    2f76:	f7 e1       	ldi	r31, 0x17	; 23
    2f78:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    2f7c:	ec 01       	movw	r28, r24
    2f7e:	7b 01       	movw	r14, r22
    int len = 0;
    int string_len = 0;

    string_len =
        (int) characterstring_length(char_string) + 1 /* for encoding */ ;
    2f80:	cb 01       	movw	r24, r22
    2f82:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <characterstring_length>
    string_len =
    2f86:	01 96       	adiw	r24, 0x01	; 1
    2f88:	6c 01       	movw	r12, r24
    len =
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_CHARACTER_STRING, false,
    2f8a:	8c 01       	movw	r16, r24
    2f8c:	22 27       	eor	r18, r18
    2f8e:	17 fd       	sbrc	r17, 7
    2f90:	20 95       	com	r18
    2f92:	32 2f       	mov	r19, r18
    len =
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	67 e0       	ldi	r22, 0x07	; 7
    2f98:	ce 01       	movw	r24, r28
    2f9a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
    2f9e:	8c 01       	movw	r16, r24
        (uint32_t) string_len);
    if ((len + string_len) < MAX_APDU) {
    2fa0:	c8 0e       	add	r12, r24
    2fa2:	d9 1e       	adc	r13, r25
    2fa4:	82 e3       	ldi	r24, 0x32	; 50
    2fa6:	c8 16       	cp	r12, r24
    2fa8:	d1 04       	cpc	r13, r1
    2faa:	4c f4       	brge	.+18     	; 0x2fbe <encode_application_character_string+0x4e>
        len += encode_bacnet_character_string(&apdu[len], char_string);
    2fac:	b7 01       	movw	r22, r14
    2fae:	ce 01       	movw	r24, r28
    2fb0:	80 0f       	add	r24, r16
    2fb2:	91 1f       	adc	r25, r17
    2fb4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <encode_bacnet_character_string>
    2fb8:	80 0f       	add	r24, r16
    2fba:	91 1f       	adc	r25, r17
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <encode_application_character_string+0x52>
    } else {
        len = 0;
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    }

    return len;
}
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	e8 e0       	ldi	r30, 0x08	; 8
    2fc8:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00002fcc <decode_character_string>:
/* returns the number of apdu bytes consumed */
int decode_character_string(
    uint8_t * apdu,
    uint32_t len_value,
    BACNET_CHARACTER_STRING * char_string)
{
    2fcc:	cf 92       	push	r12
    2fce:	df 92       	push	r13
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	6a 01       	movw	r12, r20
    2fd8:	7b 01       	movw	r14, r22
    2fda:	c9 01       	movw	r24, r18
    int len = 0;        /* return value */
    bool status = false;

    status =
        characterstring_init(char_string, apdu[0], (char *) &apdu[1],
    2fdc:	9a 01       	movw	r18, r20
    2fde:	21 50       	subi	r18, 0x01	; 1
    2fe0:	31 09       	sbc	r19, r1
    2fe2:	af 01       	movw	r20, r30
    2fe4:	4f 5f       	subi	r20, 0xFF	; 255
    2fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    status =
    2fe8:	60 81       	ld	r22, Z
    2fea:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <characterstring_init>
        len_value - 1);
    if (status) {
    2fee:	88 23       	and	r24, r24
    2ff0:	11 f0       	breq	.+4      	; 0x2ff6 <decode_character_string+0x2a>
        len = (int) len_value;
    2ff2:	c6 01       	movw	r24, r12
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <decode_character_string+0x2e>
    int len = 0;        /* return value */
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    }

    return len;
}
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	08 95       	ret

00003004 <decode_unsigned>:
/* returns the number of apdu bytes consumed */
int decode_unsigned(
    uint8_t * apdu,
    uint32_t len_value,
    uint32_t * value)
{
    3004:	a2 e0       	ldi	r26, 0x02	; 2
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e8 e0       	ldi	r30, 0x08	; 8
    300a:	f8 e1       	ldi	r31, 0x18	; 24
    300c:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    3010:	6a 01       	movw	r12, r20
    3012:	7b 01       	movw	r14, r22
    3014:	89 01       	movw	r16, r18
    uint16_t unsigned16_value = 0;
    3016:	1a 82       	std	Y+2, r1	; 0x02
    3018:	19 82       	std	Y+1, r1	; 0x01

    if (value) {
    301a:	21 15       	cp	r18, r1
    301c:	31 05       	cpc	r19, r1
    301e:	a9 f1       	breq	.+106    	; 0x308a <decode_unsigned+0x86>
        switch (len_value) {
    3020:	42 30       	cpi	r20, 0x02	; 2
    3022:	51 05       	cpc	r21, r1
    3024:	61 05       	cpc	r22, r1
    3026:	71 05       	cpc	r23, r1
    3028:	c1 f0       	breq	.+48     	; 0x305a <decode_unsigned+0x56>
    302a:	48 f4       	brcc	.+18     	; 0x303e <decode_unsigned+0x3a>
    302c:	41 30       	cpi	r20, 0x01	; 1
    302e:	51 05       	cpc	r21, r1
    3030:	61 05       	cpc	r22, r1
    3032:	71 05       	cpc	r23, r1
    3034:	29 f5       	brne	.+74     	; 0x3080 <decode_unsigned+0x7c>
            case 1:
                *value = apdu[0];
    3036:	fc 01       	movw	r30, r24
    3038:	80 81       	ld	r24, Z
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	15 c0       	rjmp	.+42     	; 0x3068 <decode_unsigned+0x64>
        switch (len_value) {
    303e:	43 30       	cpi	r20, 0x03	; 3
    3040:	51 05       	cpc	r21, r1
    3042:	61 05       	cpc	r22, r1
    3044:	71 05       	cpc	r23, r1
    3046:	c1 f0       	breq	.+48     	; 0x3078 <decode_unsigned+0x74>
    3048:	44 30       	cpi	r20, 0x04	; 4
    304a:	51 05       	cpc	r21, r1
    304c:	61 05       	cpc	r22, r1
    304e:	71 05       	cpc	r23, r1
    3050:	b9 f4       	brne	.+46     	; 0x3080 <decode_unsigned+0x7c>
                break;
            case 3:
                decode_unsigned24(&apdu[0], value);
                break;
            case 4:
                decode_unsigned32(&apdu[0], value);
    3052:	b8 01       	movw	r22, r16
    3054:	0e 94 af 19 	call	0x335e	; 0x335e <decode_unsigned32>
                break;
    3058:	18 c0       	rjmp	.+48     	; 0x308a <decode_unsigned+0x86>
                decode_unsigned16(&apdu[0], &unsigned16_value);
    305a:	be 01       	movw	r22, r28
    305c:	6f 5f       	subi	r22, 0xFF	; 255
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <decode_unsigned16>
                *value = unsigned16_value;
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	a0 e0       	ldi	r26, 0x00	; 0
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	f8 01       	movw	r30, r16
    306e:	80 83       	st	Z, r24
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	a2 83       	std	Z+2, r26	; 0x02
    3074:	b3 83       	std	Z+3, r27	; 0x03
                break;
    3076:	09 c0       	rjmp	.+18     	; 0x308a <decode_unsigned+0x86>
                decode_unsigned24(&apdu[0], value);
    3078:	b8 01       	movw	r22, r16
    307a:	0e 94 86 19 	call	0x330c	; 0x330c <decode_unsigned24>
                break;
    307e:	05 c0       	rjmp	.+10     	; 0x308a <decode_unsigned+0x86>
            default:
                *value = 0;
    3080:	f8 01       	movw	r30, r16
    3082:	10 82       	st	Z, r1
    3084:	11 82       	std	Z+1, r1	; 0x01
    3086:	12 82       	std	Z+2, r1	; 0x02
    3088:	13 82       	std	Z+3, r1	; 0x03
                break;
        }
    }

    return (int) len_value;
}
    308a:	c6 01       	movw	r24, r12
    308c:	22 96       	adiw	r28, 0x02	; 2
    308e:	e8 e0       	ldi	r30, 0x08	; 8
    3090:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00003094 <encode_bacnet_unsigned>:
    uint8_t * apdu,
    uint32_t value)
{
    int len = 0;        /* return value */

    if (value < 0x100) {
    3094:	4f 3f       	cpi	r20, 0xFF	; 255
    3096:	51 05       	cpc	r21, r1
    3098:	61 05       	cpc	r22, r1
    309a:	71 05       	cpc	r23, r1
    309c:	09 f0       	breq	.+2      	; 0x30a0 <encode_bacnet_unsigned+0xc>
    309e:	28 f4       	brcc	.+10     	; 0x30aa <encode_bacnet_unsigned+0x16>
        apdu[0] = (uint8_t) value;
    30a0:	fc 01       	movw	r30, r24
    30a2:	40 83       	st	Z, r20
        len = 1;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	08 95       	ret
    } else if (value < 0x10000) {
    30aa:	41 15       	cp	r20, r1
    30ac:	51 05       	cpc	r21, r1
    30ae:	f1 e0       	ldi	r31, 0x01	; 1
    30b0:	6f 07       	cpc	r22, r31
    30b2:	71 05       	cpc	r23, r1
    30b4:	20 f4       	brcc	.+8      	; 0x30be <encode_bacnet_unsigned+0x2a>
        len = encode_unsigned16(&apdu[0], (uint16_t) value);
    30b6:	ba 01       	movw	r22, r20
    30b8:	0e 94 65 19 	call	0x32ca	; 0x32ca <encode_unsigned16>
    30bc:	08 95       	ret
    } else if (value < 0x1000000) {
    30be:	41 15       	cp	r20, r1
    30c0:	51 05       	cpc	r21, r1
    30c2:	61 05       	cpc	r22, r1
    30c4:	21 e0       	ldi	r18, 0x01	; 1
    30c6:	72 07       	cpc	r23, r18
    30c8:	18 f4       	brcc	.+6      	; 0x30d0 <encode_bacnet_unsigned+0x3c>
        len = encode_unsigned24(&apdu[0], value);
    30ca:	0e 94 7f 19 	call	0x32fe	; 0x32fe <encode_unsigned24>
    30ce:	08 95       	ret
    } else {
        len = encode_unsigned32(&apdu[0], value);
    30d0:	0e 94 a7 19 	call	0x334e	; 0x334e <encode_unsigned32>
    }

    return len;
}
    30d4:	08 95       	ret

000030d6 <encode_context_unsigned>:
/* returns the number of apdu bytes consumed */
int encode_context_unsigned(
    uint8_t * apdu,
    uint8_t tag_number,
    uint32_t value)
{
    30d6:	a0 e0       	ldi	r26, 0x00	; 0
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e1 e7       	ldi	r30, 0x71	; 113
    30dc:	f8 e1       	ldi	r31, 0x18	; 24
    30de:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    30e2:	ec 01       	movw	r28, r24
    30e4:	69 01       	movw	r12, r18
    30e6:	7a 01       	movw	r14, r20
    int len = 0;

    /* length of unsigned is variable, as per 20.2.4 */
    if (value < 0x100) {
    30e8:	2f 3f       	cpi	r18, 0xFF	; 255
    30ea:	31 05       	cpc	r19, r1
    30ec:	41 05       	cpc	r20, r1
    30ee:	51 05       	cpc	r21, r1
    30f0:	81 f0       	breq	.+32     	; 0x3112 <encode_context_unsigned+0x3c>
    30f2:	78 f0       	brcs	.+30     	; 0x3112 <encode_context_unsigned+0x3c>
        len = 1;
    } else if (value < 0x10000) {
    30f4:	21 15       	cp	r18, r1
    30f6:	31 05       	cpc	r19, r1
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	48 07       	cpc	r20, r24
    30fc:	51 05       	cpc	r21, r1
    30fe:	60 f0       	brcs	.+24     	; 0x3118 <encode_context_unsigned+0x42>
        len = 2;
    } else if (value < 0x1000000) {
    3100:	21 15       	cp	r18, r1
    3102:	31 05       	cpc	r19, r1
    3104:	41 05       	cpc	r20, r1
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	58 07       	cpc	r21, r24
    310a:	48 f4       	brcc	.+18     	; 0x311e <encode_context_unsigned+0x48>
        len = 3;
    310c:	03 e0       	ldi	r16, 0x03	; 3
    310e:	10 e0       	ldi	r17, 0x00	; 0
    3110:	08 c0       	rjmp	.+16     	; 0x3122 <encode_context_unsigned+0x4c>
        len = 1;
    3112:	01 e0       	ldi	r16, 0x01	; 1
    3114:	10 e0       	ldi	r17, 0x00	; 0
    3116:	05 c0       	rjmp	.+10     	; 0x3122 <encode_context_unsigned+0x4c>
        len = 2;
    3118:	02 e0       	ldi	r16, 0x02	; 2
    311a:	10 e0       	ldi	r17, 0x00	; 0
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <encode_context_unsigned+0x4c>
    } else {
        len = 4;
    311e:	04 e0       	ldi	r16, 0x04	; 4
    3120:	10 e0       	ldi	r17, 0x00	; 0
    }

    len = encode_tag(&apdu[0], tag_number, true, (uint32_t) len);
    3122:	22 27       	eor	r18, r18
    3124:	17 fd       	sbrc	r17, 7
    3126:	20 95       	com	r18
    3128:	32 2f       	mov	r19, r18
    312a:	41 e0       	ldi	r20, 0x01	; 1
    312c:	ce 01       	movw	r24, r28
    312e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
    3132:	8c 01       	movw	r16, r24
    len += encode_bacnet_unsigned(&apdu[len], value);
    3134:	b7 01       	movw	r22, r14
    3136:	a6 01       	movw	r20, r12
    3138:	ce 01       	movw	r24, r28
    313a:	80 0f       	add	r24, r16
    313c:	91 1f       	adc	r25, r17
    313e:	0e 94 4a 18 	call	0x3094	; 0x3094 <encode_bacnet_unsigned>

    return len;
}
    3142:	80 0f       	add	r24, r16
    3144:	91 1f       	adc	r25, r17
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	e8 e0       	ldi	r30, 0x08	; 8
    314c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

00003150 <encode_application_unsigned>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_unsigned(
    uint8_t * apdu,
    uint32_t value)
{
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	ec 01       	movw	r28, r24
    int len = 0;

    len = encode_bacnet_unsigned(&apdu[1], value);
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	0e 94 4a 18 	call	0x3094	; 0x3094 <encode_bacnet_unsigned>
    3164:	7c 01       	movw	r14, r24
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_UNSIGNED_INT, false,
    3166:	8c 01       	movw	r16, r24
    3168:	22 27       	eor	r18, r18
    316a:	17 fd       	sbrc	r17, 7
    316c:	20 95       	com	r18
    316e:	32 2f       	mov	r19, r18
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	62 e0       	ldi	r22, 0x02	; 2
    3174:	ce 01       	movw	r24, r28
    3176:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
        (uint32_t) len);

    return len;
}
    317a:	8e 0d       	add	r24, r14
    317c:	9f 1d       	adc	r25, r15
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	e6 e0       	ldi	r30, 0x06	; 6
    3184:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

00003188 <decode_enumerated>:
/* returns the number of apdu bytes consumed */
int decode_enumerated(
    uint8_t * apdu,
    uint32_t len_value,
    uint32_t * value)
{
    3188:	a4 e0       	ldi	r26, 0x04	; 4
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ea ec       	ldi	r30, 0xCA	; 202
    318e:	f8 e1       	ldi	r31, 0x18	; 24
    3190:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x1c>
    3194:	89 01       	movw	r16, r18
    uint32_t unsigned_value = 0;
    3196:	19 82       	std	Y+1, r1	; 0x01
    3198:	1a 82       	std	Y+2, r1	; 0x02
    319a:	1b 82       	std	Y+3, r1	; 0x03
    319c:	1c 82       	std	Y+4, r1	; 0x04
    int len;

    len = decode_unsigned(apdu, len_value, &unsigned_value);
    319e:	9e 01       	movw	r18, r28
    31a0:	2f 5f       	subi	r18, 0xFF	; 255
    31a2:	3f 4f       	sbci	r19, 0xFF	; 255
    31a4:	0e 94 02 18 	call	0x3004	; 0x3004 <decode_unsigned>
    if (value) {
    31a8:	01 15       	cp	r16, r1
    31aa:	11 05       	cpc	r17, r1
    31ac:	49 f0       	breq	.+18     	; 0x31c0 <decode_enumerated+0x38>
        *value = unsigned_value;
    31ae:	49 81       	ldd	r20, Y+1	; 0x01
    31b0:	5a 81       	ldd	r21, Y+2	; 0x02
    31b2:	6b 81       	ldd	r22, Y+3	; 0x03
    31b4:	7c 81       	ldd	r23, Y+4	; 0x04
    31b6:	f8 01       	movw	r30, r16
    31b8:	40 83       	st	Z, r20
    31ba:	51 83       	std	Z+1, r21	; 0x01
    31bc:	62 83       	std	Z+2, r22	; 0x02
    31be:	73 83       	std	Z+3, r23	; 0x03
    }

    return len;
}
    31c0:	24 96       	adiw	r28, 0x04	; 4
    31c2:	e4 e0       	ldi	r30, 0x04	; 4
    31c4:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x1c>

000031c8 <encode_application_enumerated>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_enumerated(
    uint8_t * apdu,
    uint32_t value)
{
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	ec 01       	movw	r28, r24
    return encode_bacnet_unsigned(apdu, value);
    31d6:	01 96       	adiw	r24, 0x01	; 1
    31d8:	0e 94 4a 18 	call	0x3094	; 0x3094 <encode_bacnet_unsigned>
    31dc:	7c 01       	movw	r14, r24
    int len = 0;        /* return value */

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_enumerated(&apdu[1], value);
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_ENUMERATED, false,
    31de:	8c 01       	movw	r16, r24
    31e0:	22 27       	eor	r18, r18
    31e2:	17 fd       	sbrc	r17, 7
    31e4:	20 95       	com	r18
    31e6:	32 2f       	mov	r19, r18
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	69 e0       	ldi	r22, 0x09	; 9
    31ec:	ce 01       	movw	r24, r28
    31ee:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
        (uint32_t) len);

    return len;
}
    31f2:	8e 0d       	add	r24, r14
    31f4:	9f 1d       	adc	r25, r15
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	e6 e0       	ldi	r30, 0x06	; 6
    31fc:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

00003200 <encode_context_enumerated>:
/* returns the number of apdu bytes consumed */
int encode_context_enumerated(
    uint8_t * apdu,
    uint8_t tag_number,
    uint32_t value)
{
    3200:	a0 e0       	ldi	r26, 0x00	; 0
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e6 e0       	ldi	r30, 0x06	; 6
    3206:	f9 e1       	ldi	r31, 0x19	; 25
    3208:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__prologue_saves__+0x14>
    320c:	ec 01       	movw	r28, r24
    320e:	69 01       	movw	r12, r18
    3210:	7a 01       	movw	r14, r20
    int len = 0;        /* return value */

    /* length of enumerated is variable, as per 20.2.11 */
    if (value < 0x100) {
    3212:	2f 3f       	cpi	r18, 0xFF	; 255
    3214:	31 05       	cpc	r19, r1
    3216:	41 05       	cpc	r20, r1
    3218:	51 05       	cpc	r21, r1
    321a:	81 f0       	breq	.+32     	; 0x323c <encode_context_enumerated+0x3c>
    321c:	78 f0       	brcs	.+30     	; 0x323c <encode_context_enumerated+0x3c>
        len = 1;
    } else if (value < 0x10000) {
    321e:	21 15       	cp	r18, r1
    3220:	31 05       	cpc	r19, r1
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	48 07       	cpc	r20, r24
    3226:	51 05       	cpc	r21, r1
    3228:	60 f0       	brcs	.+24     	; 0x3242 <encode_context_enumerated+0x42>
        len = 2;
    } else if (value < 0x1000000) {
    322a:	21 15       	cp	r18, r1
    322c:	31 05       	cpc	r19, r1
    322e:	41 05       	cpc	r20, r1
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	58 07       	cpc	r21, r24
    3234:	48 f4       	brcc	.+18     	; 0x3248 <encode_context_enumerated+0x48>
        len = 3;
    3236:	03 e0       	ldi	r16, 0x03	; 3
    3238:	10 e0       	ldi	r17, 0x00	; 0
    323a:	08 c0       	rjmp	.+16     	; 0x324c <encode_context_enumerated+0x4c>
        len = 1;
    323c:	01 e0       	ldi	r16, 0x01	; 1
    323e:	10 e0       	ldi	r17, 0x00	; 0
    3240:	05 c0       	rjmp	.+10     	; 0x324c <encode_context_enumerated+0x4c>
        len = 2;
    3242:	02 e0       	ldi	r16, 0x02	; 2
    3244:	10 e0       	ldi	r17, 0x00	; 0
    3246:	02 c0       	rjmp	.+4      	; 0x324c <encode_context_enumerated+0x4c>
    } else {
        len = 4;
    3248:	04 e0       	ldi	r16, 0x04	; 4
    324a:	10 e0       	ldi	r17, 0x00	; 0
    }

    len = encode_tag(&apdu[0], tag_number, true, (uint32_t) len);
    324c:	22 27       	eor	r18, r18
    324e:	17 fd       	sbrc	r17, 7
    3250:	20 95       	com	r18
    3252:	32 2f       	mov	r19, r18
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	ce 01       	movw	r24, r28
    3258:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
    325c:	8c 01       	movw	r16, r24
    return encode_bacnet_unsigned(apdu, value);
    325e:	b7 01       	movw	r22, r14
    3260:	a6 01       	movw	r20, r12
    3262:	ce 01       	movw	r24, r28
    3264:	80 0f       	add	r24, r16
    3266:	91 1f       	adc	r25, r17
    3268:	0e 94 4a 18 	call	0x3094	; 0x3094 <encode_bacnet_unsigned>
    len += encode_bacnet_enumerated(&apdu[len], value);

    return len;
}
    326c:	80 0f       	add	r24, r16
    326e:	91 1f       	adc	r25, r17
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	e8 e0       	ldi	r30, 0x08	; 8
    3276:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__epilogue_restores__+0x14>

0000327a <encode_application_real>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_real(
    uint8_t * apdu,
    float value)
{
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	ec 01       	movw	r28, r24
    3288:	cb 01       	movw	r24, r22
    328a:	ba 01       	movw	r22, r20
    int len = 0;

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_real(value, &apdu[1]);
    328c:	ae 01       	movw	r20, r28
    328e:	4f 5f       	subi	r20, 0xFF	; 255
    3290:	5f 4f       	sbci	r21, 0xFF	; 255
    3292:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <encode_bacnet_real>
    3296:	7c 01       	movw	r14, r24
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_REAL, false,
    3298:	8c 01       	movw	r16, r24
    329a:	22 27       	eor	r18, r18
    329c:	17 fd       	sbrc	r17, 7
    329e:	20 95       	com	r18
    32a0:	32 2f       	mov	r19, r18
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	64 e0       	ldi	r22, 0x04	; 4
    32a6:	ce 01       	movw	r24, r28
    32a8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <encode_tag>
        (uint32_t) len);

    return len;
}
    32ac:	8e 0d       	add	r24, r14
    32ae:	9f 1d       	adc	r25, r15
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	e6 e0       	ldi	r30, 0x06	; 6
    32b6:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

000032ba <encode_simple_ack>:
/* returns the number of apdu bytes consumed */
int encode_simple_ack(
    uint8_t * apdu,
    uint8_t invoke_id,
    uint8_t service_choice)
{
    32ba:	fc 01       	movw	r30, r24
    apdu[0] = PDU_TYPE_SIMPLE_ACK;
    32bc:	80 e2       	ldi	r24, 0x20	; 32
    32be:	80 83       	st	Z, r24
    apdu[1] = invoke_id;
    32c0:	61 83       	std	Z+1, r22	; 0x01
    apdu[2] = service_choice;
    32c2:	42 83       	std	Z+2, r20	; 0x02

    return 3;
}
    32c4:	83 e0       	ldi	r24, 0x03	; 3
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	08 95       	ret

000032ca <encode_unsigned16>:

int encode_unsigned16(
    uint8_t * apdu,
    uint16_t value)
{
    apdu[0] = (uint8_t) ((value & 0xff00) >> 8);
    32ca:	fc 01       	movw	r30, r24
    32cc:	70 83       	st	Z, r23
    apdu[1] = (uint8_t) (value & 0x00ff);
    32ce:	61 83       	std	Z+1, r22	; 0x01

    return 2;
}
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	08 95       	ret

000032d6 <decode_unsigned16>:

int decode_unsigned16(
    uint8_t * apdu,
    uint16_t * value)
{
    if (value) {
    32d6:	61 15       	cp	r22, r1
    32d8:	71 05       	cpc	r23, r1
    32da:	71 f0       	breq	.+28     	; 0x32f8 <decode_unsigned16+0x22>
        *value = (uint16_t) ((((uint16_t) apdu[0]) << 8) & 0xff00);
    32dc:	fc 01       	movw	r30, r24
    32de:	20 81       	ld	r18, Z
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	32 2f       	mov	r19, r18
    32e4:	22 27       	eor	r18, r18
    32e6:	fb 01       	movw	r30, r22
    32e8:	31 83       	std	Z+1, r19	; 0x01
    32ea:	20 83       	st	Z, r18
        *value |= ((uint16_t) (((uint16_t) apdu[1]) & 0x00ff));
    32ec:	fc 01       	movw	r30, r24
    32ee:	81 81       	ldd	r24, Z+1	; 0x01
    32f0:	28 2b       	or	r18, r24
    32f2:	fb 01       	movw	r30, r22
    32f4:	31 83       	std	Z+1, r19	; 0x01
    32f6:	20 83       	st	Z, r18
    }

    return 2;
}
    32f8:	82 e0       	ldi	r24, 0x02	; 2
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	08 95       	ret

000032fe <encode_unsigned24>:

int encode_unsigned24(
    uint8_t * apdu,
    uint32_t value)
{
    32fe:	fc 01       	movw	r30, r24
    apdu[0] = (uint8_t) ((value & 0xff0000) >> 16);
    3300:	60 83       	st	Z, r22
    apdu[1] = (uint8_t) ((value & 0x00ff00) >> 8);
    3302:	51 83       	std	Z+1, r21	; 0x01
    apdu[2] = (uint8_t) (value & 0x0000ff);
    3304:	42 83       	std	Z+2, r20	; 0x02

    return 3;
}
    3306:	83 e0       	ldi	r24, 0x03	; 3
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	08 95       	ret

0000330c <decode_unsigned24>:

int decode_unsigned24(
    uint8_t * apdu,
    uint32_t * value)
{
    330c:	dc 01       	movw	r26, r24
    330e:	fb 01       	movw	r30, r22
    if (value) {
    3310:	30 97       	sbiw	r30, 0x00	; 0
    3312:	d1 f0       	breq	.+52     	; 0x3348 <decode_unsigned24+0x3c>
        *value = ((uint32_t) ((((uint32_t) apdu[0]) << 16) & 0x00ff0000));
    3314:	4c 91       	ld	r20, X
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	ba 01       	movw	r22, r20
    331e:	55 27       	eor	r21, r21
    3320:	44 27       	eor	r20, r20
    3322:	40 83       	st	Z, r20
    3324:	51 83       	std	Z+1, r21	; 0x01
    3326:	62 83       	std	Z+2, r22	; 0x02
    3328:	73 83       	std	Z+3, r23	; 0x03
        *value |= (uint32_t) ((((uint32_t) apdu[1]) << 8) & 0x0000ff00);
    332a:	11 96       	adiw	r26, 0x01	; 1
    332c:	8c 91       	ld	r24, X
    332e:	11 97       	sbiw	r26, 0x01	; 1
    3330:	58 2b       	or	r21, r24
    3332:	40 83       	st	Z, r20
    3334:	51 83       	std	Z+1, r21	; 0x01
    3336:	62 83       	std	Z+2, r22	; 0x02
    3338:	73 83       	std	Z+3, r23	; 0x03
        *value |= ((uint32_t) (((uint32_t) apdu[2]) & 0x000000ff));
    333a:	12 96       	adiw	r26, 0x02	; 2
    333c:	8c 91       	ld	r24, X
    333e:	48 2b       	or	r20, r24
    3340:	40 83       	st	Z, r20
    3342:	51 83       	std	Z+1, r21	; 0x01
    3344:	62 83       	std	Z+2, r22	; 0x02
    3346:	73 83       	std	Z+3, r23	; 0x03
    }

    return 3;
}
    3348:	83 e0       	ldi	r24, 0x03	; 3
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	08 95       	ret

0000334e <encode_unsigned32>:

int encode_unsigned32(
    uint8_t * apdu,
    uint32_t value)
{
    334e:	fc 01       	movw	r30, r24
    apdu[0] = (uint8_t) ((value & 0xff000000) >> 24);
    3350:	70 83       	st	Z, r23
    apdu[1] = (uint8_t) ((value & 0x00ff0000) >> 16);
    3352:	61 83       	std	Z+1, r22	; 0x01
    apdu[2] = (uint8_t) ((value & 0x0000ff00) >> 8);
    3354:	52 83       	std	Z+2, r21	; 0x02
    apdu[3] = (uint8_t) (value & 0x000000ff);
    3356:	43 83       	std	Z+3, r20	; 0x03

    return 4;
}
    3358:	84 e0       	ldi	r24, 0x04	; 4
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	08 95       	ret

0000335e <decode_unsigned32>:

int decode_unsigned32(
    uint8_t * apdu,
    uint32_t * value)
{
    335e:	fc 01       	movw	r30, r24
    3360:	db 01       	movw	r26, r22
    if (value) {
    3362:	10 97       	sbiw	r26, 0x00	; 0
    3364:	11 f1       	breq	.+68     	; 0x33aa <decode_unsigned32+0x4c>
        *value = ((uint32_t) ((((uint32_t) apdu[0]) << 24) & 0xff000000));
    3366:	40 81       	ld	r20, Z
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	74 2f       	mov	r23, r20
    3370:	66 27       	eor	r22, r22
    3372:	55 27       	eor	r21, r21
    3374:	44 27       	eor	r20, r20
    3376:	4d 93       	st	X+, r20
    3378:	5d 93       	st	X+, r21
    337a:	6d 93       	st	X+, r22
    337c:	7c 93       	st	X, r23
    337e:	13 97       	sbiw	r26, 0x03	; 3
        *value |= ((uint32_t) ((((uint32_t) apdu[1]) << 16) & 0x00ff0000));
    3380:	81 81       	ldd	r24, Z+1	; 0x01
    3382:	68 2b       	or	r22, r24
    3384:	4d 93       	st	X+, r20
    3386:	5d 93       	st	X+, r21
    3388:	6d 93       	st	X+, r22
    338a:	7c 93       	st	X, r23
    338c:	13 97       	sbiw	r26, 0x03	; 3
        *value |= ((uint32_t) ((((uint32_t) apdu[2]) << 8) & 0x0000ff00));
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	58 2b       	or	r21, r24
    3392:	4d 93       	st	X+, r20
    3394:	5d 93       	st	X+, r21
    3396:	6d 93       	st	X+, r22
    3398:	7c 93       	st	X, r23
    339a:	13 97       	sbiw	r26, 0x03	; 3
        *value |= ((uint32_t) (((uint32_t) apdu[3]) & 0x000000ff));
    339c:	83 81       	ldd	r24, Z+3	; 0x03
    339e:	48 2b       	or	r20, r24
    33a0:	4d 93       	st	X+, r20
    33a2:	5d 93       	st	X+, r21
    33a4:	6d 93       	st	X+, r22
    33a6:	7c 93       	st	X, r23
    33a8:	13 97       	sbiw	r26, 0x03	; 3
    }

    return 4;
}
    33aa:	84 e0       	ldi	r24, 0x04	; 4
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	08 95       	ret

000033b0 <decode_real>:
/* from clause 20.2.6 Encoding of a Real Number Value */
/* returns the number of apdu bytes consumed */
int decode_real(
    uint8_t * apdu,
    float *real_value)
{
    33b0:	fc 01       	movw	r30, r24
    my_data.byte[1] = apdu[2];
    my_data.byte[2] = apdu[1];
    my_data.byte[3] = apdu[0];
#endif

    *real_value = my_data.real_value;
    33b2:	53 81       	ldd	r21, Z+3	; 0x03
    33b4:	42 81       	ldd	r20, Z+2	; 0x02
    33b6:	31 81       	ldd	r19, Z+1	; 0x01
    33b8:	20 81       	ld	r18, Z
    33ba:	85 2f       	mov	r24, r21
    33bc:	94 2f       	mov	r25, r20
    33be:	a3 2f       	mov	r26, r19
    33c0:	b2 2f       	mov	r27, r18
    33c2:	fb 01       	movw	r30, r22
    33c4:	80 83       	st	Z, r24
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	a2 83       	std	Z+2, r26	; 0x02
    33ca:	b3 83       	std	Z+3, r27	; 0x03

    return 4;
}
    33cc:	84 e0       	ldi	r24, 0x04	; 4
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	08 95       	ret

000033d2 <decode_real_safe>:
int decode_real_safe(
    uint8_t * apdu,
    uint32_t len_value,
    float *real_value)
{
    if (len_value != 4) {
    33d2:	44 30       	cpi	r20, 0x04	; 4
    33d4:	51 05       	cpc	r21, r1
    33d6:	61 05       	cpc	r22, r1
    33d8:	71 05       	cpc	r23, r1
    33da:	39 f0       	breq	.+14     	; 0x33ea <decode_real_safe+0x18>
        *real_value = 0.0f;
    33dc:	f9 01       	movw	r30, r18
    33de:	10 82       	st	Z, r1
    33e0:	11 82       	std	Z+1, r1	; 0x01
    33e2:	12 82       	std	Z+2, r1	; 0x02
    33e4:	13 82       	std	Z+3, r1	; 0x03
        return (int) len_value;
    33e6:	ca 01       	movw	r24, r20
    33e8:	08 95       	ret
    } else {
        return decode_real(apdu, real_value);
    33ea:	b9 01       	movw	r22, r18
    33ec:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <decode_real>
    }
}
    33f0:	08 95       	ret

000033f2 <encode_bacnet_real>:
/* from clause 20.2.6 Encoding of a Real Number Value */
/* returns the number of apdu bytes consumed */
int encode_bacnet_real(
    float value,
    uint8_t * apdu)
{
    33f2:	fa 01       	movw	r30, r20
    apdu[0] = my_data.byte[0];
    apdu[1] = my_data.byte[1];
    apdu[2] = my_data.byte[2];
    apdu[3] = my_data.byte[3];
#else
    apdu[0] = my_data.byte[3];
    33f4:	90 83       	st	Z, r25
    apdu[1] = my_data.byte[2];
    33f6:	81 83       	std	Z+1, r24	; 0x01
    apdu[2] = my_data.byte[1];
    33f8:	72 83       	std	Z+2, r23	; 0x02
    apdu[3] = my_data.byte[0];
    33fa:	63 83       	std	Z+3, r22	; 0x03
#endif

    return 4;
}
    33fc:	84 e0       	ldi	r24, 0x04	; 4
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	08 95       	ret

00003402 <bitstring_init>:
void bitstring_init(
    BACNET_BIT_STRING * bit_string)
{
    int i;

    bit_string->bits_used = 0;
    3402:	fc 01       	movw	r30, r24
    3404:	10 82       	st	Z, r1
    3406:	21 e0       	ldi	r18, 0x01	; 1
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	fc 01       	movw	r30, r24
    340c:	e2 0f       	add	r30, r18
    340e:	f3 1f       	adc	r31, r19
    for (i = 0; i < MAX_BITSTRING_BYTES; i++) {
        bit_string->value[i] = 0;
    3410:	10 82       	st	Z, r1
    3412:	2f 5f       	subi	r18, 0xFF	; 255
    3414:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i = 0; i < MAX_BITSTRING_BYTES; i++) {
    3416:	20 31       	cpi	r18, 0x10	; 16
    3418:	31 05       	cpc	r19, r1
    341a:	b9 f7       	brne	.-18     	; 0x340a <bitstring_init+0x8>
    }
}
    341c:	08 95       	ret

0000341e <bitstring_set_bit>:

void bitstring_set_bit(
    BACNET_BIT_STRING * bit_string,
    uint8_t bit_number,
    bool value)
{
    341e:	fc 01       	movw	r30, r24
    uint8_t byte_number = bit_number / 8;
    3420:	56 2f       	mov	r21, r22
    3422:	56 95       	lsr	r21
    3424:	56 95       	lsr	r21
    3426:	56 95       	lsr	r21
    uint8_t bit_mask = 1;

    if (byte_number < MAX_BITSTRING_BYTES) {
    3428:	5f 30       	cpi	r21, 0x0F	; 15
    342a:	08 f5       	brcc	.+66     	; 0x346e <bitstring_set_bit+0x50>
        /* set max bits used */
        if (bit_string->bits_used < (bit_number + 1)) {
    342c:	86 2f       	mov	r24, r22
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	20 81       	ld	r18, Z
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	82 17       	cp	r24, r18
    3436:	93 07       	cpc	r25, r19
    3438:	14 f0       	brlt	.+4      	; 0x343e <bitstring_set_bit+0x20>
            bit_string->bits_used = bit_number + 1;
    343a:	6f 5f       	subi	r22, 0xFF	; 255
    343c:	60 83       	st	Z, r22
        }
        bit_mask = bit_mask << (bit_number - (byte_number * 8));
    343e:	28 e0       	ldi	r18, 0x08	; 8
    3440:	52 9f       	mul	r21, r18
    3442:	80 19       	sub	r24, r0
    3444:	91 09       	sbc	r25, r1
    3446:	11 24       	eor	r1, r1
    3448:	21 e0       	ldi	r18, 0x01	; 1
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	08 2e       	mov	r0, r24
    344e:	01 c0       	rjmp	.+2      	; 0x3452 <bitstring_set_bit+0x34>
    3450:	22 0f       	add	r18, r18
    3452:	0a 94       	dec	r0
    3454:	ea f7       	brpl	.-6      	; 0x3450 <bitstring_set_bit+0x32>
    3456:	e5 0f       	add	r30, r21
    3458:	f1 1d       	adc	r31, r1
        if (value) {
    345a:	44 23       	and	r20, r20
    345c:	21 f0       	breq	.+8      	; 0x3466 <bitstring_set_bit+0x48>
            bit_string->value[byte_number] |= bit_mask;
    345e:	81 81       	ldd	r24, Z+1	; 0x01
    3460:	82 2b       	or	r24, r18
    3462:	81 83       	std	Z+1, r24	; 0x01
    3464:	08 95       	ret
        } else {
            bit_string->value[byte_number] &= (~(bit_mask));
    3466:	20 95       	com	r18
    3468:	81 81       	ldd	r24, Z+1	; 0x01
    346a:	28 23       	and	r18, r24
    346c:	21 83       	std	Z+1, r18	; 0x01
    346e:	08 95       	ret

00003470 <bitstring_bits_used>:

uint8_t bitstring_bits_used(
    BACNET_BIT_STRING * bit_string)
{
    return bit_string->bits_used;
}
    3470:	fc 01       	movw	r30, r24
    3472:	80 81       	ld	r24, Z
    3474:	08 95       	ret

00003476 <bitstring_bytes_used>:
{
    uint8_t len = 0;    /* return value */
    uint8_t used_bytes = 0;
    uint8_t last_bit = 0;

    if (bit_string->bits_used) {
    3476:	fc 01       	movw	r30, r24
    3478:	80 81       	ld	r24, Z
    347a:	88 23       	and	r24, r24
    347c:	31 f0       	breq	.+12     	; 0x348a <bitstring_bytes_used+0x14>
        last_bit = bit_string->bits_used - 1;
    347e:	81 50       	subi	r24, 0x01	; 1
        used_bytes = last_bit / 8;
    3480:	86 95       	lsr	r24
    3482:	86 95       	lsr	r24
    3484:	86 95       	lsr	r24
        /* add one for the first byte */
        used_bytes++;
    3486:	8f 5f       	subi	r24, 0xFF	; 255
    3488:	08 95       	ret
    uint8_t len = 0;    /* return value */
    348a:	80 e0       	ldi	r24, 0x00	; 0
        len = used_bytes;
    }

    return len;
}
    348c:	08 95       	ret

0000348e <bitstring_octet>:
    BACNET_BIT_STRING * bit_string,
    uint8_t octet_index)
{
    uint8_t octet = 0;

    if (bit_string) {
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	39 f0       	breq	.+14     	; 0x34a0 <bitstring_octet+0x12>
        if (octet_index < MAX_BITSTRING_BYTES) {
    3492:	6f 30       	cpi	r22, 0x0F	; 15
    3494:	28 f4       	brcc	.+10     	; 0x34a0 <bitstring_octet+0x12>
            octet = bit_string->value[octet_index];
    3496:	fc 01       	movw	r30, r24
    3498:	e6 0f       	add	r30, r22
    349a:	f1 1d       	adc	r31, r1
    349c:	81 81       	ldd	r24, Z+1	; 0x01
    349e:	08 95       	ret
    uint8_t octet = 0;
    34a0:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return octet;
}
    34a2:	08 95       	ret

000034a4 <characterstring_init>:
bool characterstring_init(
    BACNET_CHARACTER_STRING * char_string,
    uint8_t encoding,
    const char *value,
    size_t length)
{
    34a4:	fc 01       	movw	r30, r24
    bool status = false;        /* return value */
    size_t i;   /* counter */

    if (char_string) {
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	11 f4       	brne	.+4      	; 0x34ae <characterstring_init+0xa>
    bool status = false;        /* return value */
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	08 95       	ret
        char_string->length = 0;
    34ae:	11 82       	std	Z+1, r1	; 0x01
    34b0:	10 82       	st	Z, r1
        char_string->encoding = encoding;
    34b2:	62 83       	std	Z+2, r22	; 0x02
        /* save a byte at the end for NULL -
           note: assumes printable characters */
        if (length <= CHARACTER_STRING_CAPACITY) {
    34b4:	2c 32       	cpi	r18, 0x2C	; 44
    34b6:	31 05       	cpc	r19, r1
    34b8:	c0 f7       	brcc	.-16     	; 0x34aa <characterstring_init+0x6>
            if (value) {
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	41 15       	cp	r20, r1
    34c0:	51 05       	cpc	r21, r1
    34c2:	a1 f4       	brne	.+40     	; 0x34ec <characterstring_init+0x48>
    34c4:	df 01       	movw	r26, r30
    34c6:	a8 0f       	add	r26, r24
    34c8:	b9 1f       	adc	r27, r25
                        char_string->value[i] = 0;
                    }
                }
            } else {
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
                    char_string->value[i] = 0;
    34ca:	13 96       	adiw	r26, 0x03	; 3
    34cc:	1c 92       	st	X, r1
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
    34ce:	01 96       	adiw	r24, 0x01	; 1
    34d0:	8c 32       	cpi	r24, 0x2C	; 44
    34d2:	91 05       	cpc	r25, r1
    34d4:	b9 f7       	brne	.-18     	; 0x34c4 <characterstring_init+0x20>
    bool status = false;        /* return value */
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	08 95       	ret
    34da:	df 01       	movw	r26, r30
    34dc:	a8 0f       	add	r26, r24
    34de:	b9 1f       	adc	r27, r25
                        char_string->value[i] = 0;
    34e0:	13 96       	adiw	r26, 0x03	; 3
    34e2:	1c 92       	st	X, r1
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	8c 32       	cpi	r24, 0x2C	; 44
    34e8:	91 05       	cpc	r25, r1
    34ea:	a9 f3       	breq	.-22     	; 0x34d6 <characterstring_init+0x32>
                    if (i < length) {
    34ec:	82 17       	cp	r24, r18
    34ee:	93 07       	cpc	r25, r19
    34f0:	a0 f7       	brcc	.-24     	; 0x34da <characterstring_init+0x36>
    34f2:	da 01       	movw	r26, r20
    34f4:	a8 0f       	add	r26, r24
    34f6:	b9 1f       	adc	r27, r25
                        char_string->value[char_string->length] = value[i];
    34f8:	6c 91       	ld	r22, X
    34fa:	a0 81       	ld	r26, Z
    34fc:	b1 81       	ldd	r27, Z+1	; 0x01
    34fe:	ae 0f       	add	r26, r30
    3500:	bf 1f       	adc	r27, r31
    3502:	13 96       	adiw	r26, 0x03	; 3
    3504:	6c 93       	st	X, r22
                        char_string->length++;
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	6f 5f       	subi	r22, 0xFF	; 255
    350c:	7f 4f       	sbci	r23, 0xFF	; 255
    350e:	71 83       	std	Z+1, r23	; 0x01
    3510:	60 83       	st	Z, r22
    3512:	e8 cf       	rjmp	.-48     	; 0x34e4 <characterstring_init+0x40>

00003514 <characterstring_init_ansi>:
}

bool characterstring_init_ansi(
    BACNET_CHARACTER_STRING * char_string,
    const char *value)
{
    3514:	ab 01       	movw	r20, r22
    return characterstring_init(char_string, CHARACTER_ANSI_X34, value,
    3516:	61 15       	cp	r22, r1
    3518:	71 05       	cpc	r23, r1
    351a:	51 f0       	breq	.+20     	; 0x3530 <characterstring_init_ansi+0x1c>
    351c:	fb 01       	movw	r30, r22
    351e:	01 90       	ld	r0, Z+
    3520:	00 20       	and	r0, r0
    3522:	e9 f7       	brne	.-6      	; 0x351e <characterstring_init_ansi+0xa>
    3524:	9f 01       	movw	r18, r30
    3526:	21 50       	subi	r18, 0x01	; 1
    3528:	31 09       	sbc	r19, r1
    352a:	26 1b       	sub	r18, r22
    352c:	37 0b       	sbc	r19, r23
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <characterstring_init_ansi+0x20>
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <characterstring_init>
        value ? strlen(value) : 0);
}
    353a:	08 95       	ret

0000353c <characterstring_ansi_copy>:

bool characterstring_ansi_copy(
    char *dest,
    size_t dest_max_len,
    BACNET_CHARACTER_STRING * src)
{
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	fa 01       	movw	r30, r20
    size_t i;   /* counter */

    if (dest && src && (src->encoding == CHARACTER_ANSI_X34) &&
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	11 f1       	breq	.+68     	; 0x358a <characterstring_ansi_copy+0x4e>
    3546:	30 97       	sbiw	r30, 0x00	; 0
    3548:	01 f1       	breq	.+64     	; 0x358a <characterstring_ansi_copy+0x4e>
    354a:	22 81       	ldd	r18, Z+2	; 0x02
    354c:	21 11       	cpse	r18, r1
    354e:	1d c0       	rjmp	.+58     	; 0x358a <characterstring_ansi_copy+0x4e>
    3550:	20 81       	ld	r18, Z
    3552:	31 81       	ldd	r19, Z+1	; 0x01
    3554:	26 17       	cp	r18, r22
    3556:	37 07       	cpc	r19, r23
    3558:	c0 f4       	brcc	.+48     	; 0x358a <characterstring_ansi_copy+0x4e>
    355a:	dc 01       	movw	r26, r24
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
        (src->length < dest_max_len)) {
        for (i = 0; i < dest_max_len; i++) {
    3560:	26 17       	cp	r18, r22
    3562:	37 07       	cpc	r19, r23
    3564:	81 f0       	breq	.+32     	; 0x3586 <characterstring_ansi_copy+0x4a>
            if (i < src->length) {
    3566:	80 81       	ld	r24, Z
    3568:	91 81       	ldd	r25, Z+1	; 0x01
    356a:	28 17       	cp	r18, r24
    356c:	39 07       	cpc	r19, r25
    356e:	30 f4       	brcc	.+12     	; 0x357c <characterstring_ansi_copy+0x40>
    3570:	ef 01       	movw	r28, r30
    3572:	c2 0f       	add	r28, r18
    3574:	d3 1f       	adc	r29, r19
                dest[i] = src->value[i];
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	8c 93       	st	X, r24
    357a:	01 c0       	rjmp	.+2      	; 0x357e <characterstring_ansi_copy+0x42>
            } else {
                dest[i] = 0;
    357c:	1c 92       	st	X, r1
        for (i = 0; i < dest_max_len; i++) {
    357e:	2f 5f       	subi	r18, 0xFF	; 255
    3580:	3f 4f       	sbci	r19, 0xFF	; 255
    3582:	11 96       	adiw	r26, 0x01	; 1
    3584:	ed cf       	rjmp	.-38     	; 0x3560 <characterstring_ansi_copy+0x24>
            }
        }
        return true;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	01 c0       	rjmp	.+2      	; 0x358c <characterstring_ansi_copy+0x50>
    }

    return false;
    358a:	80 e0       	ldi	r24, 0x00	; 0
}
    358c:	df 91       	pop	r29
    358e:	cf 91       	pop	r28
    3590:	08 95       	ret

00003592 <characterstring_value>:
char *characterstring_value(
    BACNET_CHARACTER_STRING * char_string)
{
    char *value = NULL;

    if (char_string) {
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	11 f0       	breq	.+4      	; 0x359a <characterstring_value+0x8>
        value = char_string->value;
    3596:	03 96       	adiw	r24, 0x03	; 3
    3598:	08 95       	ret
    char *value = NULL;
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    }

    return value;
}
    359e:	08 95       	ret

000035a0 <characterstring_length>:
size_t characterstring_length(
    BACNET_CHARACTER_STRING * char_string)
{
    size_t length = 0;

    if (char_string) {
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	21 f0       	breq	.+8      	; 0x35ac <characterstring_length+0xc>
        /* FIXME: validate length is within bounds? */
        length = char_string->length;
    35a4:	fc 01       	movw	r30, r24
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	08 95       	ret
    size_t length = 0;
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    }

    return length;
}
    35b0:	08 95       	ret

000035b2 <characterstring_encoding>:
uint8_t characterstring_encoding(
    BACNET_CHARACTER_STRING * char_string)
{
    uint8_t encoding = 0;

    if (char_string) {
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	19 f0       	breq	.+6      	; 0x35bc <characterstring_encoding+0xa>
        encoding = char_string->encoding;
    35b6:	fc 01       	movw	r30, r24
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	08 95       	ret
    uint8_t encoding = 0;
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    }

    return encoding;
}
    35be:	08 95       	ret

000035c0 <iam_encode_apdu>:
    uint8_t * apdu,
    uint32_t device_id,
    unsigned max_apdu,
    int segmentation,
    uint16_t vendor_id)
{
    35c0:	a0 e0       	ldi	r26, 0x00	; 0
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	e6 ee       	ldi	r30, 0xE6	; 230
    35c6:	fa e1       	ldi	r31, 0x1A	; 26
    35c8:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    35cc:	ec 01       	movw	r28, r24
    35ce:	69 01       	movw	r12, r18
    int len = 0;        /* length of each encoding */
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	71 f1       	breq	.+92     	; 0x3630 <iam_encode_apdu+0x70>
        apdu[0] = PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST;
    35d4:	80 e1       	ldi	r24, 0x10	; 16
    35d6:	88 83       	st	Y, r24
        apdu[1] = SERVICE_UNCONFIRMED_I_AM;     /* service choice */
    35d8:	19 82       	std	Y+1, r1	; 0x01
        apdu_len = 2;
        len =
    35da:	9a 01       	movw	r18, r20
    35dc:	ab 01       	movw	r20, r22
    35de:	68 e0       	ldi	r22, 0x08	; 8
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	ce 01       	movw	r24, r28
    35e4:	02 96       	adiw	r24, 0x02	; 2
    35e6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <encode_application_object_id>
            encode_application_object_id(&apdu[apdu_len], OBJECT_DEVICE,
            device_id);
        apdu_len += len;
    35ea:	02 96       	adiw	r24, 0x02	; 2
    35ec:	5c 01       	movw	r10, r24
        len = encode_application_unsigned(&apdu[apdu_len], max_apdu);
    35ee:	a6 01       	movw	r20, r12
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	70 e0       	ldi	r23, 0x00	; 0
    35f4:	ce 01       	movw	r24, r28
    35f6:	8a 0d       	add	r24, r10
    35f8:	9b 1d       	adc	r25, r11
    35fa:	0e 94 a8 18 	call	0x3150	; 0x3150 <encode_application_unsigned>
        apdu_len += len;
    35fe:	a8 0e       	add	r10, r24
    3600:	b9 1e       	adc	r11, r25
        len =
            encode_application_enumerated(&apdu[apdu_len],
    3602:	a8 01       	movw	r20, r16
    3604:	66 27       	eor	r22, r22
    3606:	57 fd       	sbrc	r21, 7
    3608:	60 95       	com	r22
    360a:	76 2f       	mov	r23, r22
        len =
    360c:	ce 01       	movw	r24, r28
    360e:	8a 0d       	add	r24, r10
    3610:	9b 1d       	adc	r25, r11
    3612:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <encode_application_enumerated>
            (uint32_t) segmentation);
        apdu_len += len;
    3616:	a8 0e       	add	r10, r24
    3618:	b9 1e       	adc	r11, r25
        len = encode_application_unsigned(&apdu[apdu_len], vendor_id);
    361a:	a7 01       	movw	r20, r14
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	ce 01       	movw	r24, r28
    3622:	8a 0d       	add	r24, r10
    3624:	9b 1d       	adc	r25, r11
    3626:	0e 94 a8 18 	call	0x3150	; 0x3150 <encode_application_unsigned>
        apdu_len += len;
    362a:	8a 0d       	add	r24, r10
    362c:	9b 1d       	adc	r25, r11
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <iam_encode_apdu+0x74>
    int apdu_len = 0;   /* total length of the apdu, return value */
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	ea e0       	ldi	r30, 0x0A	; 10
    363a:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

0000363e <rp_decode_service_request>:
/* decode the service request only */
int rp_decode_service_request(
    uint8_t * apdu,
    unsigned apdu_len,
    BACNET_READ_PROPERTY_DATA * rpdata)
{
    363e:	af e0       	ldi	r26, 0x0F	; 15
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e5 e2       	ldi	r30, 0x25	; 37
    3644:	fb e1       	ldi	r31, 0x1B	; 27
    3646:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    364a:	7c 01       	movw	r14, r24
    364c:	6b 01       	movw	r12, r22
    364e:	8a 01       	movw	r16, r20
    unsigned len = 0;
    uint8_t tag_number = 0;
    3650:	1f 86       	std	Y+15, r1	; 0x0f
    uint32_t len_value_type = 0;
    3652:	19 86       	std	Y+9, r1	; 0x09
    3654:	1a 86       	std	Y+10, r1	; 0x0a
    3656:	1b 86       	std	Y+11, r1	; 0x0b
    3658:	1c 86       	std	Y+12, r1	; 0x0c
    uint16_t type = 0;  /* for decoding */
    365a:	1e 86       	std	Y+14, r1	; 0x0e
    365c:	1d 86       	std	Y+13, r1	; 0x0d
    uint32_t property = 0;      /* for decoding */
    365e:	1d 82       	std	Y+5, r1	; 0x05
    3660:	1e 82       	std	Y+6, r1	; 0x06
    3662:	1f 82       	std	Y+7, r1	; 0x07
    3664:	18 86       	std	Y+8, r1	; 0x08
    uint32_t array_value = 0;   /* for decoding */
    3666:	19 82       	std	Y+1, r1	; 0x01
    3668:	1a 82       	std	Y+2, r1	; 0x02
    366a:	1b 82       	std	Y+3, r1	; 0x03
    366c:	1c 82       	std	Y+4, r1	; 0x04

    /* check for value pointers */
    if (rpdata) {
    366e:	41 15       	cp	r20, r1
    3670:	51 05       	cpc	r21, r1
    3672:	09 f4       	brne	.+2      	; 0x3676 <rp_decode_service_request+0x38>
    3674:	89 c0       	rjmp	.+274    	; 0x3788 <rp_decode_service_request+0x14a>
        /* Must have at least 2 tags, an object id and a property identifier
         * of at least 1 byte in length to have any chance of parsing */
        if (apdu_len < 7) {
    3676:	67 30       	cpi	r22, 0x07	; 7
    3678:	71 05       	cpc	r23, r1
    367a:	18 f4       	brcc	.+6      	; 0x3682 <rp_decode_service_request+0x44>
            rpdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
    367c:	8f e3       	ldi	r24, 0x3F	; 63
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	7f c0       	rjmp	.+254    	; 0x3780 <rp_decode_service_request+0x142>
            return BACNET_STATUS_REJECT;
        }

        /* Tag 0: Object ID          */
        if (!decode_is_context_tag(&apdu[len++], 0)) {
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	c7 01       	movw	r24, r14
    3686:	0e 94 08 16 	call	0x2c10	; 0x2c10 <decode_is_context_tag>
    368a:	88 23       	and	r24, r24
    368c:	09 f4       	brne	.+2      	; 0x3690 <rp_decode_service_request+0x52>
    368e:	6c c0       	rjmp	.+216    	; 0x3768 <rp_decode_service_request+0x12a>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len += decode_object_id(&apdu[len], &type, &rpdata->object_instance);
    3690:	a8 01       	movw	r20, r16
    3692:	4e 5f       	subi	r20, 0xFE	; 254
    3694:	5f 4f       	sbci	r21, 0xFF	; 255
    3696:	be 01       	movw	r22, r28
    3698:	63 5f       	subi	r22, 0xF3	; 243
    369a:	7f 4f       	sbci	r23, 0xFF	; 255
    369c:	c7 01       	movw	r24, r14
    369e:	01 96       	adiw	r24, 0x01	; 1
    36a0:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <decode_object_id>
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	5c 01       	movw	r10, r24
        rpdata->object_type = (BACNET_OBJECT_TYPE) type;
    36a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ac:	f8 01       	movw	r30, r16
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
        /* Tag 1: Property ID */
        len +=
            decode_tag_number_and_value(&apdu[len], &tag_number,
    36b2:	ae 01       	movw	r20, r28
    36b4:	47 5f       	subi	r20, 0xF7	; 247
    36b6:	5f 4f       	sbci	r21, 0xFF	; 255
    36b8:	be 01       	movw	r22, r28
    36ba:	61 5f       	subi	r22, 0xF1	; 241
    36bc:	7f 4f       	sbci	r23, 0xFF	; 255
    36be:	c7 01       	movw	r24, r14
    36c0:	8a 0d       	add	r24, r10
    36c2:	9b 1d       	adc	r25, r11
    36c4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
        len +=
    36c8:	a8 0e       	add	r10, r24
    36ca:	b9 1e       	adc	r11, r25
            &len_value_type);
        if (tag_number != 1) {
    36cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ce:	81 30       	cpi	r24, 0x01	; 1
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <rp_decode_service_request+0x96>
    36d2:	4a c0       	rjmp	.+148    	; 0x3768 <rp_decode_service_request+0x12a>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len += decode_enumerated(&apdu[len], len_value_type, &property);
    36d4:	49 85       	ldd	r20, Y+9	; 0x09
    36d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    36d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36da:	7c 85       	ldd	r23, Y+12	; 0x0c
    36dc:	9e 01       	movw	r18, r28
    36de:	2b 5f       	subi	r18, 0xFB	; 251
    36e0:	3f 4f       	sbci	r19, 0xFF	; 255
    36e2:	c7 01       	movw	r24, r14
    36e4:	8a 0d       	add	r24, r10
    36e6:	9b 1d       	adc	r25, r11
    36e8:	0e 94 c4 18 	call	0x3188	; 0x3188 <decode_enumerated>
    36ec:	a8 0e       	add	r10, r24
    36ee:	b9 1e       	adc	r11, r25
        rpdata->object_property = (BACNET_PROPERTY_ID) property;
    36f0:	8d 81       	ldd	r24, Y+5	; 0x05
    36f2:	9e 81       	ldd	r25, Y+6	; 0x06
    36f4:	af 81       	ldd	r26, Y+7	; 0x07
    36f6:	b8 85       	ldd	r27, Y+8	; 0x08
    36f8:	f8 01       	movw	r30, r16
    36fa:	86 83       	std	Z+6, r24	; 0x06
    36fc:	97 83       	std	Z+7, r25	; 0x07
    36fe:	a0 87       	std	Z+8, r26	; 0x08
    3700:	b1 87       	std	Z+9, r27	; 0x09
        /* Tag 2: Optional Array Index */
        if (len < apdu_len) {
    3702:	ac 14       	cp	r10, r12
    3704:	bd 04       	cpc	r11, r13
    3706:	98 f5       	brcc	.+102    	; 0x376e <rp_decode_service_request+0x130>
            len +=
                decode_tag_number_and_value(&apdu[len], &tag_number,
    3708:	ae 01       	movw	r20, r28
    370a:	47 5f       	subi	r20, 0xF7	; 247
    370c:	5f 4f       	sbci	r21, 0xFF	; 255
    370e:	be 01       	movw	r22, r28
    3710:	61 5f       	subi	r22, 0xF1	; 241
    3712:	7f 4f       	sbci	r23, 0xFF	; 255
    3714:	c7 01       	movw	r24, r14
    3716:	8a 0d       	add	r24, r10
    3718:	9b 1d       	adc	r25, r11
    371a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
            len +=
    371e:	a8 0e       	add	r10, r24
    3720:	b9 1e       	adc	r11, r25
                &len_value_type);
            if ((tag_number == 2) && (len < apdu_len)) {
    3722:	8f 85       	ldd	r24, Y+15	; 0x0f
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	01 f5       	brne	.+64     	; 0x3768 <rp_decode_service_request+0x12a>
    3728:	ac 14       	cp	r10, r12
    372a:	bd 04       	cpc	r11, r13
    372c:	e8 f4       	brcc	.+58     	; 0x3768 <rp_decode_service_request+0x12a>
                len +=
                    decode_unsigned(&apdu[len], len_value_type, &array_value);
    372e:	49 85       	ldd	r20, Y+9	; 0x09
    3730:	5a 85       	ldd	r21, Y+10	; 0x0a
    3732:	6b 85       	ldd	r22, Y+11	; 0x0b
    3734:	7c 85       	ldd	r23, Y+12	; 0x0c
    3736:	9e 01       	movw	r18, r28
    3738:	2f 5f       	subi	r18, 0xFF	; 255
    373a:	3f 4f       	sbci	r19, 0xFF	; 255
    373c:	c7 01       	movw	r24, r14
    373e:	8a 0d       	add	r24, r10
    3740:	9b 1d       	adc	r25, r11
    3742:	0e 94 02 18 	call	0x3004	; 0x3004 <decode_unsigned>
                len +=
    3746:	a8 0e       	add	r10, r24
    3748:	b9 1e       	adc	r11, r25
                rpdata->array_index = array_value;
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
    374e:	ab 81       	ldd	r26, Y+3	; 0x03
    3750:	bc 81       	ldd	r27, Y+4	; 0x04
    3752:	f8 01       	movw	r30, r16
    3754:	82 87       	std	Z+10, r24	; 0x0a
    3756:	93 87       	std	Z+11, r25	; 0x0b
    3758:	a4 87       	std	Z+12, r26	; 0x0c
    375a:	b5 87       	std	Z+13, r27	; 0x0d
            }
        } else
            rpdata->array_index = BACNET_ARRAY_ALL;
    }

    if (len < apdu_len) {
    375c:	ac 14       	cp	r10, r12
    375e:	bd 04       	cpc	r11, r13
    3760:	c0 f4       	brcc	.+48     	; 0x3792 <rp_decode_service_request+0x154>
        /* If something left over now, we have an invalid request */
        if (rpdata) {
            rpdata->error_code = ERROR_CODE_REJECT_TOO_MANY_ARGUMENTS;
    3762:	81 e4       	ldi	r24, 0x41	; 65
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	0c c0       	rjmp	.+24     	; 0x3780 <rp_decode_service_request+0x142>
                rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    3768:	8e e3       	ldi	r24, 0x3E	; 62
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	09 c0       	rjmp	.+18     	; 0x3780 <rp_decode_service_request+0x142>
            rpdata->array_index = BACNET_ARRAY_ALL;
    376e:	8f ef       	ldi	r24, 0xFF	; 255
    3770:	9f ef       	ldi	r25, 0xFF	; 255
    3772:	dc 01       	movw	r26, r24
    3774:	f8 01       	movw	r30, r16
    3776:	82 87       	std	Z+10, r24	; 0x0a
    3778:	93 87       	std	Z+11, r25	; 0x0b
    377a:	a4 87       	std	Z+12, r26	; 0x0c
    377c:	b5 87       	std	Z+13, r27	; 0x0d
    377e:	09 c0       	rjmp	.+18     	; 0x3792 <rp_decode_service_request+0x154>
            rpdata->error_code = ERROR_CODE_REJECT_TOO_MANY_ARGUMENTS;
    3780:	f8 01       	movw	r30, r16
    3782:	95 8b       	std	Z+21, r25	; 0x15
    3784:	84 8b       	std	Z+20, r24	; 0x14
    3786:	07 c0       	rjmp	.+14     	; 0x3796 <rp_decode_service_request+0x158>
    if (len < apdu_len) {
    3788:	61 15       	cp	r22, r1
    378a:	71 05       	cpc	r23, r1
    378c:	21 f4       	brne	.+8      	; 0x3796 <rp_decode_service_request+0x158>
    unsigned len = 0;
    378e:	a1 2c       	mov	r10, r1
    3790:	b1 2c       	mov	r11, r1
        }
        return BACNET_STATUS_REJECT;
    }

    return (int) len;
    3792:	c5 01       	movw	r24, r10
    3794:	02 c0       	rjmp	.+4      	; 0x379a <rp_decode_service_request+0x15c>
        return BACNET_STATUS_REJECT;
    3796:	8d ef       	ldi	r24, 0xFD	; 253
    3798:	9f ef       	ldi	r25, 0xFF	; 255
}
    379a:	2f 96       	adiw	r28, 0x0f	; 15
    379c:	ea e0       	ldi	r30, 0x0A	; 10
    379e:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

000037a2 <rp_ack_encode_apdu_init>:
/* alternate method to encode the ack without extra buffer */
int rp_ack_encode_apdu_init(
    uint8_t * apdu,
    uint8_t invoke_id,
    BACNET_READ_PROPERTY_DATA * rpdata)
{
    37a2:	ef 92       	push	r14
    37a4:	ff 92       	push	r15
    37a6:	0f 93       	push	r16
    37a8:	1f 93       	push	r17
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	ec 01       	movw	r28, r24
    37b0:	7a 01       	movw	r14, r20
    int len = 0;        /* length of each encoding */
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	e9 f1       	breq	.+122    	; 0x3830 <rp_ack_encode_apdu_init+0x8e>
        apdu[0] = PDU_TYPE_COMPLEX_ACK; /* complex ACK service */
    37b6:	80 e3       	ldi	r24, 0x30	; 48
    37b8:	88 83       	st	Y, r24
        apdu[1] = invoke_id;    /* original invoke id from request */
    37ba:	69 83       	std	Y+1, r22	; 0x01
        apdu[2] = SERVICE_CONFIRMED_READ_PROPERTY;      /* service choice */
    37bc:	8c e0       	ldi	r24, 0x0C	; 12
    37be:	8a 83       	std	Y+2, r24	; 0x02
        apdu_len = 3;

        /* service ack follows */
        len =
    37c0:	fa 01       	movw	r30, r20
    37c2:	02 81       	ldd	r16, Z+2	; 0x02
    37c4:	13 81       	ldd	r17, Z+3	; 0x03
    37c6:	24 81       	ldd	r18, Z+4	; 0x04
    37c8:	35 81       	ldd	r19, Z+5	; 0x05
    37ca:	40 81       	ld	r20, Z
    37cc:	51 81       	ldd	r21, Z+1	; 0x01
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	ce 01       	movw	r24, r28
    37d2:	03 96       	adiw	r24, 0x03	; 3
    37d4:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <encode_context_object_id>
            encode_context_object_id(&apdu[apdu_len], 0, rpdata->object_type,
            rpdata->object_instance);
        apdu_len += len;
    37d8:	8c 01       	movw	r16, r24
    37da:	0d 5f       	subi	r16, 0xFD	; 253
    37dc:	1f 4f       	sbci	r17, 0xFF	; 255
        len =
    37de:	f7 01       	movw	r30, r14
    37e0:	26 81       	ldd	r18, Z+6	; 0x06
    37e2:	37 81       	ldd	r19, Z+7	; 0x07
    37e4:	40 85       	ldd	r20, Z+8	; 0x08
    37e6:	51 85       	ldd	r21, Z+9	; 0x09
    37e8:	61 e0       	ldi	r22, 0x01	; 1
    37ea:	ce 01       	movw	r24, r28
    37ec:	80 0f       	add	r24, r16
    37ee:	91 1f       	adc	r25, r17
    37f0:	0e 94 00 19 	call	0x3200	; 0x3200 <encode_context_enumerated>
            encode_context_enumerated(&apdu[apdu_len], 1,
            rpdata->object_property);
        apdu_len += len;
    37f4:	08 0f       	add	r16, r24
    37f6:	19 1f       	adc	r17, r25
        /* context 2 array index is optional */
        if (rpdata->array_index != BACNET_ARRAY_ALL) {
    37f8:	f7 01       	movw	r30, r14
    37fa:	22 85       	ldd	r18, Z+10	; 0x0a
    37fc:	33 85       	ldd	r19, Z+11	; 0x0b
    37fe:	44 85       	ldd	r20, Z+12	; 0x0c
    3800:	55 85       	ldd	r21, Z+13	; 0x0d
    3802:	2f 3f       	cpi	r18, 0xFF	; 255
    3804:	ff ef       	ldi	r31, 0xFF	; 255
    3806:	3f 07       	cpc	r19, r31
    3808:	4f 07       	cpc	r20, r31
    380a:	5f 07       	cpc	r21, r31
    380c:	41 f0       	breq	.+16     	; 0x381e <rp_ack_encode_apdu_init+0x7c>
            len =
    380e:	62 e0       	ldi	r22, 0x02	; 2
    3810:	ce 01       	movw	r24, r28
    3812:	80 0f       	add	r24, r16
    3814:	91 1f       	adc	r25, r17
    3816:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <encode_context_unsigned>
                encode_context_unsigned(&apdu[apdu_len], 2,
                rpdata->array_index);
            apdu_len += len;
    381a:	08 0f       	add	r16, r24
    381c:	19 1f       	adc	r17, r25
        }
        len = encode_opening_tag(&apdu[apdu_len], 3);
    381e:	63 e0       	ldi	r22, 0x03	; 3
    3820:	ce 01       	movw	r24, r28
    3822:	80 0f       	add	r24, r16
    3824:	91 1f       	adc	r25, r17
    3826:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <encode_opening_tag>
        apdu_len += len;
    382a:	80 0f       	add	r24, r16
    382c:	91 1f       	adc	r25, r17
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <rp_ack_encode_apdu_init+0x92>
    int apdu_len = 0;   /* total length of the apdu, return value */
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	e6 e0       	ldi	r30, 0x06	; 6
    383a:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

0000383e <rp_ack_encode_apdu_object_property_end>:
int rp_ack_encode_apdu_object_property_end(
    uint8_t * apdu)
{
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	21 f0       	breq	.+8      	; 0x384a <rp_ack_encode_apdu_object_property_end+0xc>
        apdu_len = encode_closing_tag(&apdu[0], 3);
    3842:	63 e0       	ldi	r22, 0x03	; 3
    3844:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <encode_closing_tag>
    3848:	08 95       	ret
    int apdu_len = 0;   /* total length of the apdu, return value */
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    384e:	08 95       	ret

00003850 <wp_decode_service_request>:
   using unique values less than zero */
int wp_decode_service_request(
    uint8_t * apdu,
    unsigned apdu_len,
    BACNET_WRITE_PROPERTY_DATA * wpdata)
{
    3850:	af e0       	ldi	r26, 0x0F	; 15
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	ee e2       	ldi	r30, 0x2E	; 46
    3856:	fc e1       	ldi	r31, 0x1C	; 28
    3858:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__prologue_saves__+0xc>
    385c:	8c 01       	movw	r16, r24
    385e:	6b 01       	movw	r12, r22
    3860:	7a 01       	movw	r14, r20
    int len = 0;
    int tag_len = 0;
    uint8_t tag_number = 0;
    3862:	1f 86       	std	Y+15, r1	; 0x0f
    uint32_t len_value_type = 0;
    3864:	19 86       	std	Y+9, r1	; 0x09
    3866:	1a 86       	std	Y+10, r1	; 0x0a
    3868:	1b 86       	std	Y+11, r1	; 0x0b
    386a:	1c 86       	std	Y+12, r1	; 0x0c
    uint16_t type = 0;  /* for decoding */
    386c:	1e 86       	std	Y+14, r1	; 0x0e
    386e:	1d 86       	std	Y+13, r1	; 0x0d
    uint32_t property = 0;      /* for decoding */
    3870:	1d 82       	std	Y+5, r1	; 0x05
    3872:	1e 82       	std	Y+6, r1	; 0x06
    3874:	1f 82       	std	Y+7, r1	; 0x07
    3876:	18 86       	std	Y+8, r1	; 0x08
    uint32_t unsigned_value = 0;
    3878:	19 82       	std	Y+1, r1	; 0x01
    387a:	1a 82       	std	Y+2, r1	; 0x02
    387c:	1b 82       	std	Y+3, r1	; 0x03
    387e:	1c 82       	std	Y+4, r1	; 0x04
    int i = 0;  /* loop counter */

    /* check for value pointers */
    if (apdu_len && wpdata) {
    3880:	61 15       	cp	r22, r1
    3882:	71 05       	cpc	r23, r1
    3884:	09 f4       	brne	.+2      	; 0x3888 <wp_decode_service_request+0x38>
    3886:	dd c0       	rjmp	.+442    	; 0x3a42 <wp_decode_service_request+0x1f2>
    3888:	41 15       	cp	r20, r1
    388a:	51 05       	cpc	r21, r1
    388c:	09 f4       	brne	.+2      	; 0x3890 <wp_decode_service_request+0x40>
    388e:	d9 c0       	rjmp	.+434    	; 0x3a42 <wp_decode_service_request+0x1f2>
        /* Tag 0: Object ID          */
        if (!decode_is_context_tag(&apdu[len++], 0))
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	0e 94 08 16 	call	0x2c10	; 0x2c10 <decode_is_context_tag>
    3896:	81 11       	cpse	r24, r1
    3898:	02 c0       	rjmp	.+4      	; 0x389e <wp_decode_service_request+0x4e>
            return -1;
    389a:	8f ef       	ldi	r24, 0xFF	; 255
    389c:	da c0       	rjmp	.+436    	; 0x3a52 <wp_decode_service_request+0x202>
        len += decode_object_id(&apdu[len], &type, &wpdata->object_instance);
    389e:	a7 01       	movw	r20, r14
    38a0:	4e 5f       	subi	r20, 0xFE	; 254
    38a2:	5f 4f       	sbci	r21, 0xFF	; 255
    38a4:	be 01       	movw	r22, r28
    38a6:	63 5f       	subi	r22, 0xF3	; 243
    38a8:	7f 4f       	sbci	r23, 0xFF	; 255
    38aa:	c8 01       	movw	r24, r16
    38ac:	01 96       	adiw	r24, 0x01	; 1
    38ae:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <decode_object_id>
    38b2:	01 96       	adiw	r24, 0x01	; 1
    38b4:	5c 01       	movw	r10, r24
        wpdata->object_type = (BACNET_OBJECT_TYPE) type;
    38b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ba:	f7 01       	movw	r30, r14
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	80 83       	st	Z, r24
        /* Tag 1: Property ID */
        len +=
            decode_tag_number_and_value(&apdu[len], &tag_number,
    38c0:	ae 01       	movw	r20, r28
    38c2:	47 5f       	subi	r20, 0xF7	; 247
    38c4:	5f 4f       	sbci	r21, 0xFF	; 255
    38c6:	be 01       	movw	r22, r28
    38c8:	61 5f       	subi	r22, 0xF1	; 241
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	c8 01       	movw	r24, r16
    38ce:	8a 0d       	add	r24, r10
    38d0:	9b 1d       	adc	r25, r11
    38d2:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
        len +=
    38d6:	a8 0e       	add	r10, r24
    38d8:	b9 1e       	adc	r11, r25
            &len_value_type);
        if (tag_number != 1)
    38da:	8f 85       	ldd	r24, Y+15	; 0x0f
    38dc:	81 30       	cpi	r24, 0x01	; 1
    38de:	e9 f6       	brne	.-70     	; 0x389a <wp_decode_service_request+0x4a>
            return -1;
        len += decode_enumerated(&apdu[len], len_value_type, &property);
    38e0:	49 85       	ldd	r20, Y+9	; 0x09
    38e2:	5a 85       	ldd	r21, Y+10	; 0x0a
    38e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e8:	9e 01       	movw	r18, r28
    38ea:	2b 5f       	subi	r18, 0xFB	; 251
    38ec:	3f 4f       	sbci	r19, 0xFF	; 255
    38ee:	c8 01       	movw	r24, r16
    38f0:	8a 0d       	add	r24, r10
    38f2:	9b 1d       	adc	r25, r11
    38f4:	0e 94 c4 18 	call	0x3188	; 0x3188 <decode_enumerated>
    38f8:	a8 0e       	add	r10, r24
    38fa:	b9 1e       	adc	r11, r25
        wpdata->object_property = (BACNET_PROPERTY_ID) property;
    38fc:	8d 81       	ldd	r24, Y+5	; 0x05
    38fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3900:	af 81       	ldd	r26, Y+7	; 0x07
    3902:	b8 85       	ldd	r27, Y+8	; 0x08
    3904:	f7 01       	movw	r30, r14
    3906:	86 83       	std	Z+6, r24	; 0x06
    3908:	97 83       	std	Z+7, r25	; 0x07
    390a:	a0 87       	std	Z+8, r26	; 0x08
    390c:	b1 87       	std	Z+9, r27	; 0x09
        /* Tag 2: Optional Array Index */
        /* note: decode without incrementing len so we can check for opening tag */
        tag_len =
    390e:	ae 01       	movw	r20, r28
    3910:	47 5f       	subi	r20, 0xF7	; 247
    3912:	5f 4f       	sbci	r21, 0xFF	; 255
    3914:	be 01       	movw	r22, r28
    3916:	61 5f       	subi	r22, 0xF1	; 241
    3918:	7f 4f       	sbci	r23, 0xFF	; 255
    391a:	c8 01       	movw	r24, r16
    391c:	8a 0d       	add	r24, r10
    391e:	9b 1d       	adc	r25, r11
    3920:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
            decode_tag_number_and_value(&apdu[len], &tag_number,
            &len_value_type);
        if (tag_number == 2) {
    3924:	2f 85       	ldd	r18, Y+15	; 0x0f
    3926:	22 30       	cpi	r18, 0x02	; 2
    3928:	a9 f4       	brne	.+42     	; 0x3954 <wp_decode_service_request+0x104>
            len += tag_len;
    392a:	a8 0e       	add	r10, r24
    392c:	b9 1e       	adc	r11, r25
            len +=
                decode_unsigned(&apdu[len], len_value_type, &unsigned_value);
    392e:	49 85       	ldd	r20, Y+9	; 0x09
    3930:	5a 85       	ldd	r21, Y+10	; 0x0a
    3932:	6b 85       	ldd	r22, Y+11	; 0x0b
    3934:	7c 85       	ldd	r23, Y+12	; 0x0c
    3936:	9e 01       	movw	r18, r28
    3938:	2f 5f       	subi	r18, 0xFF	; 255
    393a:	3f 4f       	sbci	r19, 0xFF	; 255
    393c:	c8 01       	movw	r24, r16
    393e:	8a 0d       	add	r24, r10
    3940:	9b 1d       	adc	r25, r11
    3942:	0e 94 02 18 	call	0x3004	; 0x3004 <decode_unsigned>
            len +=
    3946:	a8 0e       	add	r10, r24
    3948:	b9 1e       	adc	r11, r25
            wpdata->array_index = unsigned_value;
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	9a 81       	ldd	r25, Y+2	; 0x02
    394e:	ab 81       	ldd	r26, Y+3	; 0x03
    3950:	bc 81       	ldd	r27, Y+4	; 0x04
    3952:	03 c0       	rjmp	.+6      	; 0x395a <wp_decode_service_request+0x10a>
        } else
            wpdata->array_index = BACNET_ARRAY_ALL;
    3954:	8f ef       	ldi	r24, 0xFF	; 255
    3956:	9f ef       	ldi	r25, 0xFF	; 255
    3958:	dc 01       	movw	r26, r24
    395a:	f7 01       	movw	r30, r14
    395c:	82 87       	std	Z+10, r24	; 0x0a
    395e:	93 87       	std	Z+11, r25	; 0x0b
    3960:	a4 87       	std	Z+12, r26	; 0x0c
    3962:	b5 87       	std	Z+13, r27	; 0x0d
        /* Tag 3: opening context tag */
        if (!decode_is_opening_tag_number(&apdu[len], 3))
    3964:	48 01       	movw	r8, r16
    3966:	8a 0c       	add	r8, r10
    3968:	9b 1c       	adc	r9, r11
    396a:	63 e0       	ldi	r22, 0x03	; 3
    396c:	c4 01       	movw	r24, r8
    396e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <decode_is_opening_tag_number>
    3972:	88 23       	and	r24, r24
    3974:	09 f4       	brne	.+2      	; 0x3978 <wp_decode_service_request+0x128>
    3976:	91 cf       	rjmp	.-222    	; 0x389a <wp_decode_service_request+0x4a>
            return -1;
        /* determine the length of the data blob */
        wpdata->application_data_len =
            bacapp_data_len(&apdu[len], apdu_len - len,
    3978:	2d 81       	ldd	r18, Y+5	; 0x05
    397a:	3e 81       	ldd	r19, Y+6	; 0x06
    397c:	4f 81       	ldd	r20, Y+7	; 0x07
    397e:	58 85       	ldd	r21, Y+8	; 0x08
    3980:	b6 01       	movw	r22, r12
    3982:	6a 19       	sub	r22, r10
    3984:	7b 09       	sbc	r23, r11
    3986:	c4 01       	movw	r24, r8
    3988:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <bacapp_data_len>
        wpdata->application_data_len =
    398c:	f7 01       	movw	r30, r14
    398e:	e0 5c       	subi	r30, 0xC0	; 192
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	80 83       	st	Z, r24
            (BACNET_PROPERTY_ID) property);
        /* a tag number of 3 is not extended so only one octet */
        len++;
    3996:	ff ef       	ldi	r31, 0xFF	; 255
    3998:	af 1a       	sub	r10, r31
    399a:	bf 0a       	sbc	r11, r31
        /* copy the data from the APDU */
        for (i = 0; i < wpdata->application_data_len; i++) {
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	28 17       	cp	r18, r24
    39a2:	39 07       	cpc	r19, r25
    39a4:	5c f4       	brge	.+22     	; 0x39bc <wp_decode_service_request+0x16c>
    39a6:	f4 01       	movw	r30, r8
    39a8:	e2 0f       	add	r30, r18
    39aa:	f3 1f       	adc	r31, r19
            wpdata->application_data[i] = apdu[len + i];
    39ac:	41 81       	ldd	r20, Z+1	; 0x01
    39ae:	f7 01       	movw	r30, r14
    39b0:	e2 0f       	add	r30, r18
    39b2:	f3 1f       	adc	r31, r19
    39b4:	46 87       	std	Z+14, r20	; 0x0e
        for (i = 0; i < wpdata->application_data_len; i++) {
    39b6:	2f 5f       	subi	r18, 0xFF	; 255
    39b8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ba:	f2 cf       	rjmp	.-28     	; 0x39a0 <wp_decode_service_request+0x150>
        }
        /* add on the data length */
        len += wpdata->application_data_len;
    39bc:	a8 0e       	add	r10, r24
    39be:	b9 1e       	adc	r11, r25
        if (!decode_is_closing_tag_number(&apdu[len], 3))
    39c0:	63 e0       	ldi	r22, 0x03	; 3
    39c2:	c8 01       	movw	r24, r16
    39c4:	8a 0d       	add	r24, r10
    39c6:	9b 1d       	adc	r25, r11
    39c8:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <decode_is_closing_tag_number>
    39cc:	88 23       	and	r24, r24
    39ce:	e1 f1       	breq	.+120    	; 0x3a48 <wp_decode_service_request+0x1f8>
            return -2;
        /* a tag number of 3 is not extended so only one octet */
        len++;
    39d0:	2f ef       	ldi	r18, 0xFF	; 255
    39d2:	a2 1a       	sub	r10, r18
    39d4:	b2 0a       	sbc	r11, r18
        /* Tag 4: optional Priority - assumed MAX if not explicitly set */
        wpdata->priority = BACNET_MAX_PRIORITY;
    39d6:	82 e4       	ldi	r24, 0x42	; 66
    39d8:	e8 0e       	add	r14, r24
    39da:	f1 1c       	adc	r15, r1
    39dc:	80 e1       	ldi	r24, 0x10	; 16
    39de:	f7 01       	movw	r30, r14
    39e0:	80 83       	st	Z, r24
        if ((unsigned) len < apdu_len) {
    39e2:	ac 14       	cp	r10, r12
    39e4:	bd 04       	cpc	r11, r13
    39e6:	90 f5       	brcc	.+100    	; 0x3a4c <wp_decode_service_request+0x1fc>
            tag_len =
    39e8:	ae 01       	movw	r20, r28
    39ea:	47 5f       	subi	r20, 0xF7	; 247
    39ec:	5f 4f       	sbci	r21, 0xFF	; 255
    39ee:	be 01       	movw	r22, r28
    39f0:	61 5f       	subi	r22, 0xF1	; 241
    39f2:	7f 4f       	sbci	r23, 0xFF	; 255
    39f4:	c8 01       	movw	r24, r16
    39f6:	8a 0d       	add	r24, r10
    39f8:	9b 1d       	adc	r25, r11
    39fa:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
                decode_tag_number_and_value(&apdu[len], &tag_number,
                &len_value_type);
            if (tag_number == 4) {
    39fe:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a00:	24 30       	cpi	r18, 0x04	; 4
    3a02:	21 f5       	brne	.+72     	; 0x3a4c <wp_decode_service_request+0x1fc>
                len += tag_len;
    3a04:	8a 0d       	add	r24, r10
    3a06:	9b 1d       	adc	r25, r11
                len =
    3a08:	49 85       	ldd	r20, Y+9	; 0x09
    3a0a:	5a 85       	ldd	r21, Y+10	; 0x0a
    3a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a10:	9e 01       	movw	r18, r28
    3a12:	2f 5f       	subi	r18, 0xFF	; 255
    3a14:	3f 4f       	sbci	r19, 0xFF	; 255
    3a16:	80 0f       	add	r24, r16
    3a18:	91 1f       	adc	r25, r17
    3a1a:	0e 94 02 18 	call	0x3004	; 0x3004 <decode_unsigned>
                    decode_unsigned(&apdu[len], len_value_type,
                    &unsigned_value);
                if ((unsigned_value >= BACNET_MIN_PRIORITY)
                    && (unsigned_value <= BACNET_MAX_PRIORITY)) {
    3a1e:	09 81       	ldd	r16, Y+1	; 0x01
    3a20:	1a 81       	ldd	r17, Y+2	; 0x02
    3a22:	2b 81       	ldd	r18, Y+3	; 0x03
    3a24:	3c 81       	ldd	r19, Y+4	; 0x04
    3a26:	b9 01       	movw	r22, r18
    3a28:	a8 01       	movw	r20, r16
    3a2a:	41 50       	subi	r20, 0x01	; 1
    3a2c:	51 09       	sbc	r21, r1
    3a2e:	61 09       	sbc	r22, r1
    3a30:	71 09       	sbc	r23, r1
                if ((unsigned_value >= BACNET_MIN_PRIORITY)
    3a32:	40 31       	cpi	r20, 0x10	; 16
    3a34:	51 05       	cpc	r21, r1
    3a36:	61 05       	cpc	r22, r1
    3a38:	71 05       	cpc	r23, r1
    3a3a:	50 f4       	brcc	.+20     	; 0x3a50 <wp_decode_service_request+0x200>
                    wpdata->priority = (uint8_t) unsigned_value;
    3a3c:	f7 01       	movw	r30, r14
    3a3e:	00 83       	st	Z, r16
    3a40:	09 c0       	rjmp	.+18     	; 0x3a54 <wp_decode_service_request+0x204>
    int len = 0;
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	06 c0       	rjmp	.+12     	; 0x3a54 <wp_decode_service_request+0x204>
            return -2;
    3a48:	8e ef       	ldi	r24, 0xFE	; 254
    3a4a:	03 c0       	rjmp	.+6      	; 0x3a52 <wp_decode_service_request+0x202>
        len++;
    3a4c:	c5 01       	movw	r24, r10
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <wp_decode_service_request+0x204>
                } else
                    return -5;
    3a50:	8b ef       	ldi	r24, 0xFB	; 251
    3a52:	9f ef       	ldi	r25, 0xFF	; 255
            }
        }
    }

    return len;
}
    3a54:	2f 96       	adiw	r28, 0x0f	; 15
    3a56:	ec e0       	ldi	r30, 0x0C	; 12
    3a58:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__epilogue_restores__+0xc>

00003a5c <whois_decode_service_request>:
int whois_decode_service_request(
    uint8_t * apdu,
    unsigned apdu_len,
    int32_t * pLow_limit,
    int32_t * pHigh_limit)
{
    3a5c:	a9 e0       	ldi	r26, 0x09	; 9
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	e4 e3       	ldi	r30, 0x34	; 52
    3a62:	fd e1       	ldi	r31, 0x1D	; 29
    3a64:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__prologue_saves__+0xc>
    3a68:	6c 01       	movw	r12, r24
    3a6a:	5b 01       	movw	r10, r22
    3a6c:	7a 01       	movw	r14, r20
    3a6e:	89 01       	movw	r16, r18
    unsigned int len = 0;
    uint8_t tag_number = 0;
    3a70:	19 86       	std	Y+9, r1	; 0x09
    uint32_t len_value = 0;
    3a72:	1d 82       	std	Y+5, r1	; 0x05
    3a74:	1e 82       	std	Y+6, r1	; 0x06
    3a76:	1f 82       	std	Y+7, r1	; 0x07
    3a78:	18 86       	std	Y+8, r1	; 0x08
    uint32_t decoded_value = 0;
    3a7a:	19 82       	std	Y+1, r1	; 0x01
    3a7c:	1a 82       	std	Y+2, r1	; 0x02
    3a7e:	1b 82       	std	Y+3, r1	; 0x03
    3a80:	1c 82       	std	Y+4, r1	; 0x04

    /* optional limits - must be used as a pair */
    if (apdu_len) {
    3a82:	61 15       	cp	r22, r1
    3a84:	71 05       	cpc	r23, r1
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <whois_decode_service_request+0x2e>
    3a88:	68 c0       	rjmp	.+208    	; 0x3b5a <whois_decode_service_request+0xfe>
        len +=
            decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
    3a8a:	ae 01       	movw	r20, r28
    3a8c:	4b 5f       	subi	r20, 0xFB	; 251
    3a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a90:	be 01       	movw	r22, r28
    3a92:	67 5f       	subi	r22, 0xF7	; 247
    3a94:	7f 4f       	sbci	r23, 0xFF	; 255
    3a96:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
    3a9a:	4c 01       	movw	r8, r24
        if (tag_number != 0) {
    3a9c:	89 85       	ldd	r24, Y+9	; 0x09
    3a9e:	88 23       	and	r24, r24
    3aa0:	19 f0       	breq	.+6      	; 0x3aa8 <whois_decode_service_request+0x4c>
            return BACNET_STATUS_ERROR;
    3aa2:	8f ef       	ldi	r24, 0xFF	; 255
    3aa4:	9f ef       	ldi	r25, 0xFF	; 255
    3aa6:	72 c0       	rjmp	.+228    	; 0x3b8c <whois_decode_service_request+0x130>
        }
        if (apdu_len > (unsigned)len) {
    3aa8:	8a 14       	cp	r8, r10
    3aaa:	9b 04       	cpc	r9, r11
    3aac:	d0 f7       	brcc	.-12     	; 0x3aa2 <whois_decode_service_request+0x46>
            len += decode_unsigned(&apdu[len], len_value, &decoded_value);
    3aae:	4d 81       	ldd	r20, Y+5	; 0x05
    3ab0:	5e 81       	ldd	r21, Y+6	; 0x06
    3ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab4:	78 85       	ldd	r23, Y+8	; 0x08
    3ab6:	9e 01       	movw	r18, r28
    3ab8:	2f 5f       	subi	r18, 0xFF	; 255
    3aba:	3f 4f       	sbci	r19, 0xFF	; 255
    3abc:	c6 01       	movw	r24, r12
    3abe:	88 0d       	add	r24, r8
    3ac0:	99 1d       	adc	r25, r9
    3ac2:	0e 94 02 18 	call	0x3004	; 0x3004 <decode_unsigned>
    3ac6:	88 0e       	add	r8, r24
    3ac8:	99 1e       	adc	r9, r25
            if (decoded_value <= BACNET_MAX_INSTANCE) {
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	ab 81       	ldd	r26, Y+3	; 0x03
    3ad0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ad2:	00 97       	sbiw	r24, 0x00	; 0
    3ad4:	20 e4       	ldi	r18, 0x40	; 64
    3ad6:	a2 07       	cpc	r26, r18
    3ad8:	b1 05       	cpc	r27, r1
    3ada:	40 f4       	brcc	.+16     	; 0x3aec <whois_decode_service_request+0x90>
                if (pLow_limit) {
    3adc:	e1 14       	cp	r14, r1
    3ade:	f1 04       	cpc	r15, r1
    3ae0:	29 f0       	breq	.+10     	; 0x3aec <whois_decode_service_request+0x90>
                    *pLow_limit = decoded_value;
    3ae2:	f7 01       	movw	r30, r14
    3ae4:	80 83       	st	Z, r24
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	a2 83       	std	Z+2, r26	; 0x02
    3aea:	b3 83       	std	Z+3, r27	; 0x03
                }
            }
            if (apdu_len > (unsigned)len) {
    3aec:	8a 14       	cp	r8, r10
    3aee:	9b 04       	cpc	r9, r11
    3af0:	c0 f6       	brcc	.-80     	; 0x3aa2 <whois_decode_service_request+0x46>
                len +=
                    decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
    3af2:	ae 01       	movw	r20, r28
    3af4:	4b 5f       	subi	r20, 0xFB	; 251
    3af6:	5f 4f       	sbci	r21, 0xFF	; 255
    3af8:	be 01       	movw	r22, r28
    3afa:	67 5f       	subi	r22, 0xF7	; 247
    3afc:	7f 4f       	sbci	r23, 0xFF	; 255
    3afe:	c6 01       	movw	r24, r12
    3b00:	88 0d       	add	r24, r8
    3b02:	99 1d       	adc	r25, r9
    3b04:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
                len +=
    3b08:	88 0e       	add	r8, r24
    3b0a:	99 1e       	adc	r9, r25
                if (tag_number != 1) {
    3b0c:	89 85       	ldd	r24, Y+9	; 0x09
    3b0e:	81 30       	cpi	r24, 0x01	; 1
    3b10:	41 f6       	brne	.-112    	; 0x3aa2 <whois_decode_service_request+0x46>
                    return BACNET_STATUS_ERROR;
                }
                if (apdu_len > (unsigned)len) {
    3b12:	8a 14       	cp	r8, r10
    3b14:	9b 04       	cpc	r9, r11
    3b16:	28 f6       	brcc	.-118    	; 0x3aa2 <whois_decode_service_request+0x46>
                    len += decode_unsigned(&apdu[len], len_value, &decoded_value);
    3b18:	4d 81       	ldd	r20, Y+5	; 0x05
    3b1a:	5e 81       	ldd	r21, Y+6	; 0x06
    3b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1e:	78 85       	ldd	r23, Y+8	; 0x08
    3b20:	9e 01       	movw	r18, r28
    3b22:	2f 5f       	subi	r18, 0xFF	; 255
    3b24:	3f 4f       	sbci	r19, 0xFF	; 255
    3b26:	c6 01       	movw	r24, r12
    3b28:	88 0d       	add	r24, r8
    3b2a:	99 1d       	adc	r25, r9
    3b2c:	0e 94 02 18 	call	0x3004	; 0x3004 <decode_unsigned>
    3b30:	88 0e       	add	r8, r24
    3b32:	99 1e       	adc	r9, r25
                    if (decoded_value <= BACNET_MAX_INSTANCE) {
    3b34:	49 81       	ldd	r20, Y+1	; 0x01
    3b36:	5a 81       	ldd	r21, Y+2	; 0x02
    3b38:	6b 81       	ldd	r22, Y+3	; 0x03
    3b3a:	7c 81       	ldd	r23, Y+4	; 0x04
    3b3c:	41 15       	cp	r20, r1
    3b3e:	51 05       	cpc	r21, r1
    3b40:	f0 e4       	ldi	r31, 0x40	; 64
    3b42:	6f 07       	cpc	r22, r31
    3b44:	71 05       	cpc	r23, r1
    3b46:	08 f5       	brcc	.+66     	; 0x3b8a <whois_decode_service_request+0x12e>
                        if (pHigh_limit) {
    3b48:	01 15       	cp	r16, r1
    3b4a:	11 05       	cpc	r17, r1
    3b4c:	f1 f0       	breq	.+60     	; 0x3b8a <whois_decode_service_request+0x12e>
                            *pHigh_limit = decoded_value;
    3b4e:	f8 01       	movw	r30, r16
    3b50:	40 83       	st	Z, r20
    3b52:	51 83       	std	Z+1, r21	; 0x01
    3b54:	62 83       	std	Z+2, r22	; 0x02
    3b56:	73 83       	std	Z+3, r23	; 0x03
    3b58:	18 c0       	rjmp	.+48     	; 0x3b8a <whois_decode_service_request+0x12e>
            }
        } else {
            return BACNET_STATUS_ERROR;
        }
    } else {
        if (pLow_limit) {
    3b5a:	41 15       	cp	r20, r1
    3b5c:	51 05       	cpc	r21, r1
    3b5e:	41 f0       	breq	.+16     	; 0x3b70 <whois_decode_service_request+0x114>
            *pLow_limit = -1;
    3b60:	8f ef       	ldi	r24, 0xFF	; 255
    3b62:	9f ef       	ldi	r25, 0xFF	; 255
    3b64:	dc 01       	movw	r26, r24
    3b66:	fa 01       	movw	r30, r20
    3b68:	80 83       	st	Z, r24
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	a2 83       	std	Z+2, r26	; 0x02
    3b6e:	b3 83       	std	Z+3, r27	; 0x03
        }
        if (pHigh_limit) {
    3b70:	01 15       	cp	r16, r1
    3b72:	11 05       	cpc	r17, r1
    3b74:	41 f0       	breq	.+16     	; 0x3b86 <whois_decode_service_request+0x12a>
            *pHigh_limit = -1;
    3b76:	8f ef       	ldi	r24, 0xFF	; 255
    3b78:	9f ef       	ldi	r25, 0xFF	; 255
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	f8 01       	movw	r30, r16
    3b7e:	80 83       	st	Z, r24
    3b80:	91 83       	std	Z+1, r25	; 0x01
    3b82:	a2 83       	std	Z+2, r26	; 0x02
    3b84:	b3 83       	std	Z+3, r27	; 0x03
        }
        len = 0;
    3b86:	81 2c       	mov	r8, r1
    3b88:	91 2c       	mov	r9, r1
    }

    return (int)len;
    3b8a:	c4 01       	movw	r24, r8
}
    3b8c:	29 96       	adiw	r28, 0x09	; 9
    3b8e:	ec e0       	ldi	r30, 0x0C	; 12
    3b90:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__epilogue_restores__+0xc>

00003b94 <abort_encode_apdu>:
int abort_encode_apdu(
    uint8_t * apdu,
    uint8_t invoke_id,
    uint8_t abort_reason,
    bool server)
{
    3b94:	fc 01       	movw	r30, r24
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    3b96:	00 97       	sbiw	r24, 0x00	; 0
    3b98:	59 f0       	breq	.+22     	; 0x3bb0 <abort_encode_apdu+0x1c>
        if (server)
    3b9a:	22 23       	and	r18, r18
    3b9c:	11 f0       	breq	.+4      	; 0x3ba2 <abort_encode_apdu+0xe>
            apdu[0] = PDU_TYPE_ABORT | 1;
    3b9e:	81 e7       	ldi	r24, 0x71	; 113
    3ba0:	01 c0       	rjmp	.+2      	; 0x3ba4 <abort_encode_apdu+0x10>
        else
            apdu[0] = PDU_TYPE_ABORT;
    3ba2:	80 e7       	ldi	r24, 0x70	; 112
    3ba4:	80 83       	st	Z, r24
        apdu[1] = invoke_id;
    3ba6:	61 83       	std	Z+1, r22	; 0x01
        apdu[2] = abort_reason;
    3ba8:	42 83       	std	Z+2, r20	; 0x02
        apdu_len = 3;
    3baa:	83 e0       	ldi	r24, 0x03	; 3
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	08 95       	ret
    int apdu_len = 0;   /* total length of the apdu, return value */
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    3bb4:	08 95       	ret

00003bb6 <reject_encode_apdu>:
/* encode service */
int reject_encode_apdu(
    uint8_t * apdu,
    uint8_t invoke_id,
    uint8_t reject_reason)
{
    3bb6:	fc 01       	movw	r30, r24
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	39 f0       	breq	.+14     	; 0x3bca <reject_encode_apdu+0x14>
        apdu[0] = PDU_TYPE_REJECT;
    3bbc:	80 e6       	ldi	r24, 0x60	; 96
    3bbe:	80 83       	st	Z, r24
        apdu[1] = invoke_id;
    3bc0:	61 83       	std	Z+1, r22	; 0x01
        apdu[2] = reject_reason;
    3bc2:	42 83       	std	Z+2, r20	; 0x02
        apdu_len = 3;
    3bc4:	83 e0       	ldi	r24, 0x03	; 3
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	08 95       	ret
    int apdu_len = 0;   /* total length of the apdu, return value */
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    3bce:	08 95       	ret

00003bd0 <bacerror_encode_apdu>:
    uint8_t * apdu,
    uint8_t invoke_id,
    BACNET_CONFIRMED_SERVICE service,
    BACNET_ERROR_CLASS error_class,
    BACNET_ERROR_CODE error_code)
{
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	ec 01       	movw	r28, r24
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    3bde:	00 97       	sbiw	r24, 0x00	; 0
    3be0:	c1 f0       	breq	.+48     	; 0x3c12 <bacerror_encode_apdu+0x42>
        apdu[0] = PDU_TYPE_ERROR;
    3be2:	90 e5       	ldi	r25, 0x50	; 80
    3be4:	98 83       	st	Y, r25
        apdu[1] = invoke_id;
    3be6:	69 83       	std	Y+1, r22	; 0x01
        apdu[2] = service;
    3be8:	4a 83       	std	Y+2, r20	; 0x02
        apdu_len = 3;
        /* service parameters */
        apdu_len +=
            encode_application_enumerated(&apdu[apdu_len], error_class);
    3bea:	a9 01       	movw	r20, r18
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	70 e0       	ldi	r23, 0x00	; 0
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	03 96       	adiw	r24, 0x03	; 3
    3bf4:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <encode_application_enumerated>
        apdu_len +=
    3bf8:	03 96       	adiw	r24, 0x03	; 3
    3bfa:	7c 01       	movw	r14, r24
        apdu_len += encode_application_enumerated(&apdu[apdu_len], error_code);
    3bfc:	a8 01       	movw	r20, r16
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	70 e0       	ldi	r23, 0x00	; 0
    3c02:	ce 01       	movw	r24, r28
    3c04:	8e 0d       	add	r24, r14
    3c06:	9f 1d       	adc	r25, r15
    3c08:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <encode_application_enumerated>
    3c0c:	8e 0d       	add	r24, r14
    3c0e:	9f 1d       	adc	r25, r15
    3c10:	02 c0       	rjmp	.+4      	; 0x3c16 <bacerror_encode_apdu+0x46>
    int apdu_len = 0;   /* total length of the apdu, return value */
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	e6 e0       	ldi	r30, 0x06	; 6
    3c1c:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

00003c20 <bacapp_decode_data>:
int bacapp_decode_data(
    uint8_t * apdu,
    uint8_t tag_data_type,
    uint32_t len_value_type,
    BACNET_APPLICATION_DATA_VALUE * value)
{
    3c20:	a6 e0       	ldi	r26, 0x06	; 6
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	e6 e1       	ldi	r30, 0x16	; 22
    3c26:	fe e1       	ldi	r31, 0x1E	; 30
    3c28:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__prologue_saves__+0x16>
    3c2c:	d6 2e       	mov	r13, r22
    3c2e:	ba 01       	movw	r22, r20
    3c30:	a9 01       	movw	r20, r18
    3c32:	78 01       	movw	r14, r16
    int len = 0;

    if (apdu && value) {
    3c34:	00 97       	sbiw	r24, 0x00	; 0
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <bacapp_decode_data+0x1a>
    3c38:	4a c0       	rjmp	.+148    	; 0x3cce <bacapp_decode_data+0xae>
    3c3a:	01 15       	cp	r16, r1
    3c3c:	11 05       	cpc	r17, r1
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <bacapp_decode_data+0x22>
    3c40:	46 c0       	rjmp	.+140    	; 0x3cce <bacapp_decode_data+0xae>
        switch (tag_data_type) {
    3c42:	27 e0       	ldi	r18, 0x07	; 7
    3c44:	d2 16       	cp	r13, r18
    3c46:	b1 f1       	breq	.+108    	; 0x3cb4 <bacapp_decode_data+0x94>
    3c48:	2d 15       	cp	r18, r13
    3c4a:	60 f0       	brcs	.+24     	; 0x3c64 <bacapp_decode_data+0x44>
    3c4c:	e2 e0       	ldi	r30, 0x02	; 2
    3c4e:	de 16       	cp	r13, r30
    3c50:	59 f1       	breq	.+86     	; 0x3ca8 <bacapp_decode_data+0x88>
    3c52:	f4 e0       	ldi	r31, 0x04	; 4
    3c54:	df 12       	cpse	r13, r31
    3c56:	3b c0       	rjmp	.+118    	; 0x3cce <bacapp_decode_data+0xae>
                break;
#endif
#if defined (BACAPP_REAL)
            case BACNET_APPLICATION_TAG_REAL:
                len =
                    decode_real_safe(&apdu[0], len_value_type,
    3c58:	98 01       	movw	r18, r16
    3c5a:	2d 5f       	subi	r18, 0xFD	; 253
    3c5c:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    3c5e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <decode_real_safe>
                    &(value->type.Real));
                break;
    3c62:	33 c0       	rjmp	.+102    	; 0x3cca <bacapp_decode_data+0xaa>
        switch (tag_data_type) {
    3c64:	29 e0       	ldi	r18, 0x09	; 9
    3c66:	d2 16       	cp	r13, r18
    3c68:	59 f1       	breq	.+86     	; 0x3cc0 <bacapp_decode_data+0xa0>
    3c6a:	ec e0       	ldi	r30, 0x0C	; 12
    3c6c:	de 12       	cpse	r13, r30
    3c6e:	2f c0       	rjmp	.+94     	; 0x3cce <bacapp_decode_data+0xae>
                break;
#endif
#if defined (BACAPP_OBJECT_ID)
            case BACNET_APPLICATION_TAG_OBJECT_ID:
                {
                    uint16_t object_type = 0;
    3c70:	1e 82       	std	Y+6, r1	; 0x06
    3c72:	1d 82       	std	Y+5, r1	; 0x05
                    uint32_t instance = 0;
    3c74:	19 82       	std	Y+1, r1	; 0x01
    3c76:	1a 82       	std	Y+2, r1	; 0x02
    3c78:	1b 82       	std	Y+3, r1	; 0x03
    3c7a:	1c 82       	std	Y+4, r1	; 0x04
                    len =
    3c7c:	8e 01       	movw	r16, r28
    3c7e:	0f 5f       	subi	r16, 0xFF	; 255
    3c80:	1f 4f       	sbci	r17, 0xFF	; 255
    3c82:	9e 01       	movw	r18, r28
    3c84:	2b 5f       	subi	r18, 0xFB	; 251
    3c86:	3f 4f       	sbci	r19, 0xFF	; 255
    3c88:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <decode_object_id_safe>
                        decode_object_id_safe(&apdu[0], len_value_type,
                        &object_type, &instance);
                    value->type.Object_Id.type = object_type;
    3c8c:	2d 81       	ldd	r18, Y+5	; 0x05
    3c8e:	3e 81       	ldd	r19, Y+6	; 0x06
    3c90:	f7 01       	movw	r30, r14
    3c92:	34 83       	std	Z+4, r19	; 0x04
    3c94:	23 83       	std	Z+3, r18	; 0x03
                    value->type.Object_Id.instance = instance;
    3c96:	49 81       	ldd	r20, Y+1	; 0x01
    3c98:	5a 81       	ldd	r21, Y+2	; 0x02
    3c9a:	6b 81       	ldd	r22, Y+3	; 0x03
    3c9c:	7c 81       	ldd	r23, Y+4	; 0x04
    3c9e:	45 83       	std	Z+5, r20	; 0x05
    3ca0:	56 83       	std	Z+6, r21	; 0x06
    3ca2:	67 83       	std	Z+7, r22	; 0x07
    3ca4:	70 87       	std	Z+8, r23	; 0x08
                }
                break;
    3ca6:	11 c0       	rjmp	.+34     	; 0x3cca <bacapp_decode_data+0xaa>
                    decode_unsigned(&apdu[0], len_value_type,
    3ca8:	98 01       	movw	r18, r16
    3caa:	2d 5f       	subi	r18, 0xFD	; 253
    3cac:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    3cae:	0e 94 02 18 	call	0x3004	; 0x3004 <decode_unsigned>
                break;
    3cb2:	0b c0       	rjmp	.+22     	; 0x3cca <bacapp_decode_data+0xaa>
                    decode_character_string(&apdu[0], len_value_type,
    3cb4:	98 01       	movw	r18, r16
    3cb6:	2d 5f       	subi	r18, 0xFD	; 253
    3cb8:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    3cba:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <decode_character_string>
                break;
    3cbe:	05 c0       	rjmp	.+10     	; 0x3cca <bacapp_decode_data+0xaa>
                    decode_enumerated(&apdu[0], len_value_type,
    3cc0:	98 01       	movw	r18, r16
    3cc2:	2d 5f       	subi	r18, 0xFD	; 253
    3cc4:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    3cc6:	0e 94 c4 18 	call	0x3188	; 0x3188 <decode_enumerated>
            default:
                break;
        }
    }

    if ((len == 0) && (tag_data_type != BACNET_APPLICATION_TAG_NULL) &&
    3cca:	00 97       	sbiw	r24, 0x00	; 0
    3ccc:	71 f4       	brne	.+28     	; 0x3cea <bacapp_decode_data+0xca>
    3cce:	f1 e0       	ldi	r31, 0x01	; 1
    3cd0:	fd 15       	cp	r31, r13
    3cd2:	48 f4       	brcc	.+18     	; 0x3ce6 <bacapp_decode_data+0xc6>
        (tag_data_type != BACNET_APPLICATION_TAG_BOOLEAN) &&
    3cd4:	26 e0       	ldi	r18, 0x06	; 6
    3cd6:	d2 16       	cp	r13, r18
    3cd8:	31 f0       	breq	.+12     	; 0x3ce6 <bacapp_decode_data+0xc6>
        (tag_data_type != BACNET_APPLICATION_TAG_OCTET_STRING)) {
        /* indicate that we were not able to decode the value */
        if (value) {
    3cda:	e1 14       	cp	r14, r1
    3cdc:	f1 04       	cpc	r15, r1
    3cde:	19 f0       	breq	.+6      	; 0x3ce6 <bacapp_decode_data+0xc6>
            value->tag = MAX_BACNET_APPLICATION_TAG;
    3ce0:	80 e1       	ldi	r24, 0x10	; 16
    3ce2:	f7 01       	movw	r30, r14
    3ce4:	82 83       	std	Z+2, r24	; 0x02
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
        }
    }
    return len;
}
    3cea:	26 96       	adiw	r28, 0x06	; 6
    3cec:	e7 e0       	ldi	r30, 0x07	; 7
    3cee:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__epilogue_restores__+0x16>

00003cf2 <bacapp_decode_application_data>:

int bacapp_decode_application_data(
    uint8_t * apdu,
    unsigned max_apdu_len,
    BACNET_APPLICATION_DATA_VALUE * value)
{
    3cf2:	a5 e0       	ldi	r26, 0x05	; 5
    3cf4:	b0 e0       	ldi	r27, 0x00	; 0
    3cf6:	ef e7       	ldi	r30, 0x7F	; 127
    3cf8:	fe e1       	ldi	r31, 0x1E	; 30
    3cfa:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    3cfe:	6c 01       	movw	r12, r24
    3d00:	7a 01       	movw	r14, r20
    int len = 0;
    int tag_len = 0;
    int decode_len = 0;
    uint8_t tag_number = 0;
    3d02:	1d 82       	std	Y+5, r1	; 0x05
    uint32_t len_value_type = 0;
    3d04:	19 82       	std	Y+1, r1	; 0x01
    3d06:	1a 82       	std	Y+2, r1	; 0x02
    3d08:	1b 82       	std	Y+3, r1	; 0x03
    3d0a:	1c 82       	std	Y+4, r1	; 0x04

    /* FIXME: use max_apdu_len! */
    (void)max_apdu_len;
    if (apdu && value && !IS_CONTEXT_SPECIFIC(*apdu)) {
    3d0c:	00 97       	sbiw	r24, 0x00	; 0
    3d0e:	91 f1       	breq	.+100    	; 0x3d74 <bacapp_decode_application_data+0x82>
    3d10:	41 15       	cp	r20, r1
    3d12:	51 05       	cpc	r21, r1
    3d14:	79 f1       	breq	.+94     	; 0x3d74 <bacapp_decode_application_data+0x82>
    3d16:	fc 01       	movw	r30, r24
    3d18:	80 81       	ld	r24, Z
    3d1a:	83 fd       	sbrc	r24, 3
    3d1c:	2b c0       	rjmp	.+86     	; 0x3d74 <bacapp_decode_application_data+0x82>
        value->context_specific = false;
    3d1e:	fa 01       	movw	r30, r20
    3d20:	10 82       	st	Z, r1
        tag_len =
    3d22:	ae 01       	movw	r20, r28
    3d24:	4f 5f       	subi	r20, 0xFF	; 255
    3d26:	5f 4f       	sbci	r21, 0xFF	; 255
    3d28:	be 01       	movw	r22, r28
    3d2a:	6b 5f       	subi	r22, 0xFB	; 251
    3d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2e:	c6 01       	movw	r24, r12
    3d30:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
    3d34:	5c 01       	movw	r10, r24
            decode_tag_number_and_value(&apdu[0], &tag_number,
            &len_value_type);
        if (tag_len) {
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	a1 f0       	breq	.+40     	; 0x3d62 <bacapp_decode_application_data+0x70>
            len += tag_len;
            value->tag = tag_number;
    3d3a:	6d 81       	ldd	r22, Y+5	; 0x05
    3d3c:	f7 01       	movw	r30, r14
    3d3e:	62 83       	std	Z+2, r22	; 0x02
            decode_len =
    3d40:	29 81       	ldd	r18, Y+1	; 0x01
    3d42:	3a 81       	ldd	r19, Y+2	; 0x02
    3d44:	4b 81       	ldd	r20, Y+3	; 0x03
    3d46:	5c 81       	ldd	r21, Y+4	; 0x04
    3d48:	87 01       	movw	r16, r14
    3d4a:	c6 01       	movw	r24, r12
    3d4c:	8a 0d       	add	r24, r10
    3d4e:	9b 1d       	adc	r25, r11
    3d50:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <bacapp_decode_data>
                bacapp_decode_data(&apdu[len], tag_number, len_value_type,
                value);
            if (value->tag != MAX_BACNET_APPLICATION_TAG) {
    3d54:	f7 01       	movw	r30, r14
    3d56:	22 81       	ldd	r18, Z+2	; 0x02
    3d58:	20 31       	cpi	r18, 0x10	; 16
    3d5a:	31 f0       	breq	.+12     	; 0x3d68 <bacapp_decode_application_data+0x76>
                len += decode_len;
    3d5c:	8a 0d       	add	r24, r10
    3d5e:	9b 1d       	adc	r25, r11
    3d60:	05 c0       	rjmp	.+10     	; 0x3d6c <bacapp_decode_application_data+0x7a>
    int len = 0;
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	02 c0       	rjmp	.+4      	; 0x3d6c <bacapp_decode_application_data+0x7a>
            } else {
                len = BACNET_STATUS_ERROR;
    3d68:	8f ef       	ldi	r24, 0xFF	; 255
    3d6a:	9f ef       	ldi	r25, 0xFF	; 255
            }
        }
        value->next = NULL;
    3d6c:	f7 01       	movw	r30, r14
    3d6e:	13 aa       	std	Z+51, r1	; 0x33
    3d70:	12 aa       	std	Z+50, r1	; 0x32
    3d72:	02 c0       	rjmp	.+4      	; 0x3d78 <bacapp_decode_application_data+0x86>
    int len = 0;
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    }

    return len;
}
    3d78:	25 96       	adiw	r28, 0x05	; 5
    3d7a:	ea e0       	ldi	r30, 0x0A	; 10
    3d7c:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00003d80 <bacapp_decode_data_len>:
    uint8_t tag_data_type,
    uint32_t len_value_type)
{
    int len = 0;

    if (apdu) {
    3d80:	89 2b       	or	r24, r25
    3d82:	29 f0       	breq	.+10     	; 0x3d8e <bacapp_decode_data_len+0xe>
        switch (tag_data_type) {
    3d84:	62 50       	subi	r22, 0x02	; 2
    3d86:	6b 30       	cpi	r22, 0x0B	; 11
    3d88:	10 f4       	brcc	.+4      	; 0x3d8e <bacapp_decode_data_len+0xe>
            case BACNET_APPLICATION_TAG_BIT_STRING:
            case BACNET_APPLICATION_TAG_ENUMERATED:
            case BACNET_APPLICATION_TAG_DATE:
            case BACNET_APPLICATION_TAG_TIME:
            case BACNET_APPLICATION_TAG_OBJECT_ID:
                len = (int) len_value_type;
    3d8a:	c9 01       	movw	r24, r18
                break;
    3d8c:	08 95       	ret
    int len = 0;
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
                break;
        }
    }

    return len;
}
    3d92:	08 95       	ret

00003d94 <bacapp_decode_application_data_len>:

int bacapp_decode_application_data_len(
    uint8_t * apdu,
    unsigned max_apdu_len)
{
    3d94:	a5 e0       	ldi	r26, 0x05	; 5
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	e0 ed       	ldi	r30, 0xD0	; 208
    3d9a:	fe e1       	ldi	r31, 0x1E	; 30
    3d9c:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__prologue_saves__+0x18>
    3da0:	8c 01       	movw	r16, r24
    int len = 0;
    int tag_len = 0;
    int decode_len = 0;
    uint8_t tag_number = 0;
    3da2:	1d 82       	std	Y+5, r1	; 0x05
    uint32_t len_value_type = 0;
    3da4:	19 82       	std	Y+1, r1	; 0x01
    3da6:	1a 82       	std	Y+2, r1	; 0x02
    3da8:	1b 82       	std	Y+3, r1	; 0x03
    3daa:	1c 82       	std	Y+4, r1	; 0x04

    /* FIXME: use max_apdu_len! */
    (void)max_apdu_len;
    if (apdu && !IS_CONTEXT_SPECIFIC(*apdu)) {
    3dac:	00 97       	sbiw	r24, 0x00	; 0
    3dae:	19 f4       	brne	.+6      	; 0x3db6 <bacapp_decode_application_data_len+0x22>
    int len = 0;
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	1c c0       	rjmp	.+56     	; 0x3dee <bacapp_decode_application_data_len+0x5a>
    if (apdu && !IS_CONTEXT_SPECIFIC(*apdu)) {
    3db6:	fc 01       	movw	r30, r24
    3db8:	80 81       	ld	r24, Z
    3dba:	83 fd       	sbrc	r24, 3
    3dbc:	f9 cf       	rjmp	.-14     	; 0x3db0 <bacapp_decode_application_data_len+0x1c>
        tag_len =
    3dbe:	ae 01       	movw	r20, r28
    3dc0:	4f 5f       	subi	r20, 0xFF	; 255
    3dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc4:	be 01       	movw	r22, r28
    3dc6:	6b 5f       	subi	r22, 0xFB	; 251
    3dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dca:	c8 01       	movw	r24, r16
    3dcc:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
    3dd0:	7c 01       	movw	r14, r24
            decode_tag_number_and_value(&apdu[0], &tag_number,
            &len_value_type);
        if (tag_len) {
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	69 f3       	breq	.-38     	; 0x3db0 <bacapp_decode_application_data_len+0x1c>
            len += tag_len;
            decode_len =
    3dd6:	29 81       	ldd	r18, Y+1	; 0x01
    3dd8:	3a 81       	ldd	r19, Y+2	; 0x02
    3dda:	4b 81       	ldd	r20, Y+3	; 0x03
    3ddc:	5c 81       	ldd	r21, Y+4	; 0x04
    3dde:	6d 81       	ldd	r22, Y+5	; 0x05
    3de0:	c8 01       	movw	r24, r16
    3de2:	8e 0d       	add	r24, r14
    3de4:	9f 1d       	adc	r25, r15
    3de6:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <bacapp_decode_data_len>
                bacapp_decode_data_len(&apdu[len], tag_number, len_value_type);
            len += decode_len;
    3dea:	8e 0d       	add	r24, r14
    3dec:	9f 1d       	adc	r25, r15
        }
    }

    return len;
}
    3dee:	25 96       	adiw	r28, 0x05	; 5
    3df0:	e6 e0       	ldi	r30, 0x06	; 6
    3df2:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x18>

00003df6 <bacapp_context_tag_type>:
    BACNET_PROPERTY_ID property,
    uint8_t tag_number)
{
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;

    switch (property) {
    3df6:	64 38       	cpi	r22, 0x84	; 132
    3df8:	71 05       	cpc	r23, r1
    3dfa:	81 05       	cpc	r24, r1
    3dfc:	91 05       	cpc	r25, r1
    3dfe:	09 f4       	brne	.+2      	; 0x3e02 <bacapp_context_tag_type+0xc>
    3e00:	47 c0       	rjmp	.+142    	; 0x3e90 <bacapp_context_tag_type+0x9a>
    3e02:	c0 f4       	brcc	.+48     	; 0x3e34 <bacapp_context_tag_type+0x3e>
    3e04:	66 32       	cpi	r22, 0x26	; 38
    3e06:	71 05       	cpc	r23, r1
    3e08:	81 05       	cpc	r24, r1
    3e0a:	91 05       	cpc	r25, r1
    3e0c:	e1 f1       	breq	.+120    	; 0x3e86 <bacapp_context_tag_type+0x90>
    3e0e:	30 f4       	brcc	.+12     	; 0x3e1c <bacapp_context_tag_type+0x26>
    3e10:	62 30       	cpi	r22, 0x02	; 2
    3e12:	71 05       	cpc	r23, r1
    3e14:	81 05       	cpc	r24, r1
    3e16:	91 05       	cpc	r25, r1
    3e18:	79 f1       	breq	.+94     	; 0x3e78 <bacapp_context_tag_type+0x82>
    3e1a:	57 c0       	rjmp	.+174    	; 0x3eca <bacapp_context_tag_type+0xd4>
    3e1c:	65 33       	cpi	r22, 0x35	; 53
    3e1e:	71 05       	cpc	r23, r1
    3e20:	81 05       	cpc	r24, r1
    3e22:	91 05       	cpc	r25, r1
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <bacapp_context_tag_type+0x32>
    3e26:	40 c0       	rjmp	.+128    	; 0x3ea8 <bacapp_context_tag_type+0xb2>
    3e28:	66 36       	cpi	r22, 0x66	; 102
    3e2a:	71 05       	cpc	r23, r1
    3e2c:	81 05       	cpc	r24, r1
    3e2e:	91 05       	cpc	r25, r1
    3e30:	d9 f1       	breq	.+118    	; 0x3ea8 <bacapp_context_tag_type+0xb2>
    3e32:	4b c0       	rjmp	.+150    	; 0x3eca <bacapp_context_tag_type+0xd4>
    3e34:	64 3d       	cpi	r22, 0xD4	; 212
    3e36:	71 05       	cpc	r23, r1
    3e38:	81 05       	cpc	r24, r1
    3e3a:	91 05       	cpc	r25, r1
    3e3c:	b1 f0       	breq	.+44     	; 0x3e6a <bacapp_context_tag_type+0x74>
    3e3e:	58 f4       	brcc	.+22     	; 0x3e56 <bacapp_context_tag_type+0x60>
    3e40:	68 39       	cpi	r22, 0x98	; 152
    3e42:	71 05       	cpc	r23, r1
    3e44:	81 05       	cpc	r24, r1
    3e46:	91 05       	cpc	r25, r1
    3e48:	91 f1       	breq	.+100    	; 0x3eae <bacapp_context_tag_type+0xb8>
    3e4a:	63 3d       	cpi	r22, 0xD3	; 211
    3e4c:	71 05       	cpc	r23, r1
    3e4e:	81 05       	cpc	r24, r1
    3e50:	91 05       	cpc	r25, r1
    3e52:	39 f1       	breq	.+78     	; 0x3ea2 <bacapp_context_tag_type+0xac>
    3e54:	3a c0       	rjmp	.+116    	; 0x3eca <bacapp_context_tag_type+0xd4>
    3e56:	66 3d       	cpi	r22, 0xD6	; 214
    3e58:	71 05       	cpc	r23, r1
    3e5a:	81 05       	cpc	r24, r1
    3e5c:	91 05       	cpc	r25, r1
    3e5e:	29 f0       	breq	.+10     	; 0x3e6a <bacapp_context_tag_type+0x74>
    3e60:	6a 3d       	cpi	r22, 0xDA	; 218
    3e62:	71 05       	cpc	r23, r1
    3e64:	81 05       	cpc	r24, r1
    3e66:	91 05       	cpc	r25, r1
    3e68:	81 f5       	brne	.+96     	; 0x3eca <bacapp_context_tag_type+0xd4>
        case PROP_ACTUAL_SHED_LEVEL:
        case PROP_REQUESTED_SHED_LEVEL:
        case PROP_EXPECTED_SHED_LEVEL:
            switch (tag_number) {
    3e6a:	42 30       	cpi	r20, 0x02	; 2
    3e6c:	40 f1       	brcs	.+80     	; 0x3ebe <bacapp_context_tag_type+0xc8>
    3e6e:	42 30       	cpi	r20, 0x02	; 2
    3e70:	61 f5       	brne	.+88     	; 0x3eca <bacapp_context_tag_type+0xd4>
                case 0:
                case 1:
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
                    break;
                case 2:
                    tag = BACNET_APPLICATION_TAG_REAL;
    3e72:	84 e0       	ldi	r24, 0x04	; 4
    3e74:	90 e0       	ldi	r25, 0x00	; 0
                    break;
    3e76:	08 95       	ret
    3e78:	49 30       	cpi	r20, 0x09	; 9
    3e7a:	38 f5       	brcc	.+78     	; 0x3eca <bacapp_context_tag_type+0xd4>
    3e7c:	e4 2f       	mov	r30, r20
    3e7e:	f0 e0       	ldi	r31, 0x00	; 0
    3e80:	e7 59       	subi	r30, 0x97	; 151
    3e82:	fe 4f       	sbci	r31, 0xFE	; 254
    3e84:	0b c0       	rjmp	.+22     	; 0x3e9c <bacapp_context_tag_type+0xa6>
                default:
                    break;
            }
            break;
        case PROP_EXCEPTION_SCHEDULE:
            switch (tag_number) {
    3e86:	41 30       	cpi	r20, 0x01	; 1
    3e88:	e9 f0       	breq	.+58     	; 0x3ec4 <bacapp_context_tag_type+0xce>
    3e8a:	43 30       	cpi	r20, 0x03	; 3
    3e8c:	c1 f0       	breq	.+48     	; 0x3ebe <bacapp_context_tag_type+0xc8>
    3e8e:	1d c0       	rjmp	.+58     	; 0x3eca <bacapp_context_tag_type+0xd4>
    3e90:	44 30       	cpi	r20, 0x04	; 4
    3e92:	d8 f4       	brcc	.+54     	; 0x3eca <bacapp_context_tag_type+0xd4>
    3e94:	e4 2f       	mov	r30, r20
    3e96:	f0 e0       	ldi	r31, 0x00	; 0
    3e98:	eb 59       	subi	r30, 0x9B	; 155
    3e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9c:	80 81       	ld	r24, Z
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	08 95       	ret
                    break;
            }
            break;
        case PROP_SUBORDINATE_LIST:
            /* BACnetARRAY[N] of BACnetDeviceObjectReference */
            switch (tag_number) {
    3ea2:	42 30       	cpi	r20, 0x02	; 2
    3ea4:	78 f0       	brcs	.+30     	; 0x3ec4 <bacapp_context_tag_type+0xce>
    3ea6:	11 c0       	rjmp	.+34     	; 0x3eca <bacapp_context_tag_type+0xd4>
            }
            break;

        case PROP_RECIPIENT_LIST:
            /* List of BACnetDestination */
            switch (tag_number) {
    3ea8:	44 23       	and	r20, r20
    3eaa:	61 f0       	breq	.+24     	; 0x3ec4 <bacapp_context_tag_type+0xce>
    3eac:	0e c0       	rjmp	.+28     	; 0x3eca <bacapp_context_tag_type+0xd4>
    3eae:	42 50       	subi	r20, 0x02	; 2
    3eb0:	43 30       	cpi	r20, 0x03	; 3
    3eb2:	58 f4       	brcc	.+22     	; 0x3eca <bacapp_context_tag_type+0xd4>
    3eb4:	e4 2f       	mov	r30, r20
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	ee 59       	subi	r30, 0x9E	; 158
    3eba:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebc:	ef cf       	rjmp	.-34     	; 0x3e9c <bacapp_context_tag_type+0xa6>
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
    3ebe:	82 e0       	ldi	r24, 0x02	; 2
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	08 95       	ret
                case 0:        /* Device Object ID */
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    3ec4:	8c e0       	ldi	r24, 0x0C	; 12
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	08 95       	ret
    3eca:	80 e1       	ldi	r24, 0x10	; 16
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
        default:
            break;
    }

    return tag;
}
    3ece:	08 95       	ret

00003ed0 <bacapp_decode_context_data_len>:

int bacapp_decode_context_data_len(
    uint8_t * apdu,
    unsigned max_apdu_len,
    BACNET_PROPERTY_ID property)
{
    3ed0:	a5 e0       	ldi	r26, 0x05	; 5
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	ee e6       	ldi	r30, 0x6E	; 110
    3ed6:	ff e1       	ldi	r31, 0x1F	; 31
    3ed8:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x10>
    3edc:	5c 01       	movw	r10, r24
    3ede:	69 01       	movw	r12, r18
    3ee0:	7a 01       	movw	r14, r20
    int apdu_len = 0, len = 0;
    int tag_len = 0;
    uint8_t tag_number = 0;
    3ee2:	1d 82       	std	Y+5, r1	; 0x05
    uint32_t len_value_type = 0;
    3ee4:	19 82       	std	Y+1, r1	; 0x01
    3ee6:	1a 82       	std	Y+2, r1	; 0x02
    3ee8:	1b 82       	std	Y+3, r1	; 0x03
    3eea:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t tag = 0;

    /* FIXME: use max_apdu_len! */
    (void)max_apdu_len;
    if (apdu && IS_CONTEXT_SPECIFIC(*apdu)) {
    3eec:	00 97       	sbiw	r24, 0x00	; 0
    3eee:	19 f4       	brne	.+6      	; 0x3ef6 <bacapp_decode_context_data_len+0x26>
    int apdu_len = 0, len = 0;
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	26 c0       	rjmp	.+76     	; 0x3f42 <bacapp_decode_context_data_len+0x72>
    if (apdu && IS_CONTEXT_SPECIFIC(*apdu)) {
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	80 81       	ld	r24, Z
    3efa:	83 ff       	sbrs	r24, 3
    3efc:	f9 cf       	rjmp	.-14     	; 0x3ef0 <bacapp_decode_context_data_len+0x20>
        tag_len =
    3efe:	ae 01       	movw	r20, r28
    3f00:	4f 5f       	subi	r20, 0xFF	; 255
    3f02:	5f 4f       	sbci	r21, 0xFF	; 255
    3f04:	be 01       	movw	r22, r28
    3f06:	6b 5f       	subi	r22, 0xFB	; 251
    3f08:	7f 4f       	sbci	r23, 0xFF	; 255
    3f0a:	c5 01       	movw	r24, r10
    3f0c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
    3f10:	8c 01       	movw	r16, r24
            decode_tag_number_and_value(&apdu[0], &tag_number,
            &len_value_type);
        if (tag_len) {
    3f12:	00 97       	sbiw	r24, 0x00	; 0
    3f14:	69 f3       	breq	.-38     	; 0x3ef0 <bacapp_decode_context_data_len+0x20>
            apdu_len = tag_len;
            tag = bacapp_context_tag_type(property, tag_number);
    3f16:	4d 81       	ldd	r20, Y+5	; 0x05
    3f18:	c7 01       	movw	r24, r14
    3f1a:	b6 01       	movw	r22, r12
    3f1c:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <bacapp_context_tag_type>
            if (tag < MAX_BACNET_APPLICATION_TAG) {
    3f20:	80 31       	cpi	r24, 0x10	; 16
    3f22:	58 f4       	brcc	.+22     	; 0x3f3a <bacapp_decode_context_data_len+0x6a>
                len =
    3f24:	29 81       	ldd	r18, Y+1	; 0x01
    3f26:	3a 81       	ldd	r19, Y+2	; 0x02
    3f28:	4b 81       	ldd	r20, Y+3	; 0x03
    3f2a:	5c 81       	ldd	r21, Y+4	; 0x04
    3f2c:	68 2f       	mov	r22, r24
    3f2e:	c5 01       	movw	r24, r10
    3f30:	80 0f       	add	r24, r16
    3f32:	91 1f       	adc	r25, r17
    3f34:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <bacapp_decode_data_len>
    3f38:	02 c0       	rjmp	.+4      	; 0x3f3e <bacapp_decode_context_data_len+0x6e>
                    bacapp_decode_data_len(&apdu[apdu_len], tag,
                    len_value_type);
                apdu_len += len;
            } else {
                apdu_len += len_value_type;
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3e:	80 0f       	add	r24, r16
    3f40:	91 1f       	adc	r25, r17
            }
        }
    }

    return apdu_len;
}
    3f42:	25 96       	adiw	r28, 0x05	; 5
    3f44:	ea e0       	ldi	r30, 0x0A	; 10
    3f46:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x10>

00003f4a <bacapp_data_len>:
   such as the value received in a WriteProperty request */
int bacapp_data_len(
    uint8_t * apdu,
    unsigned max_apdu_len,
    BACNET_PROPERTY_ID property)
{
    3f4a:	a5 e0       	ldi	r26, 0x05	; 5
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	eb ea       	ldi	r30, 0xAB	; 171
    3f50:	ff e1       	ldi	r31, 0x1F	; 31
    3f52:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x4>
    3f56:	6c 01       	movw	r12, r24
    3f58:	5b 01       	movw	r10, r22
    3f5a:	29 01       	movw	r4, r18
    3f5c:	3a 01       	movw	r6, r20
    int len = 0;
    int total_len = 0;
    int apdu_len = 0;
    uint8_t tag_number = 0;
    3f5e:	1d 82       	std	Y+5, r1	; 0x05
    uint8_t opening_tag_number = 0;
    uint8_t opening_tag_number_counter = 0;
    uint32_t value = 0;
    3f60:	19 82       	std	Y+1, r1	; 0x01
    3f62:	1a 82       	std	Y+2, r1	; 0x02
    3f64:	1b 82       	std	Y+3, r1	; 0x03
    3f66:	1c 82       	std	Y+4, r1	; 0x04

    if (IS_OPENING_TAG(apdu[0])) {
    3f68:	fc 01       	movw	r30, r24
    3f6a:	80 81       	ld	r24, Z
    3f6c:	87 70       	andi	r24, 0x07	; 7
    3f6e:	86 30       	cpi	r24, 0x06	; 6
    3f70:	09 f0       	breq	.+2      	; 0x3f74 <bacapp_data_len+0x2a>
    3f72:	4f c0       	rjmp	.+158    	; 0x4012 <bacapp_data_len+0xc8>
        len =
    3f74:	ae 01       	movw	r20, r28
    3f76:	4f 5f       	subi	r20, 0xFF	; 255
    3f78:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7a:	be 01       	movw	r22, r28
    3f7c:	6b 5f       	subi	r22, 0xFB	; 251
    3f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f80:	c6 01       	movw	r24, r12
    3f82:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
    3f86:	7c 01       	movw	r14, r24
            decode_tag_number_and_value(&apdu[apdu_len], &tag_number, &value);
        apdu_len += len;
        opening_tag_number = tag_number;
    3f88:	8d 80       	ldd	r8, Y+5	; 0x05
        opening_tag_number_counter = 1;
    3f8a:	99 24       	eor	r9, r9
    3f8c:	93 94       	inc	r9
    int total_len = 0;
    3f8e:	00 e0       	ldi	r16, 0x00	; 0
    3f90:	10 e0       	ldi	r17, 0x00	; 0
        while (opening_tag_number_counter) {
            if (IS_OPENING_TAG(apdu[apdu_len])) {
    3f92:	c6 01       	movw	r24, r12
    3f94:	8e 0d       	add	r24, r14
    3f96:	9f 1d       	adc	r25, r15
    3f98:	fc 01       	movw	r30, r24
    3f9a:	20 81       	ld	r18, Z
    3f9c:	32 2f       	mov	r19, r18
    3f9e:	37 70       	andi	r19, 0x07	; 7
    3fa0:	36 30       	cpi	r19, 0x06	; 6
    3fa2:	69 f4       	brne	.+26     	; 0x3fbe <bacapp_data_len+0x74>
                len =
    3fa4:	ae 01       	movw	r20, r28
    3fa6:	4f 5f       	subi	r20, 0xFF	; 255
    3fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    3faa:	be 01       	movw	r22, r28
    3fac:	6b 5f       	subi	r22, 0xFB	; 251
    3fae:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb0:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
                    decode_tag_number_and_value(&apdu[apdu_len], &tag_number,
                    &value);
                if (tag_number == opening_tag_number)
    3fb4:	2d 81       	ldd	r18, Y+5	; 0x05
    3fb6:	28 11       	cpse	r18, r8
    3fb8:	1d c0       	rjmp	.+58     	; 0x3ff4 <bacapp_data_len+0xaa>
                    opening_tag_number_counter++;
    3fba:	93 94       	inc	r9
    3fbc:	1b c0       	rjmp	.+54     	; 0x3ff4 <bacapp_data_len+0xaa>
            } else if (IS_CLOSING_TAG(apdu[apdu_len])) {
    3fbe:	37 30       	cpi	r19, 0x07	; 7
    3fc0:	69 f4       	brne	.+26     	; 0x3fdc <bacapp_data_len+0x92>
                len =
    3fc2:	ae 01       	movw	r20, r28
    3fc4:	4f 5f       	subi	r20, 0xFF	; 255
    3fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc8:	be 01       	movw	r22, r28
    3fca:	6b 5f       	subi	r22, 0xFB	; 251
    3fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fce:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <decode_tag_number_and_value>
                    decode_tag_number_and_value(&apdu[apdu_len], &tag_number,
                    &value);
                if (tag_number == opening_tag_number)
    3fd2:	2d 81       	ldd	r18, Y+5	; 0x05
    3fd4:	28 11       	cpse	r18, r8
    3fd6:	0e c0       	rjmp	.+28     	; 0x3ff4 <bacapp_data_len+0xaa>
                    opening_tag_number_counter--;
    3fd8:	9a 94       	dec	r9
    3fda:	0c c0       	rjmp	.+24     	; 0x3ff4 <bacapp_data_len+0xaa>
    3fdc:	b5 01       	movw	r22, r10
    3fde:	6e 19       	sub	r22, r14
    3fe0:	7f 09       	sbc	r23, r15
            } else if (IS_CONTEXT_SPECIFIC(apdu[apdu_len])) {
    3fe2:	23 ff       	sbrs	r18, 3
    3fe4:	05 c0       	rjmp	.+10     	; 0x3ff0 <bacapp_data_len+0xa6>
                /* context-specific tagged data */
                len =
    3fe6:	a3 01       	movw	r20, r6
    3fe8:	92 01       	movw	r18, r4
    3fea:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <bacapp_decode_context_data_len>
    3fee:	02 c0       	rjmp	.+4      	; 0x3ff4 <bacapp_data_len+0xaa>
                    bacapp_decode_context_data_len(&apdu[apdu_len],
                    max_apdu_len - apdu_len, property);
            } else {
                /* application tagged data */
                len =
    3ff0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <bacapp_decode_application_data_len>
                    bacapp_decode_application_data_len(&apdu[apdu_len],
                    max_apdu_len - apdu_len);
            }
            apdu_len += len;
    3ff4:	e8 0e       	add	r14, r24
    3ff6:	f9 1e       	adc	r15, r25
            if (opening_tag_number_counter) {
    3ff8:	99 20       	and	r9, r9
    3ffa:	29 f0       	breq	.+10     	; 0x4006 <bacapp_data_len+0xbc>
                if (len > 0) {
    3ffc:	18 16       	cp	r1, r24
    3ffe:	19 06       	cpc	r1, r25
    4000:	5c f4       	brge	.+22     	; 0x4018 <bacapp_data_len+0xce>
                    total_len += len;
    4002:	08 0f       	add	r16, r24
    4004:	19 1f       	adc	r17, r25
                    /* error: len is not incrementing */
                    total_len = BACNET_STATUS_ERROR;
                    break;
                }
            }
            if ((unsigned) apdu_len > max_apdu_len) {
    4006:	ae 14       	cp	r10, r14
    4008:	bf 04       	cpc	r11, r15
    400a:	30 f0       	brcs	.+12     	; 0x4018 <bacapp_data_len+0xce>
        while (opening_tag_number_counter) {
    400c:	91 10       	cpse	r9, r1
    400e:	c1 cf       	rjmp	.-126    	; 0x3f92 <bacapp_data_len+0x48>
    4010:	05 c0       	rjmp	.+10     	; 0x401c <bacapp_data_len+0xd2>
    int total_len = 0;
    4012:	00 e0       	ldi	r16, 0x00	; 0
    4014:	10 e0       	ldi	r17, 0x00	; 0
    4016:	02 c0       	rjmp	.+4      	; 0x401c <bacapp_data_len+0xd2>
                    total_len = BACNET_STATUS_ERROR;
    4018:	0f ef       	ldi	r16, 0xFF	; 255
    401a:	1f ef       	ldi	r17, 0xFF	; 255
            }
        }
    }

    return total_len;
}
    401c:	c8 01       	movw	r24, r16
    401e:	25 96       	adiw	r28, 0x05	; 5
    4020:	e0 e1       	ldi	r30, 0x10	; 16
    4022:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x4>

00004026 <__divmodhi4>:
    4026:	97 fb       	bst	r25, 7
    4028:	07 2e       	mov	r0, r23
    402a:	16 f4       	brtc	.+4      	; 0x4030 <__divmodhi4+0xa>
    402c:	00 94       	com	r0
    402e:	07 d0       	rcall	.+14     	; 0x403e <__divmodhi4_neg1>
    4030:	77 fd       	sbrc	r23, 7
    4032:	09 d0       	rcall	.+18     	; 0x4046 <__divmodhi4_neg2>
    4034:	0e 94 86 20 	call	0x410c	; 0x410c <__udivmodhi4>
    4038:	07 fc       	sbrc	r0, 7
    403a:	05 d0       	rcall	.+10     	; 0x4046 <__divmodhi4_neg2>
    403c:	3e f4       	brtc	.+14     	; 0x404c <__divmodhi4_exit>

0000403e <__divmodhi4_neg1>:
    403e:	90 95       	com	r25
    4040:	81 95       	neg	r24
    4042:	9f 4f       	sbci	r25, 0xFF	; 255
    4044:	08 95       	ret

00004046 <__divmodhi4_neg2>:
    4046:	70 95       	com	r23
    4048:	61 95       	neg	r22
    404a:	7f 4f       	sbci	r23, 0xFF	; 255

0000404c <__divmodhi4_exit>:
    404c:	08 95       	ret

0000404e <__udivmodsi4>:
    404e:	a1 e2       	ldi	r26, 0x21	; 33
    4050:	1a 2e       	mov	r1, r26
    4052:	aa 1b       	sub	r26, r26
    4054:	bb 1b       	sub	r27, r27
    4056:	fd 01       	movw	r30, r26
    4058:	0d c0       	rjmp	.+26     	; 0x4074 <__udivmodsi4_ep>

0000405a <__udivmodsi4_loop>:
    405a:	aa 1f       	adc	r26, r26
    405c:	bb 1f       	adc	r27, r27
    405e:	ee 1f       	adc	r30, r30
    4060:	ff 1f       	adc	r31, r31
    4062:	a2 17       	cp	r26, r18
    4064:	b3 07       	cpc	r27, r19
    4066:	e4 07       	cpc	r30, r20
    4068:	f5 07       	cpc	r31, r21
    406a:	20 f0       	brcs	.+8      	; 0x4074 <__udivmodsi4_ep>
    406c:	a2 1b       	sub	r26, r18
    406e:	b3 0b       	sbc	r27, r19
    4070:	e4 0b       	sbc	r30, r20
    4072:	f5 0b       	sbc	r31, r21

00004074 <__udivmodsi4_ep>:
    4074:	66 1f       	adc	r22, r22
    4076:	77 1f       	adc	r23, r23
    4078:	88 1f       	adc	r24, r24
    407a:	99 1f       	adc	r25, r25
    407c:	1a 94       	dec	r1
    407e:	69 f7       	brne	.-38     	; 0x405a <__udivmodsi4_loop>
    4080:	60 95       	com	r22
    4082:	70 95       	com	r23
    4084:	80 95       	com	r24
    4086:	90 95       	com	r25
    4088:	9b 01       	movw	r18, r22
    408a:	ac 01       	movw	r20, r24
    408c:	bd 01       	movw	r22, r26
    408e:	cf 01       	movw	r24, r30
    4090:	08 95       	ret

00004092 <__tablejump2__>:
    4092:	ee 0f       	add	r30, r30
    4094:	ff 1f       	adc	r31, r31

00004096 <__tablejump__>:
    4096:	05 90       	lpm	r0, Z+
    4098:	f4 91       	lpm	r31, Z
    409a:	e0 2d       	mov	r30, r0
    409c:	09 94       	ijmp

0000409e <__prologue_saves__>:
    409e:	2f 92       	push	r2
    40a0:	3f 92       	push	r3
    40a2:	4f 92       	push	r4
    40a4:	5f 92       	push	r5
    40a6:	6f 92       	push	r6
    40a8:	7f 92       	push	r7
    40aa:	8f 92       	push	r8
    40ac:	9f 92       	push	r9
    40ae:	af 92       	push	r10
    40b0:	bf 92       	push	r11
    40b2:	cf 92       	push	r12
    40b4:	df 92       	push	r13
    40b6:	ef 92       	push	r14
    40b8:	ff 92       	push	r15
    40ba:	0f 93       	push	r16
    40bc:	1f 93       	push	r17
    40be:	cf 93       	push	r28
    40c0:	df 93       	push	r29
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	ca 1b       	sub	r28, r26
    40c8:	db 0b       	sbc	r29, r27
    40ca:	0f b6       	in	r0, 0x3f	; 63
    40cc:	f8 94       	cli
    40ce:	de bf       	out	0x3e, r29	; 62
    40d0:	0f be       	out	0x3f, r0	; 63
    40d2:	cd bf       	out	0x3d, r28	; 61
    40d4:	09 94       	ijmp

000040d6 <__epilogue_restores__>:
    40d6:	2a 88       	ldd	r2, Y+18	; 0x12
    40d8:	39 88       	ldd	r3, Y+17	; 0x11
    40da:	48 88       	ldd	r4, Y+16	; 0x10
    40dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    40de:	6e 84       	ldd	r6, Y+14	; 0x0e
    40e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    40e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    40e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    40e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    40e8:	b9 84       	ldd	r11, Y+9	; 0x09
    40ea:	c8 84       	ldd	r12, Y+8	; 0x08
    40ec:	df 80       	ldd	r13, Y+7	; 0x07
    40ee:	ee 80       	ldd	r14, Y+6	; 0x06
    40f0:	fd 80       	ldd	r15, Y+5	; 0x05
    40f2:	0c 81       	ldd	r16, Y+4	; 0x04
    40f4:	1b 81       	ldd	r17, Y+3	; 0x03
    40f6:	aa 81       	ldd	r26, Y+2	; 0x02
    40f8:	b9 81       	ldd	r27, Y+1	; 0x01
    40fa:	ce 0f       	add	r28, r30
    40fc:	d1 1d       	adc	r29, r1
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	ed 01       	movw	r28, r26
    410a:	08 95       	ret

0000410c <__udivmodhi4>:
    410c:	aa 1b       	sub	r26, r26
    410e:	bb 1b       	sub	r27, r27
    4110:	51 e1       	ldi	r21, 0x11	; 17
    4112:	07 c0       	rjmp	.+14     	; 0x4122 <__udivmodhi4_ep>

00004114 <__udivmodhi4_loop>:
    4114:	aa 1f       	adc	r26, r26
    4116:	bb 1f       	adc	r27, r27
    4118:	a6 17       	cp	r26, r22
    411a:	b7 07       	cpc	r27, r23
    411c:	10 f0       	brcs	.+4      	; 0x4122 <__udivmodhi4_ep>
    411e:	a6 1b       	sub	r26, r22
    4120:	b7 0b       	sbc	r27, r23

00004122 <__udivmodhi4_ep>:
    4122:	88 1f       	adc	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	5a 95       	dec	r21
    4128:	a9 f7       	brne	.-22     	; 0x4114 <__udivmodhi4_loop>
    412a:	80 95       	com	r24
    412c:	90 95       	com	r25
    412e:	bc 01       	movw	r22, r24
    4130:	cd 01       	movw	r24, r26
    4132:	08 95       	ret

00004134 <_exit>:
    4134:	f8 94       	cli

00004136 <__stop_program>:
    4136:	ff cf       	rjmp	.-2      	; 0x4136 <__stop_program>
