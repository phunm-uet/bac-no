
bacnet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00004c3c  00004cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c1  0080021c  0080021c  00004dec  2**0
                  ALLOC
  3 .stab         0000e6ac  00000000  00000000  00004dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001994f  00000000  00000000  00013498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0002cde7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  0002ce10  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006d8e  00000000  00000000  0002d318  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f58  00000000  00000000  000340a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010f1  00000000  00000000  00034ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a74  00000000  00000000  000360f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018c0  00000000  00000000  00036b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cf4  00000000  00000000  00038424  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f8  00000000  00000000  0003b118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 70 22 	jmp	0x44e0	; 0x44e0 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      68:	c7 0d       	add	r28, r7
      6a:	fa 0d       	add	r31, r10
      6c:	fd 0d       	add	r31, r13
      6e:	11 0e       	add	r1, r17
      70:	11 0e       	add	r1, r17
      72:	00 0e       	add	r0, r16
      74:	03 0e       	add	r0, r19
      76:	11 0e       	add	r1, r17
      78:	06 0e       	add	r0, r22
      7a:	09 0e       	add	r0, r25

0000007c <port_to_mode_PGM>:
      7c:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000086 <port_to_output_PGM>:
      86:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000090 <port_to_input_PGM>:
      90:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000009a <digital_pin_to_port_PGM>:
      9a:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      aa:	03 03 03 03                                         ....

000000ae <digital_pin_to_bit_mask_PGM>:
      ae:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      be:	04 08 10 20                                         ... 

000000c2 <digital_pin_to_timer_PGM>:
      c2:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      d2:	00 00 00 00                                         ....

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf ef       	ldi	r28, 0xFF	; 255
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	12 e0       	ldi	r17, 0x02	; 2
      e4:	a0 e0       	ldi	r26, 0x00	; 0
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	ec e3       	ldi	r30, 0x3C	; 60
      ea:	fc e4       	ldi	r31, 0x4C	; 76
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ac 31       	cpi	r26, 0x1C	; 28
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	ac e1       	ldi	r26, 0x1C	; 28
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ad 3d       	cpi	r26, 0xDD	; 221
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 b9 00 	call	0x172	; 0x172 <main>
     10c:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <setup>:
}

void setup()
{
    //INIT W5100
    init_func(CW5100Class_new());
     114:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
     118:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <init_func>
    setMACAddress_func(CW5100Class_new(), Ethernet_MAC_Address);
     11c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
     120:	6e e2       	ldi	r22, 0x2E	; 46
     122:	71 e0       	ldi	r23, 0x01	; 1
     124:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <setMACAddress_func>
    setIPAddress_func(CW5100Class_new(), ipAddress);
     128:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
     12c:	6a e2       	ldi	r22, 0x2A	; 42
     12e:	71 e0       	ldi	r23, 0x01	; 1
     130:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <setIPAddress_func>
    setGatewayIp_func(CW5100Class_new(), gateway);
     134:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
     138:	66 e2       	ldi	r22, 0x26	; 38
     13a:	71 e0       	ldi	r23, 0x01	; 1
     13c:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <setGatewayIp_func>
    setSubnetMask_func(CW5100Class_new(), netmask);
     140:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
     144:	62 e2       	ldi	r22, 0x22	; 34
     146:	71 e0       	ldi	r23, 0x01	; 1
     148:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <setSubnetMask_func>

    uart_init();
     14c:	0e 94 df 00 	call	0x1be	; 0x1be <uart_init>
    stdout = &uart_output;
     150:	84 e1       	ldi	r24, 0x14	; 20
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <__iob+0x3>
     158:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <__iob+0x2>
    stdin = &uart_input;
     15c:	26 e0       	ldi	r18, 0x06	; 6
     15e:	31 e0       	ldi	r19, 0x01	; 1
     160:	30 93 d8 03 	sts	0x03D8, r19	; 0x8003d8 <__iob+0x1>
     164:	20 93 d7 03 	sts	0x03D7, r18	; 0x8003d7 <__iob>
    stderr = &uart_output;
     168:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <__iob+0x5>
     16c:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <__iob+0x4>
     170:	08 95       	ret

00000172 <main>:

}

static uint8_t PDUBuffer[MAX_MPDU];
int main(void)
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	62 97       	sbiw	r28, 0x12	; 18
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
    uint16_t pdu_len = 0;
    BACNET_ADDRESS src; /* source address */

    init();
     186:	0e 94 11 23 	call	0x4622	; 0x4622 <init>

    setup();
     18a:	0e 94 8a 00 	call	0x114	; 0x114 <setup>

    datalink_init(NULL);
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <bip_init>
    for (;;) {

        /* other tasks */
        /* BACnet handling */
        pdu_len = datalink_receive(&src, &PDUBuffer[0], sizeof(PDUBuffer), 0);
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	42 e8       	ldi	r20, 0x82	; 130
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	6c e1       	ldi	r22, 0x1C	; 28
     1a0:	72 e0       	ldi	r23, 0x02	; 2
     1a2:	ce 01       	movw	r24, r28
     1a4:	01 96       	adiw	r24, 0x01	; 1
     1a6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <bip_receive>
        if (pdu_len) {
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	a1 f3       	breq	.-24     	; 0x196 <main+0x24>
            npdu_handler(&src, &PDUBuffer[0], pdu_len);
     1ae:	ac 01       	movw	r20, r24
     1b0:	6c e1       	ldi	r22, 0x1C	; 28
     1b2:	72 e0       	ldi	r23, 0x02	; 2
     1b4:	ce 01       	movw	r24, r28
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <npdu_handler>
     1bc:	ec cf       	rjmp	.-40     	; 0x196 <main+0x24>

000001be <uart_init>:
// #include "hardware.h"
#include "uart.h"

void uart_init(void)
{
    UBRR0H = UBRRH_VALUE;
     1be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__data_load_end+0x7fb36d>
    UBRR0L = UBRRL_VALUE;
     1c2:	87 e6       	ldi	r24, 0x67	; 103
     1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_load_end+0x7fb36c>

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
     1c8:	e0 ec       	ldi	r30, 0xC0	; 192
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	8d 7f       	andi	r24, 0xFD	; 253
     1d0:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     1d2:	86 e0       	ldi	r24, 0x06	; 6
     1d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_load_end+0x7fb36a>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     1d8:	88 e1       	ldi	r24, 0x18	; 24
     1da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__data_load_end+0x7fb369>
     1de:	08 95       	ret

000001e0 <uart_putchar>:
}

void uart_putchar(char c,
    FILE * stream)
{
     1e0:	cf 93       	push	r28
     1e2:	c8 2f       	mov	r28, r24
    if (c == '\n') {
     1e4:	8a 30       	cpi	r24, 0x0A	; 10
     1e6:	19 f4       	brne	.+6      	; 0x1ee <uart_putchar+0xe>
        uart_putchar('\r', stream);
     1e8:	8d e0       	ldi	r24, 0x0D	; 13
     1ea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
     1ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fb368>
     1f2:	85 ff       	sbrs	r24, 5
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <uart_putchar+0xe>
    UDR0 = c;
     1f6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__data_load_end+0x7fb36e>
}
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <uart_getchar>:

char uart_getchar(FILE * stream)
{
    loop_until_bit_is_set(UCSR0A, RXC0);        /* Wait until data exists. */
     1fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_load_end+0x7fb368>
     202:	87 ff       	sbrs	r24, 7
     204:	fc cf       	rjmp	.-8      	; 0x1fe <uart_getchar>
    return UDR0;
     206:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_load_end+0x7fb36e>
}
     20a:	08 95       	ret

0000020c <apdu_service_supported>:
bool apdu_service_supported(BACNET_SERVICES_SUPPORTED service_supported)
{
    bool status = false;

    if (service_supported == SERVICE_SUPPORTED_READ_PROPERTY) {
        status = true;
     20c:	21 e0       	ldi	r18, 0x01	; 1
    if (service_supported == SERVICE_SUPPORTED_READ_PROPERTY) {
     20e:	8c 30       	cpi	r24, 0x0C	; 12
     210:	91 05       	cpc	r25, r1
     212:	31 f0       	breq	.+12     	; 0x220 <apdu_service_supported+0x14>
    }
    if (service_supported == SERVICE_SUPPORTED_WHO_IS) {
     214:	82 32       	cpi	r24, 0x22	; 34
     216:	91 05       	cpc	r25, r1
     218:	19 f0       	breq	.+6      	; 0x220 <apdu_service_supported+0x14>
        status = true;
    }
#ifdef WRITE_PROPERTY
    if (service_supported == SERVICE_SUPPORTED_WRITE_PROPERTY) {
     21a:	0f 97       	sbiw	r24, 0x0f	; 15
     21c:	09 f0       	breq	.+2      	; 0x220 <apdu_service_supported+0x14>
     21e:	20 e0       	ldi	r18, 0x00	; 0
        status = true;
    }
#endif

    return status;
}
     220:	82 2f       	mov	r24, r18
     222:	08 95       	ret

00000224 <apdu_decode_confirmed_service_request>:
    uint16_t apdu_len,
    BACNET_CONFIRMED_SERVICE_DATA * service_data,
    uint8_t * service_choice,
    uint8_t ** service_request,
    uint16_t * service_request_len)
{
     224:	8f 92       	push	r8
     226:	9f 92       	push	r9
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
     23e:	5b 01       	movw	r10, r22
     240:	6a 01       	movw	r12, r20
     242:	49 01       	movw	r8, r18
    uint16_t len = 0;   /* counts where we are in PDU */

    service_data->segmented_message = (apdu[0] & BIT3) ? true : false;
     244:	88 81       	ld	r24, Y
     246:	83 fb       	bst	r24, 3
     248:	88 27       	eor	r24, r24
     24a:	80 f9       	bld	r24, 0
     24c:	fa 01       	movw	r30, r20
     24e:	80 83       	st	Z, r24
    service_data->more_follows = (apdu[0] & BIT2) ? true : false;
     250:	88 81       	ld	r24, Y
     252:	82 fb       	bst	r24, 2
     254:	88 27       	eor	r24, r24
     256:	80 f9       	bld	r24, 0
     258:	81 83       	std	Z+1, r24	; 0x01
    service_data->segmented_response_accepted =
        (apdu[0] & BIT1) ? true : false;
     25a:	88 81       	ld	r24, Y
     25c:	86 95       	lsr	r24
     25e:	81 70       	andi	r24, 0x01	; 1
    service_data->segmented_response_accepted =
     260:	82 83       	std	Z+2, r24	; 0x02
    service_data->max_segs = decode_max_segs(apdu[1]);
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	0e 94 6d 11 	call	0x22da	; 0x22da <decode_max_segs>
     268:	f6 01       	movw	r30, r12
     26a:	94 83       	std	Z+4, r25	; 0x04
     26c:	83 83       	std	Z+3, r24	; 0x03
    service_data->max_resp = decode_max_apdu(apdu[1]);
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	0e 94 96 11 	call	0x232c	; 0x232c <decode_max_apdu>
     274:	f6 01       	movw	r30, r12
     276:	96 83       	std	Z+6, r25	; 0x06
     278:	85 83       	std	Z+5, r24	; 0x05
    service_data->invoke_id = apdu[2];
     27a:	8a 81       	ldd	r24, Y+2	; 0x02
     27c:	87 83       	std	Z+7, r24	; 0x07
    len = 3;
    if (service_data->segmented_message) {
     27e:	80 81       	ld	r24, Z
     280:	88 23       	and	r24, r24
     282:	39 f0       	breq	.+14     	; 0x292 <apdu_decode_confirmed_service_request+0x6e>
        service_data->sequence_number = apdu[len++];
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	80 87       	std	Z+8, r24	; 0x08
        service_data->proposed_window_number = apdu[len++];
     288:	8c 81       	ldd	r24, Y+4	; 0x04
     28a:	81 87       	std	Z+9, r24	; 0x09
     28c:	25 e0       	ldi	r18, 0x05	; 5
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <apdu_decode_confirmed_service_request+0x72>
    len = 3;
     292:	23 e0       	ldi	r18, 0x03	; 3
     294:	30 e0       	ldi	r19, 0x00	; 0
    }
    *service_choice = apdu[len++];
     296:	c9 01       	movw	r24, r18
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	fe 01       	movw	r30, r28
     29c:	e2 0f       	add	r30, r18
     29e:	f3 1f       	adc	r31, r19
     2a0:	20 81       	ld	r18, Z
     2a2:	f4 01       	movw	r30, r8
     2a4:	20 83       	st	Z, r18
    *service_request = &apdu[len];
     2a6:	c8 0f       	add	r28, r24
     2a8:	d9 1f       	adc	r29, r25
     2aa:	f8 01       	movw	r30, r16
     2ac:	d1 83       	std	Z+1, r29	; 0x01
     2ae:	c0 83       	st	Z, r28
    *service_request_len = apdu_len - len;
     2b0:	a8 1a       	sub	r10, r24
     2b2:	b9 0a       	sbc	r11, r25
     2b4:	f7 01       	movw	r30, r14
     2b6:	b1 82       	std	Z+1, r11	; 0x01
     2b8:	a0 82       	st	Z, r10

    return len;
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	9f 90       	pop	r9
     2d0:	8f 90       	pop	r8
     2d2:	08 95       	ret

000002d4 <apdu_handler>:

void apdu_handler(BACNET_ADDRESS * src,
    uint8_t * apdu,     /* APDU data */

    uint16_t apdu_len)
{
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	2f 97       	sbiw	r28, 0x0f	; 15
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	5c 01       	movw	r10, r24
     2fa:	fb 01       	movw	r30, r22
     2fc:	ba 01       	movw	r22, r20
    BACNET_CONFIRMED_SERVICE_DATA service_data = { 0 };
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	6c 01       	movw	r12, r24
     304:	8a e0       	ldi	r24, 0x0A	; 10
     306:	d6 01       	movw	r26, r12
     308:	1d 92       	st	X+, r1
     30a:	8a 95       	dec	r24
     30c:	e9 f7       	brne	.-6      	; 0x308 <apdu_handler+0x34>
    uint8_t service_choice = 0;
     30e:	1f 86       	std	Y+15, r1	; 0x0f
    uint8_t *service_request = NULL;
     310:	1e 86       	std	Y+14, r1	; 0x0e
     312:	1d 86       	std	Y+13, r1	; 0x0d
    uint16_t service_request_len = 0;
     314:	1c 86       	std	Y+12, r1	; 0x0c
     316:	1b 86       	std	Y+11, r1	; 0x0b
    uint16_t len = 0;   /* counts where we are in PDU */

    if (apdu) {
     318:	30 97       	sbiw	r30, 0x00	; 0
     31a:	d1 f1       	breq	.+116    	; 0x390 <apdu_handler+0xbc>
        /* PDU Type */
        switch (apdu[0] & 0xF0) {
     31c:	80 81       	ld	r24, Z
     31e:	80 7f       	andi	r24, 0xF0	; 240
     320:	19 f0       	breq	.+6      	; 0x328 <apdu_handler+0x54>
     322:	80 31       	cpi	r24, 0x10	; 16
     324:	31 f1       	breq	.+76     	; 0x372 <apdu_handler+0x9e>
     326:	34 c0       	rjmp	.+104    	; 0x390 <apdu_handler+0xbc>
            case PDU_TYPE_CONFIRMED_SERVICE_REQUEST:
                len = apdu_decode_confirmed_service_request(&apdu[0],   /* APDU data */
     328:	ce 01       	movw	r24, r28
     32a:	0b 96       	adiw	r24, 0x0b	; 11
     32c:	7c 01       	movw	r14, r24
     32e:	8e 01       	movw	r16, r28
     330:	03 5f       	subi	r16, 0xF3	; 243
     332:	1f 4f       	sbci	r17, 0xFF	; 255
     334:	9e 01       	movw	r18, r28
     336:	21 5f       	subi	r18, 0xF1	; 241
     338:	3f 4f       	sbci	r19, 0xFF	; 255
     33a:	a6 01       	movw	r20, r12
     33c:	cf 01       	movw	r24, r30
     33e:	0e 94 12 01 	call	0x224	; 0x224 <apdu_decode_confirmed_service_request>
                    apdu_len, &service_data, &service_choice, &service_request,
                    &service_request_len);
                if (service_choice == SERVICE_CONFIRMED_READ_PROPERTY) {
     342:	2f 85       	ldd	r18, Y+15	; 0x0f
     344:	6b 85       	ldd	r22, Y+11	; 0x0b
     346:	7c 85       	ldd	r23, Y+12	; 0x0c
     348:	8d 85       	ldd	r24, Y+13	; 0x0d
     34a:	9e 85       	ldd	r25, Y+14	; 0x0e
     34c:	2c 30       	cpi	r18, 0x0C	; 12
     34e:	29 f4       	brne	.+10     	; 0x35a <apdu_handler+0x86>
                    handler_read_property(service_request, service_request_len,
     350:	96 01       	movw	r18, r12
     352:	a5 01       	movw	r20, r10
     354:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <handler_read_property>
     358:	1b c0       	rjmp	.+54     	; 0x390 <apdu_handler+0xbc>
                        src, &service_data);
                }
#ifdef WRITE_PROPERTY
                else if (service_choice == SERVICE_CONFIRMED_WRITE_PROPERTY) {
     35a:	2f 30       	cpi	r18, 0x0F	; 15
     35c:	29 f4       	brne	.+10     	; 0x368 <apdu_handler+0x94>
                    handler_write_property(service_request,
     35e:	96 01       	movw	r18, r12
     360:	a5 01       	movw	r20, r10
     362:	0e 94 07 0a 	call	0x140e	; 0x140e <handler_write_property>
     366:	14 c0       	rjmp	.+40     	; 0x390 <apdu_handler+0xbc>
                        service_request_len, src, &service_data);
                }
#endif
                else {
                    handler_unrecognized_service(service_request,
     368:	96 01       	movw	r18, r12
     36a:	a5 01       	movw	r20, r10
     36c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <handler_unrecognized_service>
     370:	0f c0       	rjmp	.+30     	; 0x390 <apdu_handler+0xbc>
                        service_request_len, src, &service_data);
                }
                break;
            case PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST:
                service_choice = apdu[1];
     372:	21 81       	ldd	r18, Z+1	; 0x01
     374:	2f 87       	std	Y+15, r18	; 0x0f
                service_request = &apdu[2];
     376:	cf 01       	movw	r24, r30
     378:	02 96       	adiw	r24, 0x02	; 2
     37a:	9e 87       	std	Y+14, r25	; 0x0e
     37c:	8d 87       	std	Y+13, r24	; 0x0d
                service_request_len = apdu_len - 2;
     37e:	62 50       	subi	r22, 0x02	; 2
     380:	71 09       	sbc	r23, r1
     382:	7c 87       	std	Y+12, r23	; 0x0c
     384:	6b 87       	std	Y+11, r22	; 0x0b
                if (service_choice == SERVICE_UNCONFIRMED_WHO_IS) {
     386:	28 30       	cpi	r18, 0x08	; 8
     388:	19 f4       	brne	.+6      	; 0x390 <apdu_handler+0xbc>
                    handler_who_is(service_request, service_request_len, src);
     38a:	a5 01       	movw	r20, r10
     38c:	0e 94 b9 09 	call	0x1372	; 0x1372 <handler_who_is>
            default:
                break;
        }
    }
    return;
}
     390:	2f 96       	adiw	r28, 0x0f	; 15
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	08 95       	ret

000003b2 <Encode_Property_APDU>:
   or sets the error, and returns -1 */
int Encode_Property_APDU(uint8_t * apdu,
    BACNET_READ_PROPERTY_DATA * rp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
     3b2:	6f 92       	push	r6
     3b4:	7f 92       	push	r7
     3b6:	8f 92       	push	r8
     3b8:	9f 92       	push	r9
     3ba:	af 92       	push	r10
     3bc:	bf 92       	push	r11
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	3c 01       	movw	r6, r24
     3d0:	eb 01       	movw	r28, r22
     3d2:	5a 01       	movw	r10, r20
     3d4:	49 01       	movw	r8, r18
    int apdu_len = -1;

    /* handle each object type */
    switch (rp_data->object_type) {
     3d6:	88 81       	ld	r24, Y
     3d8:	99 81       	ldd	r25, Y+1	; 0x01
     3da:	85 30       	cpi	r24, 0x05	; 5
     3dc:	91 05       	cpc	r25, r1
     3de:	c1 f1       	breq	.+112    	; 0x450 <Encode_Property_APDU+0x9e>
     3e0:	88 30       	cpi	r24, 0x08	; 8
     3e2:	91 05       	cpc	r25, r1
     3e4:	21 f0       	breq	.+8      	; 0x3ee <Encode_Property_APDU+0x3c>
     3e6:	02 97       	sbiw	r24, 0x02	; 2
     3e8:	09 f0       	breq	.+2      	; 0x3ec <Encode_Property_APDU+0x3a>
     3ea:	4a c0       	rjmp	.+148    	; 0x480 <Encode_Property_APDU+0xce>
     3ec:	19 c0       	rjmp	.+50     	; 0x420 <Encode_Property_APDU+0x6e>
        case OBJECT_DEVICE:
            if (Device_Valid_Object_Instance_Number(rp_data->object_instance)) {
     3ee:	6a 81       	ldd	r22, Y+2	; 0x02
     3f0:	7b 81       	ldd	r23, Y+3	; 0x03
     3f2:	8c 81       	ldd	r24, Y+4	; 0x04
     3f4:	9d 81       	ldd	r25, Y+5	; 0x05
     3f6:	0e 94 16 03 	call	0x62c	; 0x62c <Device_Valid_Object_Instance_Number>
     3fa:	88 23       	and	r24, r24
     3fc:	09 f4       	brne	.+2      	; 0x400 <Encode_Property_APDU+0x4e>
     3fe:	4a c0       	rjmp	.+148    	; 0x494 <Encode_Property_APDU+0xe2>
                apdu_len =
     400:	ca 84       	ldd	r12, Y+10	; 0x0a
     402:	db 84       	ldd	r13, Y+11	; 0x0b
     404:	ec 84       	ldd	r14, Y+12	; 0x0c
     406:	fd 84       	ldd	r15, Y+13	; 0x0d
     408:	0e 81       	ldd	r16, Y+6	; 0x06
     40a:	1f 81       	ldd	r17, Y+7	; 0x07
     40c:	28 85       	ldd	r18, Y+8	; 0x08
     40e:	39 85       	ldd	r19, Y+9	; 0x09
     410:	4a 81       	ldd	r20, Y+2	; 0x02
     412:	5b 81       	ldd	r21, Y+3	; 0x03
     414:	6c 81       	ldd	r22, Y+4	; 0x04
     416:	7d 81       	ldd	r23, Y+5	; 0x05
     418:	c3 01       	movw	r24, r6
     41a:	0e 94 a2 03 	call	0x744	; 0x744 <Device_Encode_Property_APDU>
     41e:	3c c0       	rjmp	.+120    	; 0x498 <Encode_Property_APDU+0xe6>
                    rp_data->object_instance, rp_data->object_property,
                    rp_data->array_index, error_class, error_code);
            }
            break;
        case OBJECT_ANALOG_VALUE:
            if (Analog_Value_Valid_Instance(rp_data->object_instance)) {
     420:	6a 81       	ldd	r22, Y+2	; 0x02
     422:	7b 81       	ldd	r23, Y+3	; 0x03
     424:	8c 81       	ldd	r24, Y+4	; 0x04
     426:	9d 81       	ldd	r25, Y+5	; 0x05
     428:	0e 94 4b 06 	call	0xc96	; 0xc96 <Analog_Value_Valid_Instance>
     42c:	88 23       	and	r24, r24
     42e:	91 f1       	breq	.+100    	; 0x494 <Encode_Property_APDU+0xe2>
                apdu_len =
     430:	ca 84       	ldd	r12, Y+10	; 0x0a
     432:	db 84       	ldd	r13, Y+11	; 0x0b
     434:	ec 84       	ldd	r14, Y+12	; 0x0c
     436:	fd 84       	ldd	r15, Y+13	; 0x0d
     438:	0e 81       	ldd	r16, Y+6	; 0x06
     43a:	1f 81       	ldd	r17, Y+7	; 0x07
     43c:	28 85       	ldd	r18, Y+8	; 0x08
     43e:	39 85       	ldd	r19, Y+9	; 0x09
     440:	4a 81       	ldd	r20, Y+2	; 0x02
     442:	5b 81       	ldd	r21, Y+3	; 0x03
     444:	6c 81       	ldd	r22, Y+4	; 0x04
     446:	7d 81       	ldd	r23, Y+5	; 0x05
     448:	c3 01       	movw	r24, r6
     44a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <Analog_Value_Encode_Property_APDU>
     44e:	24 c0       	rjmp	.+72     	; 0x498 <Encode_Property_APDU+0xe6>
                    rp_data->object_instance, rp_data->object_property,
                    rp_data->array_index, error_class, error_code);
            }
            break;
        case OBJECT_BINARY_VALUE:
            if (Binary_Value_Valid_Instance(rp_data->object_instance)) {
     450:	6a 81       	ldd	r22, Y+2	; 0x02
     452:	7b 81       	ldd	r23, Y+3	; 0x03
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	9d 81       	ldd	r25, Y+5	; 0x05
     458:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Binary_Value_Valid_Instance>
     45c:	88 23       	and	r24, r24
     45e:	d1 f0       	breq	.+52     	; 0x494 <Encode_Property_APDU+0xe2>
                apdu_len =
     460:	ca 84       	ldd	r12, Y+10	; 0x0a
     462:	db 84       	ldd	r13, Y+11	; 0x0b
     464:	ec 84       	ldd	r14, Y+12	; 0x0c
     466:	fd 84       	ldd	r15, Y+13	; 0x0d
     468:	0e 81       	ldd	r16, Y+6	; 0x06
     46a:	1f 81       	ldd	r17, Y+7	; 0x07
     46c:	28 85       	ldd	r18, Y+8	; 0x08
     46e:	39 85       	ldd	r19, Y+9	; 0x09
     470:	4a 81       	ldd	r20, Y+2	; 0x02
     472:	5b 81       	ldd	r21, Y+3	; 0x03
     474:	6c 81       	ldd	r22, Y+4	; 0x04
     476:	7d 81       	ldd	r23, Y+5	; 0x05
     478:	c3 01       	movw	r24, r6
     47a:	0e 94 e5 07 	call	0xfca	; 0xfca <Binary_Value_Encode_Property_APDU>
     47e:	0c c0       	rjmp	.+24     	; 0x498 <Encode_Property_APDU+0xe6>
                    rp_data->object_instance, rp_data->object_property,
                    rp_data->array_index, error_class, error_code);
            }
            break;
        default:
            *error_class = ERROR_CLASS_OBJECT;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	fa 01       	movw	r30, r20
     486:	91 83       	std	Z+1, r25	; 0x01
     488:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_OBJECT;
     48a:	8f e1       	ldi	r24, 0x1F	; 31
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	f9 01       	movw	r30, r18
     490:	91 83       	std	Z+1, r25	; 0x01
     492:	80 83       	st	Z, r24
    int apdu_len = -1;
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	9f ef       	ldi	r25, 0xFF	; 255
            break;
    }

    return apdu_len;
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	af 90       	pop	r10
     4ac:	9f 90       	pop	r9
     4ae:	8f 90       	pop	r8
     4b0:	7f 90       	pop	r7
     4b2:	6f 90       	pop	r6
     4b4:	08 95       	ret

000004b6 <handler_read_property>:

void handler_read_property(uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src,
    BACNET_CONFIRMED_SERVICE_DATA * service_data)
{
     4b6:	6f 92       	push	r6
     4b8:	7f 92       	push	r7
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	e6 97       	sbiw	r28, 0x36	; 54
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	8c 01       	movw	r16, r24
     4e4:	4b 01       	movw	r8, r22
     4e6:	3a 01       	movw	r6, r20
     4e8:	79 01       	movw	r14, r18
    int len = 0;
    int ack_len = 0;
    int property_len = 0;
    int pdu_len = 0;
    BACNET_NPDU_DATA npdu_data;
    BACNET_ERROR_CLASS error_class = ERROR_CLASS_OBJECT;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	9e ab       	std	Y+54, r25	; 0x36
     4f0:	8d ab       	std	Y+53, r24	; 0x35
    BACNET_ERROR_CODE error_code = ERROR_CODE_UNKNOWN_OBJECT;
     4f2:	8f e1       	ldi	r24, 0x1F	; 31
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	9c ab       	std	Y+52, r25	; 0x34
     4f8:	8b ab       	std	Y+51, r24	; 0x33
    BACNET_ADDRESS my_address;

    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
     4fa:	ce 01       	movw	r24, r28
     4fc:	47 96       	adiw	r24, 0x17	; 23
     4fe:	0e 94 a6 0c 	call	0x194c	; 0x194c <bip_get_my_address>
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	ce 01       	movw	r24, r28
     50a:	89 96       	adiw	r24, 0x29	; 41
     50c:	0e 94 13 10 	call	0x2026	; 0x2026 <npdu_encode_npdu_data>
    pdu_len =
     510:	9e 01       	movw	r18, r28
     512:	27 5d       	subi	r18, 0xD7	; 215
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	ae 01       	movw	r20, r28
     518:	49 5e       	subi	r20, 0xE9	; 233
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	b3 01       	movw	r22, r6
     51e:	8e e2       	ldi	r24, 0x2E	; 46
     520:	93 e0       	ldi	r25, 0x03	; 3
     522:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <npdu_encode_pdu>
     526:	5c 01       	movw	r10, r24
        npdu_encode_pdu(&Handler_Transmit_Buffer[0], src, &my_address,
        &npdu_data);
    if (service_data->segmented_message) {
     528:	f7 01       	movw	r30, r14
     52a:	80 81       	ld	r24, Z
     52c:	95 01       	movw	r18, r10
     52e:	22 5d       	subi	r18, 0xD2	; 210
     530:	3c 4f       	sbci	r19, 0xFC	; 252
     532:	69 01       	movw	r12, r18
     534:	88 23       	and	r24, r24
     536:	19 f0       	breq	.+6      	; 0x53e <handler_read_property+0x88>
        /* we don't support segmentation - send an abort */
        len =
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	44 e0       	ldi	r20, 0x04	; 4
     53c:	3e c0       	rjmp	.+124    	; 0x5ba <handler_read_property+0x104>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_SEGMENTATION_NOT_SUPPORTED,
            true);
        goto RP_ABORT;
    }
    len = rp_decode_service_request(service_request, service_len, &data);
     53e:	ae 01       	movw	r20, r28
     540:	4f 5f       	subi	r20, 0xFF	; 255
     542:	5f 4f       	sbci	r21, 0xFF	; 255
     544:	b4 01       	movw	r22, r8
     546:	c8 01       	movw	r24, r16
     548:	0e 94 41 18 	call	0x3082	; 0x3082 <rp_decode_service_request>
    if (len < 0) {
     54c:	97 ff       	sbrs	r25, 7
     54e:	03 c0       	rjmp	.+6      	; 0x556 <handler_read_property+0xa0>
        /* bad decoding - send an abort */
        len =
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	31 c0       	rjmp	.+98     	; 0x5b8 <handler_read_property+0x102>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_OTHER, true);
        goto RP_ABORT;
    }
    /* most cases will be error */
    ack_len =
     556:	ae 01       	movw	r20, r28
     558:	4f 5f       	subi	r20, 0xFF	; 255
     55a:	5f 4f       	sbci	r21, 0xFF	; 255
     55c:	f7 01       	movw	r30, r14
     55e:	67 81       	ldd	r22, Z+7	; 0x07
     560:	c6 01       	movw	r24, r12
     562:	0e 94 0c 19 	call	0x3218	; 0x3218 <rp_ack_encode_apdu_init>
     566:	8c 01       	movw	r16, r24
        rp_ack_encode_apdu_init(&Handler_Transmit_Buffer[pdu_len],
        service_data->invoke_id, &data);
    /* FIXME: add buffer len as passed into function or use smart buffer */
    property_len =
        Encode_Property_APDU(&Handler_Transmit_Buffer[pdu_len + ack_len],
     568:	c5 01       	movw	r24, r10
     56a:	80 0f       	add	r24, r16
     56c:	91 1f       	adc	r25, r17
    property_len =
     56e:	9e 01       	movw	r18, r28
     570:	2d 5c       	subi	r18, 0xCD	; 205
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	ae 01       	movw	r20, r28
     576:	4b 5c       	subi	r20, 0xCB	; 203
     578:	5f 4f       	sbci	r21, 0xFF	; 255
     57a:	be 01       	movw	r22, r28
     57c:	6f 5f       	subi	r22, 0xFF	; 255
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	82 5d       	subi	r24, 0xD2	; 210
     582:	9c 4f       	sbci	r25, 0xFC	; 252
     584:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Encode_Property_APDU>
     588:	4c 01       	movw	r8, r24
        &data, &error_class, &error_code);
    if (property_len >= 0) {
     58a:	97 fd       	sbrc	r25, 7
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <handler_read_property+0xf6>
        len =
            rp_ack_encode_apdu_object_property_end(&Handler_Transmit_Buffer
            [pdu_len + property_len + ack_len]);
     58e:	c5 01       	movw	r24, r10
     590:	88 0d       	add	r24, r8
     592:	99 1d       	adc	r25, r9
     594:	80 0f       	add	r24, r16
     596:	91 1f       	adc	r25, r17
        len =
     598:	82 5d       	subi	r24, 0xD2	; 210
     59a:	9c 4f       	sbci	r25, 0xFC	; 252
     59c:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <rp_ack_encode_apdu_object_property_end>
        len += ack_len + property_len;
     5a0:	98 01       	movw	r18, r16
     5a2:	28 0d       	add	r18, r8
     5a4:	39 1d       	adc	r19, r9
     5a6:	28 0f       	add	r18, r24
     5a8:	39 1f       	adc	r19, r25
     5aa:	18 c0       	rjmp	.+48     	; 0x5dc <handler_read_property+0x126>
    } else {
        switch (property_len) {
     5ac:	8e 3f       	cpi	r24, 0xFE	; 254
     5ae:	ff ef       	ldi	r31, 0xFF	; 255
     5b0:	9f 07       	cpc	r25, r31
     5b2:	41 f4       	brne	.+16     	; 0x5c4 <handler_read_property+0x10e>
                /* BACnet APDU too small to fit data, so proper response is Abort */
            case BACNET_STATUS_ABORT:
                len =
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	44 e0       	ldi	r20, 0x04	; 4
     5b8:	f7 01       	movw	r30, r14
     5ba:	67 81       	ldd	r22, Z+7	; 0x07
     5bc:	c6 01       	movw	r24, r12
     5be:	0e 94 40 1b 	call	0x3680	; 0x3680 <abort_encode_apdu>
     5c2:	0b c0       	rjmp	.+22     	; 0x5da <handler_read_property+0x124>
                    abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
                    service_data->invoke_id,
                    ABORT_REASON_SEGMENTATION_NOT_SUPPORTED, true);
                break;
            default:
                len =
     5c4:	0b a9       	ldd	r16, Y+51	; 0x33
     5c6:	1c a9       	ldd	r17, Y+52	; 0x34
     5c8:	2d a9       	ldd	r18, Y+53	; 0x35
     5ca:	3e a9       	ldd	r19, Y+54	; 0x36
     5cc:	4c e0       	ldi	r20, 0x0C	; 12
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	f7 01       	movw	r30, r14
     5d2:	67 81       	ldd	r22, Z+7	; 0x07
     5d4:	c6 01       	movw	r24, r12
     5d6:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <bacerror_encode_apdu>
     5da:	9c 01       	movw	r18, r24
                    error_class, error_code);
                break;
        }
    }
  RP_ABORT:
    pdu_len += len;
     5dc:	2a 0d       	add	r18, r10
     5de:	3b 1d       	adc	r19, r11

    datalink_send_pdu(src, &npdu_data, &Handler_Transmit_Buffer[0], pdu_len);
     5e0:	4e e2       	ldi	r20, 0x2E	; 46
     5e2:	53 e0       	ldi	r21, 0x03	; 3
     5e4:	be 01       	movw	r22, r28
     5e6:	67 5d       	subi	r22, 0xD7	; 215
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	c3 01       	movw	r24, r6
     5ec:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <bip_send_pdu>

    return;
}
     5f0:	e6 96       	adiw	r28, 0x36	; 54
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	9f 90       	pop	r9
     612:	8f 90       	pop	r8
     614:	7f 90       	pop	r7
     616:	6f 90       	pop	r6
     618:	08 95       	ret

0000061a <Device_Object_Instance_Number>:
}

/* methods to manipulate the data */
uint32_t Device_Object_Instance_Number(void)
{
    return Object_Instance_Number;
     61a:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <Object_Instance_Number>
     61e:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <Object_Instance_Number+0x1>
     622:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Object_Instance_Number+0x2>
     626:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Object_Instance_Number+0x3>
}
     62a:	08 95       	ret

0000062c <Device_Valid_Object_Instance_Number>:

    return status;
}

bool Device_Valid_Object_Instance_Number(uint32_t object_id)
{
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
    /* BACnet allows for a wildcard instance number */
    return ((Object_Instance_Number == object_id) ||
     630:	00 91 49 01 	lds	r16, 0x0149	; 0x800149 <Object_Instance_Number>
     634:	10 91 4a 01 	lds	r17, 0x014A	; 0x80014a <Object_Instance_Number+0x1>
     638:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <Object_Instance_Number+0x2>
     63c:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <Object_Instance_Number+0x3>
     640:	06 17       	cp	r16, r22
     642:	17 07       	cpc	r17, r23
     644:	28 07       	cpc	r18, r24
     646:	39 07       	cpc	r19, r25
     648:	49 f0       	breq	.+18     	; 0x65c <Device_Valid_Object_Instance_Number+0x30>
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	6f 3f       	cpi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	8f 43       	sbci	r24, 0x3F	; 63
     652:	91 05       	cpc	r25, r1
     654:	09 f0       	breq	.+2      	; 0x658 <Device_Valid_Object_Instance_Number+0x2c>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	82 2f       	mov	r24, r18
     65a:	01 c0       	rjmp	.+2      	; 0x65e <Device_Valid_Object_Instance_Number+0x32>
     65c:	81 e0       	ldi	r24, 0x01	; 1
        (object_id == BACNET_MAX_INSTANCE));
}
     65e:	81 70       	andi	r24, 0x01	; 1
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <Device_Vendor_Identifier>:

uint16_t Device_Vendor_Identifier(void)
{
    return BACNET_VENDOR_ID;
}
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	08 95       	ret

0000066c <Device_Object_List_Count>:

unsigned Device_Object_List_Count(void)
{
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
    unsigned count = 1; /* at least 1 for device object */

    /* FIXME: add objects as needed */
    count += Analog_Value_Count();
     670:	0e 94 54 06 	call	0xca8	; 0xca8 <Analog_Value_Count>
     674:	ec 01       	movw	r28, r24
    count += Binary_Value_Count();
     676:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Binary_Value_Count>
    count += Analog_Value_Count();
     67a:	8c 0f       	add	r24, r28
     67c:	9d 1f       	adc	r25, r29

    return count;
}
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <Device_Object_List_Identifier>:

bool Device_Object_List_Identifier(uint32_t array_index,
    int *object_type,
    uint32_t * instance)
{
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	8a 01       	movw	r16, r20
     698:	e9 01       	movw	r28, r18
    bool status = false;
    uint32_t object_index = 0;
    uint32_t object_count = 0;

    /* device object */
    if (array_index == 1) {
     69a:	61 30       	cpi	r22, 0x01	; 1
     69c:	71 05       	cpc	r23, r1
     69e:	81 05       	cpc	r24, r1
     6a0:	91 05       	cpc	r25, r1
     6a2:	91 f4       	brne	.+36     	; 0x6c8 <Device_Object_List_Identifier+0x42>
        *object_type = OBJECT_DEVICE;
     6a4:	88 e0       	ldi	r24, 0x08	; 8
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fa 01       	movw	r30, r20
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
        *instance = Object_Instance_Number;
     6ae:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Object_Instance_Number>
     6b2:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Object_Instance_Number+0x1>
     6b6:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Object_Instance_Number+0x2>
     6ba:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Object_Instance_Number+0x3>
     6be:	88 83       	st	Y, r24
     6c0:	99 83       	std	Y+1, r25	; 0x01
     6c2:	aa 83       	std	Y+2, r26	; 0x02
     6c4:	bb 83       	std	Y+3, r27	; 0x03
     6c6:	1c c0       	rjmp	.+56     	; 0x700 <Device_Object_List_Identifier+0x7a>
    object_count = 1;
    /* FIXME: add objects as needed */
    /* analog value objects */
    if (!status) {
        /* array index starts at 1, and 1 for the device object */
        object_index -= object_count;
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	f2 e0       	ldi	r31, 0x02	; 2
     6ce:	cf 1a       	sub	r12, r31
     6d0:	d1 08       	sbc	r13, r1
     6d2:	e1 08       	sbc	r14, r1
     6d4:	f1 08       	sbc	r15, r1
        object_count = Analog_Value_Count();
     6d6:	0e 94 54 06 	call	0xca8	; 0xca8 <Analog_Value_Count>
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
        if (object_index < object_count) {
     6de:	c8 16       	cp	r12, r24
     6e0:	d9 06       	cpc	r13, r25
     6e2:	ea 06       	cpc	r14, r26
     6e4:	fb 06       	cpc	r15, r27
     6e6:	70 f4       	brcc	.+28     	; 0x704 <Device_Object_List_Identifier+0x7e>
            *object_type = OBJECT_ANALOG_VALUE;
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	f8 01       	movw	r30, r16
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	80 83       	st	Z, r24
            *instance = Analog_Value_Index_To_Instance(object_index);
     6f2:	c6 01       	movw	r24, r12
     6f4:	0e 94 57 06 	call	0xcae	; 0xcae <Analog_Value_Index_To_Instance>
        object_index -= object_count;
        object_count = Binary_Value_Count();
        /* is it a valid index for this object? */
        if (object_index < object_count) {
            *object_type = OBJECT_BINARY_VALUE;
            *instance = Binary_Value_Index_To_Instance(object_index);
     6f8:	68 83       	st	Y, r22
     6fa:	79 83       	std	Y+1, r23	; 0x01
     6fc:	8a 83       	std	Y+2, r24	; 0x02
     6fe:	9b 83       	std	Y+3, r25	; 0x03
{
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	17 c0       	rjmp	.+46     	; 0x732 <Device_Object_List_Identifier+0xac>
        object_index -= object_count;
     704:	c8 1a       	sub	r12, r24
     706:	d9 0a       	sbc	r13, r25
     708:	ea 0a       	sbc	r14, r26
     70a:	fb 0a       	sbc	r15, r27
        object_count = Binary_Value_Count();
     70c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Binary_Value_Count>
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e0       	ldi	r27, 0x00	; 0
        if (object_index < object_count) {
     714:	c8 16       	cp	r12, r24
     716:	d9 06       	cpc	r13, r25
     718:	ea 06       	cpc	r14, r26
     71a:	fb 06       	cpc	r15, r27
     71c:	48 f4       	brcc	.+18     	; 0x730 <Device_Object_List_Identifier+0xaa>
            *object_type = OBJECT_BINARY_VALUE;
     71e:	85 e0       	ldi	r24, 0x05	; 5
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	f8 01       	movw	r30, r16
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	80 83       	st	Z, r24
            *instance = Binary_Value_Index_To_Instance(object_index);
     728:	c6 01       	movw	r24, r12
     72a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Binary_Value_Index_To_Instance>
     72e:	e4 cf       	rjmp	.-56     	; 0x6f8 <Device_Object_List_Identifier+0x72>
     730:	80 e0       	ldi	r24, 0x00	; 0
            status = true;
        }
    }

    return status;
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <Device_Encode_Property_APDU>:
    uint32_t object_instance,
    BACNET_PROPERTY_ID property,
    uint32_t array_index,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
     744:	2f 92       	push	r2
     746:	3f 92       	push	r3
     748:	4f 92       	push	r4
     74a:	5f 92       	push	r5
     74c:	6f 92       	push	r6
     74e:	7f 92       	push	r7
     750:	8f 92       	push	r8
     752:	9f 92       	push	r9
     754:	af 92       	push	r10
     756:	bf 92       	push	r11
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	c7 57       	subi	r28, 0x77	; 119
     76e:	d1 09       	sbc	r29, r1
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	3c 01       	movw	r6, r24
    int apdu_len = 0;   /* return value */
    int len = 0;        /* apdu len intermediate value */
    BACNET_BIT_STRING bit_string;
    BACNET_CHARACTER_STRING char_string;
    uint32_t i = 0;
    int object_type = 0;
     77c:	e8 96       	adiw	r28, 0x38	; 56
     77e:	1f ae       	std	Y+63, r1	; 0x3f
     780:	1e ae       	std	Y+62, r1	; 0x3e
     782:	e8 97       	sbiw	r28, 0x38	; 56
    uint32_t instance = 0;
     784:	e6 96       	adiw	r28, 0x36	; 54
     786:	1c ae       	std	Y+60, r1	; 0x3c
     788:	1d ae       	std	Y+61, r1	; 0x3d
     78a:	1e ae       	std	Y+62, r1	; 0x3e
     78c:	1f ae       	std	Y+63, r1	; 0x3f
     78e:	e6 97       	sbiw	r28, 0x36	; 54
    uint32_t count = 0;

    //object_instance = object_instance;
    /* FIXME: change the hardcoded names to suit your application */
    switch (property) {
     790:	0d 34       	cpi	r16, 0x4D	; 77
     792:	11 05       	cpc	r17, r1
     794:	21 05       	cpc	r18, r1
     796:	31 05       	cpc	r19, r1
     798:	09 f4       	brne	.+2      	; 0x79c <Device_Encode_Property_APDU+0x58>
     79a:	a0 c0       	rjmp	.+320    	; 0x8dc <Device_Encode_Property_APDU+0x198>
     79c:	08 f0       	brcs	.+2      	; 0x7a0 <Device_Encode_Property_APDU+0x5c>
     79e:	45 c0       	rjmp	.+138    	; 0x82a <Device_Encode_Property_APDU+0xe6>
     7a0:	0e 33       	cpi	r16, 0x3E	; 62
     7a2:	11 05       	cpc	r17, r1
     7a4:	21 05       	cpc	r18, r1
     7a6:	31 05       	cpc	r19, r1
     7a8:	09 f4       	brne	.+2      	; 0x7ac <Device_Encode_Property_APDU+0x68>
     7aa:	6a c1       	rjmp	.+724    	; 0xa80 <__stack+0x181>
     7ac:	08 f5       	brcc	.+66     	; 0x7f0 <Device_Encode_Property_APDU+0xac>
     7ae:	0c 30       	cpi	r16, 0x0C	; 12
     7b0:	11 05       	cpc	r17, r1
     7b2:	21 05       	cpc	r18, r1
     7b4:	31 05       	cpc	r19, r1
     7b6:	09 f4       	brne	.+2      	; 0x7ba <Device_Encode_Property_APDU+0x76>
     7b8:	a5 c0       	rjmp	.+330    	; 0x904 <__stack+0x5>
     7ba:	58 f4       	brcc	.+22     	; 0x7d2 <Device_Encode_Property_APDU+0x8e>
     7bc:	0b 30       	cpi	r16, 0x0B	; 11
     7be:	11 05       	cpc	r17, r1
     7c0:	21 05       	cpc	r18, r1
     7c2:	31 05       	cpc	r19, r1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <Device_Encode_Property_APDU+0x84>
     7c6:	73 c1       	rjmp	.+742    	; 0xaae <__stack+0x1af>
        case PROP_SEGMENTATION_SUPPORTED:
            apdu_len =
                encode_application_enumerated(&apdu[0], SEGMENTATION_NONE);
            break;
        case PROP_APDU_TIMEOUT:
            apdu_len = encode_application_unsigned(&apdu[0], 60000);
     7c8:	40 e6       	ldi	r20, 0x60	; 96
     7ca:	5a ee       	ldi	r21, 0xEA	; 234
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	67 c1       	rjmp	.+718    	; 0xaa0 <__stack+0x1a1>
    switch (property) {
     7d2:	0e 31       	cpi	r16, 0x1E	; 30
     7d4:	11 05       	cpc	r17, r1
     7d6:	21 05       	cpc	r18, r1
     7d8:	31 05       	cpc	r19, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <Device_Encode_Property_APDU+0x9a>
     7dc:	70 c1       	rjmp	.+736    	; 0xabe <__stack+0x1bf>
     7de:	0c 32       	cpi	r16, 0x2C	; 44
     7e0:	11 05       	cpc	r17, r1
     7e2:	21 05       	cpc	r18, r1
     7e4:	31 05       	cpc	r19, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <Device_Encode_Property_APDU+0xa6>
     7e8:	62 c1       	rjmp	.+708    	; 0xaae <__stack+0x1af>
            characterstring_init_ansi(&char_string, BACNET_VERSION_TEXT);
     7ea:	6d e7       	ldi	r22, 0x7D	; 125
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	7f c0       	rjmp	.+254    	; 0x8ee <Device_Encode_Property_APDU+0x1aa>
    switch (property) {
     7f0:	09 34       	cpi	r16, 0x49	; 73
     7f2:	11 05       	cpc	r17, r1
     7f4:	21 05       	cpc	r18, r1
     7f6:	31 05       	cpc	r19, r1
     7f8:	09 f4       	brne	.+2      	; 0x7fc <Device_Encode_Property_APDU+0xb8>
     7fa:	4f c1       	rjmp	.+670    	; 0xa9a <__stack+0x19b>
     7fc:	48 f4       	brcc	.+18     	; 0x810 <Device_Encode_Property_APDU+0xcc>
     7fe:	06 34       	cpi	r16, 0x46	; 70
     800:	11 05       	cpc	r17, r1
     802:	21 05       	cpc	r18, r1
     804:	31 05       	cpc	r19, r1
     806:	09 f0       	breq	.+2      	; 0x80a <Device_Encode_Property_APDU+0xc6>
     808:	52 c1       	rjmp	.+676    	; 0xaae <__stack+0x1af>
            characterstring_init_ansi(&char_string, "GNU Demo");
     80a:	64 e7       	ldi	r22, 0x74	; 116
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	6f c0       	rjmp	.+222    	; 0x8ee <Device_Encode_Property_APDU+0x1aa>
    switch (property) {
     810:	0b 34       	cpi	r16, 0x4B	; 75
     812:	11 05       	cpc	r17, r1
     814:	21 05       	cpc	r18, r1
     816:	31 05       	cpc	r19, r1
     818:	09 f4       	brne	.+2      	; 0x81c <Device_Encode_Property_APDU+0xd8>
     81a:	53 c0       	rjmp	.+166    	; 0x8c2 <Device_Encode_Property_APDU+0x17e>
     81c:	0c 34       	cpi	r16, 0x4C	; 76
     81e:	11 05       	cpc	r17, r1
     820:	21 05       	cpc	r18, r1
     822:	31 05       	cpc	r19, r1
     824:	09 f4       	brne	.+2      	; 0x828 <Device_Encode_Property_APDU+0xe4>
     826:	b9 c0       	rjmp	.+370    	; 0x99a <__stack+0x9b>
     828:	42 c1       	rjmp	.+644    	; 0xaae <__stack+0x1af>
     82a:	0b 36       	cpi	r16, 0x6B	; 107
     82c:	11 05       	cpc	r17, r1
     82e:	21 05       	cpc	r18, r1
     830:	31 05       	cpc	r19, r1
     832:	09 f4       	brne	.+2      	; 0x836 <Device_Encode_Property_APDU+0xf2>
     834:	2a c1       	rjmp	.+596    	; 0xa8a <__stack+0x18b>
     836:	18 f5       	brcc	.+70     	; 0x87e <Device_Encode_Property_APDU+0x13a>
     838:	00 36       	cpi	r16, 0x60	; 96
     83a:	11 05       	cpc	r17, r1
     83c:	21 05       	cpc	r18, r1
     83e:	31 05       	cpc	r19, r1
     840:	09 f4       	brne	.+2      	; 0x844 <Device_Encode_Property_APDU+0x100>
     842:	7f c0       	rjmp	.+254    	; 0x942 <__stack+0x43>
     844:	58 f4       	brcc	.+22     	; 0x85c <Device_Encode_Property_APDU+0x118>
     846:	0f 34       	cpi	r16, 0x4F	; 79
     848:	11 05       	cpc	r17, r1
     84a:	21 05       	cpc	r18, r1
     84c:	31 05       	cpc	r19, r1
     84e:	09 f0       	breq	.+2      	; 0x852 <Device_Encode_Property_APDU+0x10e>
     850:	2e c1       	rjmp	.+604    	; 0xaae <__stack+0x1af>
            apdu_len = encode_application_enumerated(&apdu[0], OBJECT_DEVICE);
     852:	48 e0       	ldi	r20, 0x08	; 8
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	1b c1       	rjmp	.+566    	; 0xa92 <__stack+0x193>
    switch (property) {
     85c:	01 36       	cpi	r16, 0x61	; 97
     85e:	11 05       	cpc	r17, r1
     860:	21 05       	cpc	r18, r1
     862:	31 05       	cpc	r19, r1
     864:	09 f4       	brne	.+2      	; 0x868 <Device_Encode_Property_APDU+0x124>
     866:	56 c0       	rjmp	.+172    	; 0x914 <__stack+0x15>
     868:	02 36       	cpi	r16, 0x62	; 98
     86a:	11 05       	cpc	r17, r1
     86c:	21 05       	cpc	r18, r1
     86e:	31 05       	cpc	r19, r1
     870:	09 f0       	breq	.+2      	; 0x874 <Device_Encode_Property_APDU+0x130>
     872:	1d c1       	rjmp	.+570    	; 0xaae <__stack+0x1af>
            apdu_len =
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	11 c1       	rjmp	.+546    	; 0xaa0 <__stack+0x1a1>
    switch (property) {
     87e:	09 37       	cpi	r16, 0x79	; 121
     880:	11 05       	cpc	r17, r1
     882:	21 05       	cpc	r18, r1
     884:	31 05       	cpc	r19, r1
     886:	89 f1       	breq	.+98     	; 0x8ea <Device_Encode_Property_APDU+0x1a6>
     888:	80 f4       	brcc	.+32     	; 0x8aa <Device_Encode_Property_APDU+0x166>
     88a:	00 37       	cpi	r16, 0x70	; 112
     88c:	11 05       	cpc	r17, r1
     88e:	21 05       	cpc	r18, r1
     890:	31 05       	cpc	r19, r1
     892:	39 f1       	breq	.+78     	; 0x8e2 <Device_Encode_Property_APDU+0x19e>
     894:	08 37       	cpi	r16, 0x78	; 120
     896:	11 05       	cpc	r17, r1
     898:	21 05       	cpc	r18, r1
     89a:	31 05       	cpc	r19, r1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <Device_Encode_Property_APDU+0x15c>
     89e:	07 c1       	rjmp	.+526    	; 0xaae <__stack+0x1af>
            apdu_len =
     8a0:	44 e0       	ldi	r20, 0x04	; 4
     8a2:	51 e0       	ldi	r21, 0x01	; 1
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	fb c0       	rjmp	.+502    	; 0xaa0 <__stack+0x1a1>
    switch (property) {
     8aa:	0b 38       	cpi	r16, 0x8B	; 139
     8ac:	11 05       	cpc	r17, r1
     8ae:	21 05       	cpc	r18, r1
     8b0:	31 05       	cpc	r19, r1
     8b2:	59 f1       	breq	.+86     	; 0x90a <__stack+0xb>
     8b4:	0b 39       	cpi	r16, 0x9B	; 155
     8b6:	11 05       	cpc	r17, r1
     8b8:	21 05       	cpc	r18, r1
     8ba:	31 05       	cpc	r19, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <Device_Encode_Property_APDU+0x17c>
     8be:	ed c0       	rjmp	.+474    	; 0xa9a <__stack+0x19b>
     8c0:	f6 c0       	rjmp	.+492    	; 0xaae <__stack+0x1af>
            apdu_len =
     8c2:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Object_Instance_Number>
     8c6:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <Object_Instance_Number+0x1>
     8ca:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <Object_Instance_Number+0x2>
     8ce:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <Object_Instance_Number+0x3>
     8d2:	68 e0       	ldi	r22, 0x08	; 8
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	0e 94 2a 14 	call	0x2854	; 0x2854 <encode_application_object_id>
     8da:	e5 c0       	rjmp	.+458    	; 0xaa6 <__stack+0x1a7>
            characterstring_init_ansi(&char_string, Object_Name);
     8dc:	65 e3       	ldi	r22, 0x35	; 53
     8de:	71 e0       	ldi	r23, 0x01	; 1
     8e0:	06 c0       	rjmp	.+12     	; 0x8ee <Device_Encode_Property_APDU+0x1aa>
            apdu_len = encode_application_enumerated(&apdu[0], System_Status);
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	ba 01       	movw	r22, r20
     8e8:	d4 c0       	rjmp	.+424    	; 0xa92 <__stack+0x193>
            characterstring_init_ansi(&char_string, BACNET_VENDOR_NAME);
     8ea:	68 e5       	ldi	r22, 0x58	; 88
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	ce 01       	movw	r24, r28
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <characterstring_init_ansi>
            apdu_len =
     8f6:	be 01       	movw	r22, r28
     8f8:	6f 5f       	subi	r22, 0xFF	; 255
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	c3 01       	movw	r24, r6
     8fe:	0e 94 aa 14 	call	0x2954	; 0x2954 <encode_application_character_string>
     902:	d1 c0       	rjmp	.+418    	; 0xaa6 <__stack+0x1a7>
            characterstring_init_ansi(&char_string, "1.0");
     904:	63 e8       	ldi	r22, 0x83	; 131
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	f2 cf       	rjmp	.-28     	; 0x8ee <Device_Encode_Property_APDU+0x1aa>
            apdu_len =
     90a:	4e e0       	ldi	r20, 0x0E	; 14
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	c6 c0       	rjmp	.+396    	; 0xaa0 <__stack+0x1a1>
            bitstring_init(&bit_string);
     914:	ce 01       	movw	r24, r28
     916:	8e 59       	subi	r24, 0x9E	; 158
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <bitstring_init>
     91e:	00 e0       	ldi	r16, 0x00	; 0
     920:	10 e0       	ldi	r17, 0x00	; 0
                bitstring_set_bit(&bit_string, (uint8_t) i,
     922:	c8 01       	movw	r24, r16
     924:	0e 94 06 01 	call	0x20c	; 0x20c <apdu_service_supported>
     928:	48 2f       	mov	r20, r24
     92a:	60 2f       	mov	r22, r16
     92c:	ce 01       	movw	r24, r28
     92e:	8e 59       	subi	r24, 0x9E	; 158
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
     936:	0f 5f       	subi	r16, 0xFF	; 255
     938:	1f 4f       	sbci	r17, 0xFF	; 255
            for (i = 0; i < MAX_BACNET_SERVICES_SUPPORTED; i++) {
     93a:	09 32       	cpi	r16, 0x29	; 41
     93c:	11 05       	cpc	r17, r1
     93e:	89 f7       	brne	.-30     	; 0x922 <__stack+0x23>
     940:	25 c0       	rjmp	.+74     	; 0x98c <__stack+0x8d>
            bitstring_init(&bit_string);
     942:	ce 01       	movw	r24, r28
     944:	8e 59       	subi	r24, 0x9E	; 158
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <bitstring_init>
     94c:	10 e0       	ldi	r17, 0x00	; 0
                bitstring_set_bit(&bit_string, (uint8_t) i, false);
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	61 2f       	mov	r22, r17
     952:	ce 01       	movw	r24, r28
     954:	8e 59       	subi	r24, 0x9E	; 158
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
     95c:	1f 5f       	subi	r17, 0xFF	; 255
            for (i = 0; i < MAX_ASHRAE_OBJECT_TYPE; i++) {
     95e:	17 33       	cpi	r17, 0x37	; 55
     960:	b1 f7       	brne	.-20     	; 0x94e <__stack+0x4f>
            bitstring_set_bit(&bit_string, OBJECT_DEVICE, true);
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	68 e0       	ldi	r22, 0x08	; 8
     966:	ce 01       	movw	r24, r28
     968:	8e 59       	subi	r24, 0x9E	; 158
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, OBJECT_ANALOG_VALUE, true);
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	62 e0       	ldi	r22, 0x02	; 2
     974:	ce 01       	movw	r24, r28
     976:	8e 59       	subi	r24, 0x9E	; 158
     978:	9f 4f       	sbci	r25, 0xFF	; 255
     97a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, OBJECT_BINARY_VALUE, true);
     97e:	41 e0       	ldi	r20, 0x01	; 1
     980:	65 e0       	ldi	r22, 0x05	; 5
     982:	ce 01       	movw	r24, r28
     984:	8e 59       	subi	r24, 0x9E	; 158
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
     98c:	be 01       	movw	r22, r28
     98e:	6e 59       	subi	r22, 0x9E	; 158
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	c3 01       	movw	r24, r6
     994:	0e 94 6f 13 	call	0x26de	; 0x26de <encode_application_bitstring>
     998:	86 c0       	rjmp	.+268    	; 0xaa6 <__stack+0x1a7>
            count = Device_Object_List_Count();
     99a:	0e 94 36 03 	call	0x66c	; 0x66c <Device_Object_List_Count>
     99e:	1c 01       	movw	r2, r24
     9a0:	41 2c       	mov	r4, r1
     9a2:	51 2c       	mov	r5, r1
            if (array_index == 0)
     9a4:	c1 14       	cp	r12, r1
     9a6:	d1 04       	cpc	r13, r1
     9a8:	e1 04       	cpc	r14, r1
     9aa:	f1 04       	cpc	r15, r1
     9ac:	31 f4       	brne	.+12     	; 0x9ba <__stack+0xbb>
                apdu_len = encode_application_unsigned(&apdu[0], count);
     9ae:	b2 01       	movw	r22, r4
     9b0:	a1 01       	movw	r20, r2
     9b2:	c3 01       	movw	r24, r6
     9b4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <encode_application_unsigned>
     9b8:	59 c0       	rjmp	.+178    	; 0xa6c <__stack+0x16d>
            else if (array_index == BACNET_ARRAY_ALL) {
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	c8 16       	cp	r12, r24
     9be:	d8 06       	cpc	r13, r24
     9c0:	e8 06       	cpc	r14, r24
     9c2:	f8 06       	cpc	r15, r24
     9c4:	d1 f5       	brne	.+116    	; 0xa3a <__stack+0x13b>
     9c6:	c1 2c       	mov	r12, r1
     9c8:	d1 2c       	mov	r13, r1
     9ca:	76 01       	movw	r14, r12
     9cc:	c3 94       	inc	r12
     9ce:	00 e0       	ldi	r16, 0x00	; 0
     9d0:	10 e0       	ldi	r17, 0x00	; 0
                for (i = 1; i <= count; i++) {
     9d2:	2c 14       	cp	r2, r12
     9d4:	3d 04       	cpc	r3, r13
     9d6:	4e 04       	cpc	r4, r14
     9d8:	5f 04       	cpc	r5, r15
     9da:	08 f4       	brcc	.+2      	; 0x9de <__stack+0xdf>
     9dc:	83 c0       	rjmp	.+262    	; 0xae4 <__stack+0x1e5>
                    Device_Object_List_Identifier(i, &object_type, &instance);
     9de:	9e 01       	movw	r18, r28
     9e0:	2e 58       	subi	r18, 0x8E	; 142
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	ae 01       	movw	r20, r28
     9e6:	4a 58       	subi	r20, 0x8A	; 138
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	c7 01       	movw	r24, r14
     9ec:	b6 01       	movw	r22, r12
     9ee:	0e 94 43 03 	call	0x686	; 0x686 <Device_Object_List_Identifier>
                    len =
     9f2:	e6 96       	adiw	r28, 0x36	; 54
     9f4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9f6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9f8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9fa:	5f ad       	ldd	r21, Y+63	; 0x3f
     9fc:	e6 97       	sbiw	r28, 0x36	; 54
     9fe:	e8 96       	adiw	r28, 0x38	; 56
     a00:	6e ad       	ldd	r22, Y+62	; 0x3e
     a02:	7f ad       	ldd	r23, Y+63	; 0x3f
     a04:	e8 97       	sbiw	r28, 0x38	; 56
     a06:	c3 01       	movw	r24, r6
     a08:	80 0f       	add	r24, r16
     a0a:	91 1f       	adc	r25, r17
     a0c:	0e 94 2a 14 	call	0x2854	; 0x2854 <encode_application_object_id>
                    apdu_len += len;
     a10:	08 0f       	add	r16, r24
     a12:	19 1f       	adc	r17, r25
                    if ((apdu_len + len) >= MAX_APDU) {
     a14:	80 0f       	add	r24, r16
     a16:	91 1f       	adc	r25, r17
     a18:	84 36       	cpi	r24, 0x64	; 100
     a1a:	91 05       	cpc	r25, r1
     a1c:	44 f0       	brlt	.+16     	; 0xa2e <__stack+0x12f>
                        *error_code =
     a1e:	86 e3       	ldi	r24, 0x36	; 54
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	f4 01       	movw	r30, r8
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	80 83       	st	Z, r24
                        apdu_len = BACNET_STATUS_ABORT;
     a28:	0e ef       	ldi	r16, 0xFE	; 254
     a2a:	1f ef       	ldi	r17, 0xFF	; 255
                        break;
     a2c:	5b c0       	rjmp	.+182    	; 0xae4 <__stack+0x1e5>
                for (i = 1; i <= count; i++) {
     a2e:	ff ef       	ldi	r31, 0xFF	; 255
     a30:	cf 1a       	sub	r12, r31
     a32:	df 0a       	sbc	r13, r31
     a34:	ef 0a       	sbc	r14, r31
     a36:	ff 0a       	sbc	r15, r31
     a38:	cc cf       	rjmp	.-104    	; 0x9d2 <__stack+0xd3>
                if (Device_Object_List_Identifier(array_index, &object_type,
     a3a:	9e 01       	movw	r18, r28
     a3c:	2e 58       	subi	r18, 0x8E	; 142
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	ae 01       	movw	r20, r28
     a42:	4a 58       	subi	r20, 0x8A	; 138
     a44:	5f 4f       	sbci	r21, 0xFF	; 255
     a46:	c7 01       	movw	r24, r14
     a48:	b6 01       	movw	r22, r12
     a4a:	0e 94 43 03 	call	0x686	; 0x686 <Device_Object_List_Identifier>
     a4e:	88 23       	and	r24, r24
     a50:	79 f0       	breq	.+30     	; 0xa70 <__stack+0x171>
                    apdu_len =
     a52:	e6 96       	adiw	r28, 0x36	; 54
     a54:	2c ad       	ldd	r18, Y+60	; 0x3c
     a56:	3d ad       	ldd	r19, Y+61	; 0x3d
     a58:	4e ad       	ldd	r20, Y+62	; 0x3e
     a5a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a5c:	e6 97       	sbiw	r28, 0x36	; 54
     a5e:	e8 96       	adiw	r28, 0x38	; 56
     a60:	6e ad       	ldd	r22, Y+62	; 0x3e
     a62:	7f ad       	ldd	r23, Y+63	; 0x3f
     a64:	e8 97       	sbiw	r28, 0x38	; 56
     a66:	c3 01       	movw	r24, r6
     a68:	0e 94 2a 14 	call	0x2854	; 0x2854 <encode_application_object_id>
     a6c:	8c 01       	movw	r16, r24
     a6e:	3a c0       	rjmp	.+116    	; 0xae4 <__stack+0x1e5>
                    *error_class = ERROR_CLASS_PROPERTY;
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	f5 01       	movw	r30, r10
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
                    *error_code = ERROR_CODE_INVALID_ARRAY_INDEX;
     a7a:	8a e2       	ldi	r24, 0x2A	; 42
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	2d c0       	rjmp	.+90     	; 0xada <__stack+0x1db>
            apdu_len = encode_application_unsigned(&apdu[0], MAX_APDU);
     a80:	44 e6       	ldi	r20, 0x64	; 100
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	0b c0       	rjmp	.+22     	; 0xaa0 <__stack+0x1a1>
            apdu_len =
     a8a:	43 e0       	ldi	r20, 0x03	; 3
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	c3 01       	movw	r24, r6
     a94:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <encode_application_enumerated>
     a98:	06 c0       	rjmp	.+12     	; 0xaa6 <__stack+0x1a7>
            break;
        case PROP_DEVICE_ADDRESS_BINDING:
            /* FIXME: encode the list here, if it exists */
            break;
        case PROP_DATABASE_REVISION:
            apdu_len = encode_application_unsigned(&apdu[0], 0);
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	ba 01       	movw	r22, r20
     aa0:	c3 01       	movw	r24, r6
     aa2:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <encode_application_unsigned>
     aa6:	8c 01       	movw	r16, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
            apdu_len = -1;
            break;
    }
    /*  only array properties can have array options */
    if ((apdu_len >= 0) && (property != PROP_OBJECT_LIST) &&
     aa8:	97 ff       	sbrs	r25, 7
     aaa:	0b c0       	rjmp	.+22     	; 0xac2 <__stack+0x1c3>
     aac:	1b c0       	rjmp	.+54     	; 0xae4 <__stack+0x1e5>
            *error_class = ERROR_CLASS_PROPERTY;
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	f5 01       	movw	r30, r10
     ab4:	91 83       	std	Z+1, r25	; 0x01
     ab6:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
     ab8:	80 e2       	ldi	r24, 0x20	; 32
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e c0       	rjmp	.+28     	; 0xada <__stack+0x1db>
    int apdu_len = 0;   /* return value */
     abe:	00 e0       	ldi	r16, 0x00	; 0
     ac0:	10 e0       	ldi	r17, 0x00	; 0
    if ((apdu_len >= 0) && (property != PROP_OBJECT_LIST) &&
     ac2:	cf 20       	and	r12, r15
     ac4:	ce 20       	and	r12, r14
     ac6:	cd 20       	and	r12, r13
     ac8:	c0 94       	com	r12
     aca:	61 f0       	breq	.+24     	; 0xae4 <__stack+0x1e5>
        (array_index != BACNET_ARRAY_ALL)) {
        *error_class = ERROR_CLASS_PROPERTY;
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	f5 01       	movw	r30, r10
     ad2:	91 83       	std	Z+1, r25	; 0x01
     ad4:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
     ad6:	82 e3       	ldi	r24, 0x32	; 50
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	f4 01       	movw	r30, r8
     adc:	91 83       	std	Z+1, r25	; 0x01
     ade:	80 83       	st	Z, r24
        apdu_len = BACNET_STATUS_ERROR;
     ae0:	0f ef       	ldi	r16, 0xFF	; 255
     ae2:	1f ef       	ldi	r17, 0xFF	; 255
    }

    return apdu_len;
}
     ae4:	c8 01       	movw	r24, r16
     ae6:	c9 58       	subi	r28, 0x89	; 137
     ae8:	df 4f       	sbci	r29, 0xFF	; 255
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	7f 90       	pop	r7
     b0e:	6f 90       	pop	r6
     b10:	5f 90       	pop	r5
     b12:	4f 90       	pop	r4
     b14:	3f 90       	pop	r3
     b16:	2f 90       	pop	r2
     b18:	08 95       	ret

00000b1a <Device_Write_Property>:

bool Device_Write_Property(BACNET_WRITE_PROPERTY_DATA * wp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	c6 56       	subi	r28, 0x66	; 102
     b32:	d1 09       	sbc	r29, r1
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	8c 01       	movw	r16, r24
     b40:	6b 01       	movw	r12, r22
     b42:	7a 01       	movw	r14, r20
    bool status = false;        /* return value */
    int len = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    if (!Device_Valid_Object_Instance_Number(wp_data->object_instance)) {
     b44:	fc 01       	movw	r30, r24
     b46:	62 81       	ldd	r22, Z+2	; 0x02
     b48:	73 81       	ldd	r23, Z+3	; 0x03
     b4a:	84 81       	ldd	r24, Z+4	; 0x04
     b4c:	95 81       	ldd	r25, Z+5	; 0x05
     b4e:	0e 94 16 03 	call	0x62c	; 0x62c <Device_Valid_Object_Instance_Number>
     b52:	b8 2e       	mov	r11, r24
     b54:	81 11       	cpse	r24, r1
     b56:	08 c0       	rjmp	.+16     	; 0xb68 <Device_Write_Property+0x4e>
        *error_class = ERROR_CLASS_OBJECT;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	f6 01       	movw	r30, r12
     b5e:	91 83       	std	Z+1, r25	; 0x01
     b60:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_UNKNOWN_OBJECT;
     b62:	8f e1       	ldi	r24, 0x1F	; 31
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	6e c0       	rjmp	.+220    	; 0xc44 <Device_Write_Property+0x12a>
        return false;
    }
    /* decode the some of the request */
    len =
        bacapp_decode_application_data(wp_data->application_data,
        wp_data->application_data_len, &value);
     b68:	f8 01       	movw	r30, r16
     b6a:	ee 58       	subi	r30, 0x8E	; 142
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    len =
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	ae 01       	movw	r20, r28
     b74:	4f 5f       	subi	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	c8 01       	movw	r24, r16
     b7a:	0e 96       	adiw	r24, 0x0e	; 14
     b7c:	0e 94 01 1c 	call	0x3802	; 0x3802 <bacapp_decode_application_data>
    /* FIXME: len < application_data_len: more data? */
    if (len < 0) {
        /* error while decoding - a value larger than we can handle */
        wp_data->error_class = ERROR_CLASS_PROPERTY;
     b80:	f8 01       	movw	r30, r16
    if (len < 0) {
     b82:	97 ff       	sbrs	r25, 7
     b84:	0a c0       	rjmp	.+20     	; 0xb9a <Device_Write_Property+0x80>
        wp_data->error_class = ERROR_CLASS_PROPERTY;
     b86:	eb 58       	subi	r30, 0x8B	; 139
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	80 83       	st	Z, r24
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
     b92:	32 96       	adiw	r30, 0x02	; 2
     b94:	85 e2       	ldi	r24, 0x25	; 37
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	69 c0       	rjmp	.+210    	; 0xc6c <Device_Write_Property+0x152>
        return false;
    }
    switch (wp_data->object_property) {
     b9a:	46 81       	ldd	r20, Z+6	; 0x06
     b9c:	57 81       	ldd	r21, Z+7	; 0x07
     b9e:	60 85       	ldd	r22, Z+8	; 0x08
     ba0:	71 85       	ldd	r23, Z+9	; 0x09
     ba2:	4b 34       	cpi	r20, 0x4B	; 75
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	31 f0       	breq	.+12     	; 0xbb8 <Device_Write_Property+0x9e>
     bac:	4d 34       	cpi	r20, 0x4D	; 77
     bae:	51 05       	cpc	r21, r1
     bb0:	61 05       	cpc	r22, r1
     bb2:	71 05       	cpc	r23, r1
     bb4:	19 f1       	breq	.+70     	; 0xbfc <Device_Write_Property+0xe2>
     bb6:	52 c0       	rjmp	.+164    	; 0xc5c <Device_Write_Property+0x142>
        case PROP_OBJECT_IDENTIFIER:
            if (value.tag == BACNET_APPLICATION_TAG_OBJECT_ID) {
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	8c 30       	cpi	r24, 0x0C	; 12
     bbc:	11 f5       	brne	.+68     	; 0xc02 <Device_Write_Property+0xe8>
                if ((value.type.Object_Id.type == OBJECT_DEVICE) &&
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	9d 81       	ldd	r25, Y+5	; 0x05
     bc2:	08 97       	sbiw	r24, 0x08	; 8
     bc4:	99 f4       	brne	.+38     	; 0xbec <Device_Write_Property+0xd2>
                    (Device_Set_Object_Instance_Number(value.type.Object_Id.
     bc6:	0e 81       	ldd	r16, Y+6	; 0x06
     bc8:	1f 81       	ldd	r17, Y+7	; 0x07
     bca:	28 85       	ldd	r18, Y+8	; 0x08
     bcc:	39 85       	ldd	r19, Y+9	; 0x09
    if (object_id <= BACNET_MAX_INSTANCE) {
     bce:	01 15       	cp	r16, r1
     bd0:	11 05       	cpc	r17, r1
     bd2:	f0 e4       	ldi	r31, 0x40	; 64
     bd4:	2f 07       	cpc	r18, r31
     bd6:	31 05       	cpc	r19, r1
     bd8:	48 f4       	brcc	.+18     	; 0xbec <Device_Write_Property+0xd2>
        Object_Instance_Number = object_id;
     bda:	00 93 49 01 	sts	0x0149, r16	; 0x800149 <Object_Instance_Number>
     bde:	10 93 4a 01 	sts	0x014A, r17	; 0x80014a <Object_Instance_Number+0x1>
     be2:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <Object_Instance_Number+0x2>
     be6:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <Object_Instance_Number+0x3>
     bea:	43 c0       	rjmp	.+134    	; 0xc72 <Device_Write_Property+0x158>
                            instance))) {
                    /* we could send an I-Am broadcast to let the world know */
                    status = true;
                } else {
                    *error_class = ERROR_CLASS_PROPERTY;
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	f6 01       	movw	r30, r12
     bf2:	91 83       	std	Z+1, r25	; 0x01
     bf4:	80 83       	st	Z, r24
                    *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
     bf6:	85 e2       	ldi	r24, 0x25	; 37
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	37 c0       	rjmp	.+110    	; 0xc6a <Device_Write_Property+0x150>
//                *error_class = ERROR_CLASS_PROPERTY;
//                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
//            }
//            break;
        case PROP_OBJECT_NAME:
            if (value.tag == BACNET_APPLICATION_TAG_CHARACTER_STRING) {
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	87 30       	cpi	r24, 0x07	; 7
     c00:	41 f0       	breq	.+16     	; 0xc12 <Device_Write_Property+0xf8>
                *error_class = ERROR_CLASS_PROPERTY;
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	f6 01       	movw	r30, r12
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	80 83       	st	Z, r24
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
     c0c:	89 e0       	ldi	r24, 0x09	; 9
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	2c c0       	rjmp	.+88     	; 0xc6a <Device_Write_Property+0x150>
                uint8_t encoding;

                encoding =
     c12:	ce 01       	movw	r24, r28
     c14:	04 96       	adiw	r24, 0x04	; 4
     c16:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <characterstring_encoding>
                    characterstring_encoding(&value.type.Character_String);
                if (encoding == CHARACTER_ANSI_X34) {
     c1a:	81 11       	cpse	r24, r1
     c1c:	17 c0       	rjmp	.+46     	; 0xc4c <Device_Write_Property+0x132>
                    if (characterstring_ansi_copy(&Object_Name[0],
     c1e:	ae 01       	movw	r20, r28
     c20:	4c 5f       	subi	r20, 0xFC	; 252
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	64 e1       	ldi	r22, 0x14	; 20
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	85 e3       	ldi	r24, 0x35	; 53
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <characterstring_ansi_copy>
     c30:	b8 2e       	mov	r11, r24
     c32:	81 11       	cpse	r24, r1
     c34:	1e c0       	rjmp	.+60     	; 0xc72 <Device_Write_Property+0x158>
                            sizeof(Object_Name),
                            &value.type.Character_String)) {
                        status = true;
                    } else {
                        *error_class = ERROR_CLASS_PROPERTY;
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	f6 01       	movw	r30, r12
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	80 83       	st	Z, r24
                        *error_code = ERROR_CODE_NO_SPACE_TO_WRITE_PROPERTY;
     c40:	84 e1       	ldi	r24, 0x14	; 20
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	f7 01       	movw	r30, r14
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	80 83       	st	Z, r24
     c4a:	13 c0       	rjmp	.+38     	; 0xc72 <Device_Write_Property+0x158>
                    }
                } else {
                    *error_class = ERROR_CLASS_PROPERTY;
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	f6 01       	movw	r30, r12
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
                    *error_code = ERROR_CODE_CHARACTER_SET_NOT_SUPPORTED;
     c56:	89 e2       	ldi	r24, 0x29	; 41
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <Device_Write_Property+0x150>
//                *error_class = ERROR_CLASS_PROPERTY;
//                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
//            }
//            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	f6 01       	movw	r30, r12
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
     c66:	88 e2       	ldi	r24, 0x28	; 40
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	f7 01       	movw	r30, r14
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	80 83       	st	Z, r24
    bool status = false;        /* return value */
     c70:	b1 2c       	mov	r11, r1
            break;
    }

    return status;
}
     c72:	8b 2d       	mov	r24, r11
     c74:	ca 59       	subi	r28, 0x9A	; 154
     c76:	df 4f       	sbci	r29, 0xFF	; 255
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	bf 90       	pop	r11
     c94:	08 95       	ret

00000c96 <Analog_Value_Valid_Instance>:
/* we simply have 0-n object instances.  Yours might be */
/* more complex, and then you need validate that the */
/* given instance exists */
bool Analog_Value_Valid_Instance(uint32_t object_instance)
{
    if (object_instance < MAX_ANALOG_VALUES)
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	64 30       	cpi	r22, 0x04	; 4
     c9a:	71 05       	cpc	r23, r1
     c9c:	81 05       	cpc	r24, r1
     c9e:	91 05       	cpc	r25, r1
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <Analog_Value_Valid_Instance+0xe>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
        return true;

    return false;
}
     ca4:	82 2f       	mov	r24, r18
     ca6:	08 95       	ret

00000ca8 <Analog_Value_Count>:
/* we simply have 0-n object instances.  Yours might be */
/* more complex, and then count how many you have */
unsigned Analog_Value_Count(void)
{
    return MAX_ANALOG_VALUES;
}
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	08 95       	ret

00000cae <Analog_Value_Index_To_Instance>:
/* we simply have 0-n object instances.  Yours might be */
/* more complex, and then you need to return the instance */
/* that correlates to the correct index */
uint32_t Analog_Value_Index_To_Instance(unsigned index)
{
    return index;
     cae:	bc 01       	movw	r22, r24
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
}
     cb4:	08 95       	ret

00000cb6 <Analog_Value_Encode_Property_APDU>:
    uint32_t object_instance,
    BACNET_PROPERTY_ID property,
    uint32_t array_index,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
     cb6:	6f 92       	push	r6
     cb8:	7f 92       	push	r7
     cba:	8f 92       	push	r8
     cbc:	9f 92       	push	r9
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	c1 57       	subi	r28, 0x71	; 113
     cd8:	d1 09       	sbc	r29, r1
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	3c 01       	movw	r6, r24
     ce6:	85 2f       	mov	r24, r21
     ce8:	57 2f       	mov	r21, r23
    int apdu_len = 0;   /* return value */
    BACNET_BIT_STRING bit_string;
    BACNET_CHARACTER_STRING char_string;
    unsigned object_index;

    switch (property) {
     cea:	0f 34       	cpi	r16, 0x4F	; 79
     cec:	11 05       	cpc	r17, r1
     cee:	21 05       	cpc	r18, r1
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <Analog_Value_Encode_Property_APDU+0x40>
     cf4:	4f c0       	rjmp	.+158    	; 0xd94 <Analog_Value_Encode_Property_APDU+0xde>
     cf6:	a0 f4       	brcc	.+40     	; 0xd20 <Analog_Value_Encode_Property_APDU+0x6a>
     cf8:	0b 34       	cpi	r16, 0x4B	; 75
     cfa:	11 05       	cpc	r17, r1
     cfc:	21 05       	cpc	r18, r1
     cfe:	31 05       	cpc	r19, r1
     d00:	81 f1       	breq	.+96     	; 0xd62 <Analog_Value_Encode_Property_APDU+0xac>
     d02:	0d 34       	cpi	r16, 0x4D	; 77
     d04:	11 05       	cpc	r17, r1
     d06:	21 05       	cpc	r18, r1
     d08:	31 05       	cpc	r19, r1
     d0a:	a1 f1       	breq	.+104    	; 0xd74 <Analog_Value_Encode_Property_APDU+0xbe>
     d0c:	04 32       	cpi	r16, 0x24	; 36
     d0e:	11 05       	cpc	r17, r1
     d10:	21 05       	cpc	r18, r1
     d12:	31 05       	cpc	r19, r1
     d14:	09 f0       	breq	.+2      	; 0xd18 <Analog_Value_Encode_Property_APDU+0x62>
     d16:	7f c0       	rjmp	.+254    	; 0xe16 <Analog_Value_Encode_Property_APDU+0x160>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE, false);
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
            break;
        case PROP_EVENT_STATE:
            apdu_len =
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	ba 01       	movw	r22, r20
     d1e:	77 c0       	rjmp	.+238    	; 0xe0e <Analog_Value_Encode_Property_APDU+0x158>
    switch (property) {
     d20:	05 35       	cpi	r16, 0x55	; 85
     d22:	11 05       	cpc	r17, r1
     d24:	21 05       	cpc	r18, r1
     d26:	31 05       	cpc	r19, r1
     d28:	d1 f1       	breq	.+116    	; 0xd9e <Analog_Value_Encode_Property_APDU+0xe8>
     d2a:	58 f4       	brcc	.+22     	; 0xd42 <Analog_Value_Encode_Property_APDU+0x8c>
     d2c:	01 35       	cpi	r16, 0x51	; 81
     d2e:	11 05       	cpc	r17, r1
     d30:	21 05       	cpc	r18, r1
     d32:	31 05       	cpc	r19, r1
     d34:	09 f0       	breq	.+2      	; 0xd38 <Analog_Value_Encode_Property_APDU+0x82>
     d36:	6f c0       	rjmp	.+222    	; 0xe16 <Analog_Value_Encode_Property_APDU+0x160>
                encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
            break;
        case PROP_OUT_OF_SERVICE:
            apdu_len = encode_application_boolean(&apdu[0], false);
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	c3 01       	movw	r24, r6
     d3c:	0e 94 24 13 	call	0x2648	; 0x2648 <encode_application_boolean>
            break;
     d40:	72 c0       	rjmp	.+228    	; 0xe26 <Analog_Value_Encode_Property_APDU+0x170>
    switch (property) {
     d42:	0f 36       	cpi	r16, 0x6F	; 111
     d44:	11 05       	cpc	r17, r1
     d46:	21 05       	cpc	r18, r1
     d48:	31 05       	cpc	r19, r1
     d4a:	c9 f1       	breq	.+114    	; 0xdbe <Analog_Value_Encode_Property_APDU+0x108>
     d4c:	05 37       	cpi	r16, 0x75	; 117
     d4e:	11 05       	cpc	r17, r1
     d50:	21 05       	cpc	r18, r1
     d52:	31 05       	cpc	r19, r1
     d54:	09 f0       	breq	.+2      	; 0xd58 <Analog_Value_Encode_Property_APDU+0xa2>
     d56:	5f c0       	rjmp	.+190    	; 0xe16 <Analog_Value_Encode_Property_APDU+0x160>
        case PROP_UNITS:
            apdu_len = encode_application_enumerated(&apdu[0], UNITS_PERCENT);
     d58:	42 e6       	ldi	r20, 0x62	; 98
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	56 c0       	rjmp	.+172    	; 0xe0e <Analog_Value_Encode_Property_APDU+0x158>
            apdu_len =
     d62:	24 2f       	mov	r18, r20
     d64:	38 2f       	mov	r19, r24
     d66:	46 2f       	mov	r20, r22
     d68:	62 e0       	ldi	r22, 0x02	; 2
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	c3 01       	movw	r24, r6
     d6e:	0e 94 2a 14 	call	0x2854	; 0x2854 <encode_application_object_id>
            break;
     d72:	59 c0       	rjmp	.+178    	; 0xe26 <Analog_Value_Encode_Property_APDU+0x170>
    text_string[3] = '0' + (uint8_t) object_instance;
     d74:	40 5d       	subi	r20, 0xD0	; 208
     d76:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <text_string.4376+0x3>
            characterstring_init_ansi(&char_string,
     d7a:	6d e4       	ldi	r22, 0x4D	; 77
     d7c:	71 e0       	ldi	r23, 0x01	; 1
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <characterstring_init_ansi>
            apdu_len =
     d86:	be 01       	movw	r22, r28
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	c3 01       	movw	r24, r6
     d8e:	0e 94 aa 14 	call	0x2954	; 0x2954 <encode_application_character_string>
            break;
     d92:	49 c0       	rjmp	.+146    	; 0xe26 <Analog_Value_Encode_Property_APDU+0x170>
            apdu_len =
     d94:	42 e0       	ldi	r20, 0x02	; 2
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	38 c0       	rjmp	.+112    	; 0xe0e <Analog_Value_Encode_Property_APDU+0x158>
                encode_application_real(&apdu[0],
     d9e:	e4 2f       	mov	r30, r20
     da0:	f8 2f       	mov	r31, r24
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	e9 53       	subi	r30, 0x39	; 57
     dac:	fc 4f       	sbci	r31, 0xFC	; 252
            apdu_len =
     dae:	40 81       	ld	r20, Z
     db0:	51 81       	ldd	r21, Z+1	; 0x01
     db2:	62 81       	ldd	r22, Z+2	; 0x02
     db4:	73 81       	ldd	r23, Z+3	; 0x03
     db6:	c3 01       	movw	r24, r6
     db8:	0e 94 55 16 	call	0x2caa	; 0x2caa <encode_application_real>
            break;
     dbc:	34 c0       	rjmp	.+104    	; 0xe26 <Analog_Value_Encode_Property_APDU+0x170>
            bitstring_init(&bit_string);
     dbe:	ce 01       	movw	r24, r28
     dc0:	8e 59       	subi	r24, 0x9E	; 158
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <bitstring_init>
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	ce 01       	movw	r24, r28
     dce:	8e 59       	subi	r24, 0x9E	; 158
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	ce 01       	movw	r24, r28
     ddc:	8e 59       	subi	r24, 0x9E	; 158
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	ce 01       	movw	r24, r28
     dea:	8e 59       	subi	r24, 0x9E	; 158
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE, false);
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	63 e0       	ldi	r22, 0x03	; 3
     df6:	ce 01       	movw	r24, r28
     df8:	8e 59       	subi	r24, 0x9E	; 158
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
     e00:	be 01       	movw	r22, r28
     e02:	6e 59       	subi	r22, 0x9E	; 158
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	c3 01       	movw	r24, r6
     e08:	0e 94 6f 13 	call	0x26de	; 0x26de <encode_application_bitstring>
            break;
     e0c:	0c c0       	rjmp	.+24     	; 0xe26 <Analog_Value_Encode_Property_APDU+0x170>
            apdu_len =
     e0e:	c3 01       	movw	r24, r6
     e10:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <encode_application_enumerated>
            break;
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <Analog_Value_Encode_Property_APDU+0x170>
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	f5 01       	movw	r30, r10
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e c0       	rjmp	.+28     	; 0xe42 <Analog_Value_Encode_Property_APDU+0x18c>
            apdu_len = -1;
            break;
    }
    /*  only array properties can have array options */
    if ((apdu_len >= 0) && (array_index != BACNET_ARRAY_ALL)) {
     e26:	97 fd       	sbrc	r25, 7
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <Analog_Value_Encode_Property_APDU+0x196>
     e2a:	cf 20       	and	r12, r15
     e2c:	ce 20       	and	r12, r14
     e2e:	cd 20       	and	r12, r13
     e30:	c0 94       	com	r12
     e32:	61 f0       	breq	.+24     	; 0xe4c <Analog_Value_Encode_Property_APDU+0x196>
        *error_class = ERROR_CLASS_PROPERTY;
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	f5 01       	movw	r30, r10
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
     e3e:	82 e3       	ldi	r24, 0x32	; 50
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	f4 01       	movw	r30, r8
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
        apdu_len = -1;
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	9f ef       	ldi	r25, 0xFF	; 255
    }

    return apdu_len;
}
     e4c:	cf 58       	subi	r28, 0x8F	; 143
     e4e:	df 4f       	sbci	r29, 0xFF	; 255
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	9f 90       	pop	r9
     e70:	8f 90       	pop	r8
     e72:	7f 90       	pop	r7
     e74:	6f 90       	pop	r6
     e76:	08 95       	ret

00000e78 <Analog_Value_Write_Property>:

/* returns true if successful */
bool Analog_Value_Write_Property(BACNET_WRITE_PROPERTY_DATA * wp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	c6 56       	subi	r28, 0x66	; 102
     e92:	d1 09       	sbc	r29, r1
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	7c 01       	movw	r14, r24
     ea0:	6b 01       	movw	r12, r22
     ea2:	5a 01       	movw	r10, r20
    if (object_instance < MAX_ANALOG_VALUES)
     ea4:	fc 01       	movw	r30, r24
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	a4 81       	ldd	r26, Z+4	; 0x04
     eac:	b5 81       	ldd	r27, Z+5	; 0x05
     eae:	04 97       	sbiw	r24, 0x04	; 4
     eb0:	a1 05       	cpc	r26, r1
     eb2:	b1 05       	cpc	r27, r1
     eb4:	60 f0       	brcs	.+24     	; 0xece <Analog_Value_Write_Property+0x56>
    unsigned int object_index = 0;
    int len = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    if (!Analog_Value_Valid_Instance(wp_data->object_instance)) {
        *error_class = ERROR_CLASS_OBJECT;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	fb 01       	movw	r30, r22
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_UNKNOWN_OBJECT;
     ec0:	8f e1       	ldi	r24, 0x1F	; 31
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	d5 01       	movw	r26, r10
     ec6:	8d 93       	st	X+, r24
     ec8:	9c 93       	st	X, r25
        return false;
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	4e c0       	rjmp	.+156    	; 0xf6a <Analog_Value_Write_Property+0xf2>
    }
    /* decode the some of the request */
    len =
        bacapp_decode_application_data(wp_data->application_data,
        wp_data->application_data_len, &value);
     ece:	f7 01       	movw	r30, r14
     ed0:	ee 58       	subi	r30, 0x8E	; 142
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    len =
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	ae 01       	movw	r20, r28
     eda:	4f 5f       	subi	r20, 0xFF	; 255
     edc:	5f 4f       	sbci	r21, 0xFF	; 255
     ede:	c7 01       	movw	r24, r14
     ee0:	0e 96       	adiw	r24, 0x0e	; 14
     ee2:	0e 94 01 1c 	call	0x3802	; 0x3802 <bacapp_decode_application_data>
    /* FIXME: len < application_data_len: more data? */
    if (len < 0) {
     ee6:	97 ff       	sbrs	r25, 7
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <Analog_Value_Write_Property+0x8c>
        /* error while decoding - a value larger than we can handle */
        wp_data->error_class = ERROR_CLASS_PROPERTY;
     eea:	f7 01       	movw	r30, r14
     eec:	eb 58       	subi	r30, 0x8B	; 139
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
     ef8:	32 96       	adiw	r30, 0x02	; 2
     efa:	85 e2       	ldi	r24, 0x25	; 37
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24
     f02:	e3 cf       	rjmp	.-58     	; 0xeca <Analog_Value_Write_Property+0x52>
        return false;
    }
    switch (wp_data->object_property) {
     f04:	d7 01       	movw	r26, r14
     f06:	16 96       	adiw	r26, 0x06	; 6
     f08:	0d 91       	ld	r16, X+
     f0a:	1d 91       	ld	r17, X+
     f0c:	2d 91       	ld	r18, X+
     f0e:	3c 91       	ld	r19, X
     f10:	19 97       	sbiw	r26, 0x09	; 9
     f12:	05 35       	cpi	r16, 0x55	; 85
     f14:	11 05       	cpc	r17, r1
     f16:	21 05       	cpc	r18, r1
     f18:	31 05       	cpc	r19, r1
     f1a:	f9 f4       	brne	.+62     	; 0xf5a <Analog_Value_Write_Property+0xe2>
        case PROP_PRESENT_VALUE:
            if (value.tag == BACNET_APPLICATION_TAG_REAL) {
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	a1 f4       	brne	.+40     	; 0xf4a <Analog_Value_Write_Property+0xd2>
                object_index =
                    Analog_Value_Instance_To_Index(wp_data->object_instance);
                AV_Present_Value[object_index] = value.type.Real;
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	ed 91       	ld	r30, X+
     f26:	fc 91       	ld	r31, X
     f28:	13 97       	sbiw	r26, 0x03	; 3
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	e9 53       	subi	r30, 0x39	; 57
     f34:	fc 4f       	sbci	r31, 0xFC	; 252
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	ae 81       	ldd	r26, Y+6	; 0x06
     f3c:	bf 81       	ldd	r27, Y+7	; 0x07
     f3e:	80 83       	st	Z, r24
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	a2 83       	std	Z+2, r26	; 0x02
     f44:	b3 83       	std	Z+3, r27	; 0x03
                status = true;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	10 c0       	rjmp	.+32     	; 0xf6a <Analog_Value_Write_Property+0xf2>
            } else {
                *error_class = ERROR_CLASS_PROPERTY;
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	f6 01       	movw	r30, r12
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
     f54:	89 e0       	ldi	r24, 0x09	; 9
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	b5 cf       	rjmp	.-150    	; 0xec4 <Analog_Value_Write_Property+0x4c>
            }
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	f6 01       	movw	r30, r12
     f60:	91 83       	std	Z+1, r25	; 0x01
     f62:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
     f64:	88 e2       	ldi	r24, 0x28	; 40
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	ad cf       	rjmp	.-166    	; 0xec4 <Analog_Value_Write_Property+0x4c>
            break;
    }

    return status;
}
     f6a:	ca 59       	subi	r28, 0x9A	; 154
     f6c:	df 4f       	sbci	r29, 0xFF	; 255
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	bf 90       	pop	r11
     f8a:	af 90       	pop	r10
     f8c:	08 95       	ret

00000f8e <Binary_Value_Valid_Instance>:
static BACNET_BINARY_PV Present_Value[MAX_BINARY_VALUES];

/* we simply have 0-n object instances. */
bool Binary_Value_Valid_Instance(uint32_t object_instance)
{
    if (object_instance < MAX_BINARY_VALUES)
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	64 30       	cpi	r22, 0x04	; 4
     f92:	71 05       	cpc	r23, r1
     f94:	81 05       	cpc	r24, r1
     f96:	91 05       	cpc	r25, r1
     f98:	08 f0       	brcs	.+2      	; 0xf9c <Binary_Value_Valid_Instance+0xe>
     f9a:	20 e0       	ldi	r18, 0x00	; 0
        return true;

    return false;
}
     f9c:	82 2f       	mov	r24, r18
     f9e:	08 95       	ret

00000fa0 <Binary_Value_Count>:

/* we simply have 0-n object instances. */
unsigned Binary_Value_Count(void)
{
    return MAX_BINARY_VALUES;
}
     fa0:	84 e0       	ldi	r24, 0x04	; 4
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	08 95       	ret

00000fa6 <Binary_Value_Index_To_Instance>:

/* we simply have 0-n object instances. */
uint32_t Binary_Value_Index_To_Instance(unsigned index)
{
    return index;
     fa6:	bc 01       	movw	r22, r24
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
}
     fac:	08 95       	ret

00000fae <Binary_Value_Name>:
/* note: the object name must be unique within this device */
char *Binary_Value_Name(uint32_t object_instance)
{
    static char text_string[5] = "BV-0";        /* okay for single thread */

    if (object_instance < MAX_BINARY_VALUES) {
     fae:	64 30       	cpi	r22, 0x04	; 4
     fb0:	71 05       	cpc	r23, r1
     fb2:	81 05       	cpc	r24, r1
     fb4:	91 05       	cpc	r25, r1
     fb6:	30 f4       	brcc	.+12     	; 0xfc4 <Binary_Value_Name+0x16>
        text_string[3] = '0' + (uint8_t) object_instance;
     fb8:	60 5d       	subi	r22, 0xD0	; 208
     fba:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <text_string.4375+0x3>
        return text_string;
     fbe:	82 e5       	ldi	r24, 0x52	; 82
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	08 95       	ret
    }

    return NULL;
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
}
     fc8:	08 95       	ret

00000fca <Binary_Value_Encode_Property_APDU>:
    uint32_t object_instance,
    BACNET_PROPERTY_ID property,
    uint32_t array_index,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
     fca:	6f 92       	push	r6
     fcc:	7f 92       	push	r7
     fce:	8f 92       	push	r8
     fd0:	9f 92       	push	r9
     fd2:	af 92       	push	r10
     fd4:	bf 92       	push	r11
     fd6:	cf 92       	push	r12
     fd8:	df 92       	push	r13
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	c1 57       	subi	r28, 0x71	; 113
     fec:	d1 09       	sbc	r29, r1
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	3c 01       	movw	r6, r24
    BACNET_BIT_STRING bit_string;
    BACNET_CHARACTER_STRING char_string;
    BACNET_BINARY_PV present_value = BINARY_INACTIVE;
    BACNET_POLARITY polarity = POLARITY_NORMAL;

    switch (property) {
     ffa:	0f 34       	cpi	r16, 0x4F	; 79
     ffc:	11 05       	cpc	r17, r1
     ffe:	21 05       	cpc	r18, r1
    1000:	31 05       	cpc	r19, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <Binary_Value_Encode_Property_APDU+0x3c>
    1004:	70 c0       	rjmp	.+224    	; 0x10e6 <Binary_Value_Encode_Property_APDU+0x11c>
    1006:	98 f4       	brcc	.+38     	; 0x102e <Binary_Value_Encode_Property_APDU+0x64>
    1008:	0b 34       	cpi	r16, 0x4B	; 75
    100a:	11 05       	cpc	r17, r1
    100c:	21 05       	cpc	r18, r1
    100e:	31 05       	cpc	r19, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <Binary_Value_Encode_Property_APDU+0x4a>
    1012:	52 c0       	rjmp	.+164    	; 0x10b8 <Binary_Value_Encode_Property_APDU+0xee>
    1014:	0d 34       	cpi	r16, 0x4D	; 77
    1016:	11 05       	cpc	r17, r1
    1018:	21 05       	cpc	r18, r1
    101a:	31 05       	cpc	r19, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <Binary_Value_Encode_Property_APDU+0x56>
    101e:	53 c0       	rjmp	.+166    	; 0x10c6 <Binary_Value_Encode_Property_APDU+0xfc>
    1020:	04 32       	cpi	r16, 0x24	; 36
    1022:	11 05       	cpc	r17, r1
    1024:	21 05       	cpc	r18, r1
    1026:	31 05       	cpc	r19, r1
    1028:	09 f0       	breq	.+2      	; 0x102c <Binary_Value_Encode_Property_APDU+0x62>
    102a:	7b c0       	rjmp	.+246    	; 0x1122 <Binary_Value_Encode_Property_APDU+0x158>
    102c:	76 c0       	rjmp	.+236    	; 0x111a <Binary_Value_Encode_Property_APDU+0x150>
    102e:	04 35       	cpi	r16, 0x54	; 84
    1030:	11 05       	cpc	r17, r1
    1032:	21 05       	cpc	r18, r1
    1034:	31 05       	cpc	r19, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <Binary_Value_Encode_Property_APDU+0x70>
    1038:	70 c0       	rjmp	.+224    	; 0x111a <Binary_Value_Encode_Property_APDU+0x150>
    103a:	50 f4       	brcc	.+20     	; 0x1050 <Binary_Value_Encode_Property_APDU+0x86>
    103c:	01 35       	cpi	r16, 0x51	; 81
    103e:	11 05       	cpc	r17, r1
    1040:	21 05       	cpc	r18, r1
    1042:	31 05       	cpc	r19, r1
    1044:	09 f0       	breq	.+2      	; 0x1048 <Binary_Value_Encode_Property_APDU+0x7e>
    1046:	6d c0       	rjmp	.+218    	; 0x1122 <Binary_Value_Encode_Property_APDU+0x158>
            /* note: see the details in the standard on how to use this */
            apdu_len =
                encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
            break;
        case PROP_OUT_OF_SERVICE:
            apdu_len = encode_application_boolean(&apdu[0], false);
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	0e 94 24 13 	call	0x2648	; 0x2648 <encode_application_boolean>
            break;
    104e:	71 c0       	rjmp	.+226    	; 0x1132 <Binary_Value_Encode_Property_APDU+0x168>
    switch (property) {
    1050:	05 35       	cpi	r16, 0x55	; 85
    1052:	11 05       	cpc	r17, r1
    1054:	21 05       	cpc	r18, r1
    1056:	31 05       	cpc	r19, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <Binary_Value_Encode_Property_APDU+0x92>
    105a:	4a c0       	rjmp	.+148    	; 0x10f0 <Binary_Value_Encode_Property_APDU+0x126>
    105c:	0f 36       	cpi	r16, 0x6F	; 111
    105e:	11 05       	cpc	r17, r1
    1060:	21 05       	cpc	r18, r1
    1062:	31 05       	cpc	r19, r1
    1064:	09 f0       	breq	.+2      	; 0x1068 <Binary_Value_Encode_Property_APDU+0x9e>
    1066:	5d c0       	rjmp	.+186    	; 0x1122 <Binary_Value_Encode_Property_APDU+0x158>
            bitstring_init(&bit_string);
    1068:	ce 01       	movw	r24, r28
    106a:	8e 59       	subi	r24, 0x9E	; 158
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <bitstring_init>
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	ce 01       	movw	r24, r28
    1078:	8e 59       	subi	r24, 0x9E	; 158
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	ce 01       	movw	r24, r28
    1086:	8e 59       	subi	r24, 0x9E	; 158
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	62 e0       	ldi	r22, 0x02	; 2
    1092:	ce 01       	movw	r24, r28
    1094:	8e 59       	subi	r24, 0x9E	; 158
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE, false);
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	63 e0       	ldi	r22, 0x03	; 3
    10a0:	ce 01       	movw	r24, r28
    10a2:	8e 59       	subi	r24, 0x9E	; 158
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bitstring_set_bit>
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    10aa:	be 01       	movw	r22, r28
    10ac:	6e 59       	subi	r22, 0x9E	; 158
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	c3 01       	movw	r24, r6
    10b2:	0e 94 6f 13 	call	0x26de	; 0x26de <encode_application_bitstring>
            break;
    10b6:	3d c0       	rjmp	.+122    	; 0x1132 <Binary_Value_Encode_Property_APDU+0x168>
            apdu_len =
    10b8:	9a 01       	movw	r18, r20
    10ba:	ab 01       	movw	r20, r22
    10bc:	65 e0       	ldi	r22, 0x05	; 5
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	0e 94 2a 14 	call	0x2854	; 0x2854 <encode_application_object_id>
            break;
    10c4:	36 c0       	rjmp	.+108    	; 0x1132 <Binary_Value_Encode_Property_APDU+0x168>
                Binary_Value_Name(object_instance));
    10c6:	cb 01       	movw	r24, r22
    10c8:	ba 01       	movw	r22, r20
    10ca:	0e 94 d7 07 	call	0xfae	; 0xfae <Binary_Value_Name>
            characterstring_init_ansi(&char_string,
    10ce:	bc 01       	movw	r22, r24
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <characterstring_init_ansi>
            apdu_len =
    10d8:	be 01       	movw	r22, r28
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	c3 01       	movw	r24, r6
    10e0:	0e 94 aa 14 	call	0x2954	; 0x2954 <encode_application_character_string>
            break;
    10e4:	26 c0       	rjmp	.+76     	; 0x1132 <Binary_Value_Encode_Property_APDU+0x168>
            apdu_len =
    10e6:	45 e0       	ldi	r20, 0x05	; 5
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	11 c0       	rjmp	.+34     	; 0x1112 <Binary_Value_Encode_Property_APDU+0x148>
    if (object_instance < MAX_BINARY_VALUES) {
    10f0:	44 30       	cpi	r20, 0x04	; 4
    10f2:	51 05       	cpc	r21, r1
    10f4:	61 05       	cpc	r22, r1
    10f6:	71 05       	cpc	r23, r1
    10f8:	40 f4       	brcc	.+16     	; 0x110a <Binary_Value_Encode_Property_APDU+0x140>
        value = Present_Value[object_instance];
    10fa:	fa 01       	movw	r30, r20
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	e2 56       	subi	r30, 0x62	; 98
    1102:	fd 4f       	sbci	r31, 0xFD	; 253
    1104:	40 81       	ld	r20, Z
    1106:	51 81       	ldd	r21, Z+1	; 0x01
    1108:	02 c0       	rjmp	.+4      	; 0x110e <Binary_Value_Encode_Property_APDU+0x144>
    BACNET_BINARY_PV value = BINARY_INACTIVE;
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	50 e0       	ldi	r21, 0x00	; 0
            apdu_len = encode_application_enumerated(&apdu[0], present_value);
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	c3 01       	movw	r24, r6
    1114:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <encode_application_enumerated>
            break;
    1118:	0c c0       	rjmp	.+24     	; 0x1132 <Binary_Value_Encode_Property_APDU+0x168>
        case PROP_POLARITY:
            /* FIXME: figure out the polarity */
            apdu_len = encode_application_enumerated(&apdu[0], polarity);
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	ba 01       	movw	r22, r20
    1120:	f8 cf       	rjmp	.-16     	; 0x1112 <Binary_Value_Encode_Property_APDU+0x148>
            break;
        default:
            *error_class = ERROR_CLASS_PROPERTY;
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	f5 01       	movw	r30, r10
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e c0       	rjmp	.+28     	; 0x114e <Binary_Value_Encode_Property_APDU+0x184>
            apdu_len = -1;
            break;
    }
    /*  only array properties can have array options */
    if ((apdu_len >= 0) && (array_index != BACNET_ARRAY_ALL)) {
    1132:	97 fd       	sbrc	r25, 7
    1134:	11 c0       	rjmp	.+34     	; 0x1158 <Binary_Value_Encode_Property_APDU+0x18e>
    1136:	cf 20       	and	r12, r15
    1138:	ce 20       	and	r12, r14
    113a:	cd 20       	and	r12, r13
    113c:	c0 94       	com	r12
    113e:	61 f0       	breq	.+24     	; 0x1158 <Binary_Value_Encode_Property_APDU+0x18e>
        *error_class = ERROR_CLASS_PROPERTY;
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	f5 01       	movw	r30, r10
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    114a:	82 e3       	ldi	r24, 0x32	; 50
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	f4 01       	movw	r30, r8
    1150:	91 83       	std	Z+1, r25	; 0x01
    1152:	80 83       	st	Z, r24
        apdu_len = -1;
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	9f ef       	ldi	r25, 0xFF	; 255
    }

    return apdu_len;
}
    1158:	cf 58       	subi	r28, 0x8F	; 143
    115a:	df 4f       	sbci	r29, 0xFF	; 255
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	bf 90       	pop	r11
    1178:	af 90       	pop	r10
    117a:	9f 90       	pop	r9
    117c:	8f 90       	pop	r8
    117e:	7f 90       	pop	r7
    1180:	6f 90       	pop	r6
    1182:	08 95       	ret

00001184 <Binary_Value_Write_Property>:

/* returns true if successful */
bool Binary_Value_Write_Property(BACNET_WRITE_PROPERTY_DATA * wp_data,
    BACNET_ERROR_CLASS * error_class,
    BACNET_ERROR_CODE * error_code)
{
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	c6 56       	subi	r28, 0x66	; 102
    119e:	d1 09       	sbc	r29, r1
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	7c 01       	movw	r14, r24
    11ac:	6b 01       	movw	r12, r22
    11ae:	5a 01       	movw	r10, r20
    if (object_instance < MAX_BINARY_VALUES)
    11b0:	fc 01       	movw	r30, r24
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	93 81       	ldd	r25, Z+3	; 0x03
    11b6:	a4 81       	ldd	r26, Z+4	; 0x04
    11b8:	b5 81       	ldd	r27, Z+5	; 0x05
    11ba:	04 97       	sbiw	r24, 0x04	; 4
    11bc:	a1 05       	cpc	r26, r1
    11be:	b1 05       	cpc	r27, r1
    11c0:	60 f0       	brcs	.+24     	; 0x11da <Binary_Value_Write_Property+0x56>
    unsigned int object_index = 0;
    int len = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    if (!Binary_Value_Valid_Instance(wp_data->object_instance)) {
        *error_class = ERROR_CLASS_OBJECT;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	fb 01       	movw	r30, r22
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	80 83       	st	Z, r24
        *error_code = ERROR_CODE_UNKNOWN_OBJECT;
    11cc:	8f e1       	ldi	r24, 0x1F	; 31
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	f5 01       	movw	r30, r10
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
        return false;
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	5b c0       	rjmp	.+182    	; 0x1290 <Binary_Value_Write_Property+0x10c>
    }
    /* decode the some of the request */
    len =
        bacapp_decode_application_data(wp_data->application_data,
        wp_data->application_data_len, &value);
    11da:	f7 01       	movw	r30, r14
    11dc:	ee 58       	subi	r30, 0x8E	; 142
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    len =
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	ae 01       	movw	r20, r28
    11e6:	4f 5f       	subi	r20, 0xFF	; 255
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	c7 01       	movw	r24, r14
    11ec:	0e 96       	adiw	r24, 0x0e	; 14
    11ee:	0e 94 01 1c 	call	0x3802	; 0x3802 <bacapp_decode_application_data>
    /* FIXME: len < application_data_len: more data? */
    if (len < 0) {
    11f2:	97 ff       	sbrs	r25, 7
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <Binary_Value_Write_Property+0x88>
        /* error while decoding - a value larger than we can handle */
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    11f6:	f7 01       	movw	r30, r14
    11f8:	eb 58       	subi	r30, 0x8B	; 139
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    1204:	32 96       	adiw	r30, 0x02	; 2
    1206:	85 e2       	ldi	r24, 0x25	; 37
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	e3 cf       	rjmp	.-58     	; 0x11d2 <Binary_Value_Write_Property+0x4e>
        return false;
    }
    switch (wp_data->object_property) {
    120c:	f7 01       	movw	r30, r14
    120e:	86 81       	ldd	r24, Z+6	; 0x06
    1210:	97 81       	ldd	r25, Z+7	; 0x07
    1212:	a0 85       	ldd	r26, Z+8	; 0x08
    1214:	b1 85       	ldd	r27, Z+9	; 0x09
    1216:	85 35       	cpi	r24, 0x55	; 85
    1218:	91 05       	cpc	r25, r1
    121a:	a1 05       	cpc	r26, r1
    121c:	b1 05       	cpc	r27, r1
    121e:	81 f5       	brne	.+96     	; 0x1280 <Binary_Value_Write_Property+0xfc>
        case PROP_PRESENT_VALUE:
            if (value.tag == BACNET_APPLICATION_TAG_ENUMERATED) {
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	89 30       	cpi	r24, 0x09	; 9
    1224:	29 f5       	brne	.+74     	; 0x1270 <Binary_Value_Write_Property+0xec>
                if ((value.type.Enumerated == BINARY_ACTIVE) ||
    1226:	0c 81       	ldd	r16, Y+4	; 0x04
    1228:	1d 81       	ldd	r17, Y+5	; 0x05
    122a:	2e 81       	ldd	r18, Y+6	; 0x06
    122c:	3f 81       	ldd	r19, Y+7	; 0x07
    122e:	02 30       	cpi	r16, 0x02	; 2
    1230:	11 05       	cpc	r17, r1
    1232:	21 05       	cpc	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	a0 f4       	brcc	.+40     	; 0x1260 <Binary_Value_Write_Property+0xdc>
                    (value.type.Enumerated == BINARY_INACTIVE)) {
                    object_index =
                        Binary_Value_Instance_To_Index(wp_data->
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	a4 81       	ldd	r26, Z+4	; 0x04
    123e:	b5 81       	ldd	r27, Z+5	; 0x05
    if (object_instance < MAX_BINARY_VALUES)
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	91 05       	cpc	r25, r1
    1244:	a1 05       	cpc	r26, r1
    1246:	b1 05       	cpc	r27, r1
    1248:	10 f0       	brcs	.+4      	; 0x124e <Binary_Value_Write_Property+0xca>
    unsigned index = MAX_BINARY_VALUES;
    124a:	84 e0       	ldi	r24, 0x04	; 4
    124c:	90 e0       	ldi	r25, 0x00	; 0
                        object_instance);
                    /* NOTE: this Binary value has no priority array */
                    Present_Value[object_index] =
    124e:	fc 01       	movw	r30, r24
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e2 56       	subi	r30, 0x62	; 98
    1256:	fd 4f       	sbci	r31, 0xFD	; 253
                        (BACNET_BINARY_PV) value.type.Enumerated;
    1258:	11 83       	std	Z+1, r17	; 0x01
    125a:	00 83       	st	Z, r16
                    if (Present_Value[0] == BINARY_ACTIVE) {
//                        LED_GREEN_ON();
                    } else {
//                        LED_GREEN_OFF();
                    }
                    status = true;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	18 c0       	rjmp	.+48     	; 0x1290 <Binary_Value_Write_Property+0x10c>
                } else {
                    *error_class = ERROR_CLASS_PROPERTY;
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	f6 01       	movw	r30, r12
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
                    *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    126a:	85 e2       	ldi	r24, 0x25	; 37
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	b0 cf       	rjmp	.-160    	; 0x11d0 <Binary_Value_Write_Property+0x4c>
                }
            } else {
                *error_class = ERROR_CLASS_PROPERTY;
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	f6 01       	movw	r30, r12
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
    127a:	89 e0       	ldi	r24, 0x09	; 9
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a8 cf       	rjmp	.-176    	; 0x11d0 <Binary_Value_Write_Property+0x4c>
                *error_code = ERROR_CODE_INVALID_DATA_TYPE;
            }
            break;
#endif
        default:
            *error_class = ERROR_CLASS_PROPERTY;
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	f6 01       	movw	r30, r12
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    128a:	88 e2       	ldi	r24, 0x28	; 40
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 cf       	rjmp	.-192    	; 0x11d0 <Binary_Value_Write_Property+0x4c>
            break;
    }

    return status;
}
    1290:	ca 59       	subi	r28, 0x9A	; 154
    1292:	df 4f       	sbci	r29, 0xFF	; 255
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	08 95       	ret

000012b4 <sendIamUnicast>:

bool Send_I_Am_Flag = true;

void sendIamUnicast(uint8_t * buffer,
    BACNET_ADDRESS * src)
{
    12b4:	af 92       	push	r10
    12b6:	bf 92       	push	r11
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	ae 97       	sbiw	r28, 0x2e	; 46
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	6c 01       	movw	r12, r24
    /* encode the data */
    int npdu_len = 0;
    int apdu_len = 0;
    BACNET_ADDRESS my_address;
    /* The destination will be the same as the src, so copy it over. */
    memcpy(&dest, src, sizeof(BACNET_ADDRESS));
    12da:	82 e1       	ldi	r24, 0x12	; 18
    12dc:	fb 01       	movw	r30, r22
    12de:	de 01       	movw	r26, r28
    12e0:	53 96       	adiw	r26, 0x13	; 19
    12e2:	01 90       	ld	r0, Z+
    12e4:	0d 92       	st	X+, r0
    12e6:	8a 95       	dec	r24
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <sendIamUnicast+0x2e>
    /* dest->net = 0; - no, must direct back to src->net to meet BTL tests */

    datalink_get_my_address(&my_address);
    12ea:	ce 01       	movw	r24, r28
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	0e 94 a6 0c 	call	0x194c	; 0x194c <bip_get_my_address>
    /* encode the NPDU portion of the packet */
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	ce 01       	movw	r24, r28
    12fa:	85 96       	adiw	r24, 0x25	; 37
    12fc:	0e 94 13 10 	call	0x2026	; 0x2026 <npdu_encode_npdu_data>
    npdu_len = npdu_encode_pdu(&buffer[0], &dest, &my_address, &npdu_data);
    1300:	9e 01       	movw	r18, r28
    1302:	2b 5d       	subi	r18, 0xDB	; 219
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	ae 01       	movw	r20, r28
    1308:	4f 5f       	subi	r20, 0xFF	; 255
    130a:	5f 4f       	sbci	r21, 0xFF	; 255
    130c:	be 01       	movw	r22, r28
    130e:	6d 5e       	subi	r22, 0xED	; 237
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	c6 01       	movw	r24, r12
    1314:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <npdu_encode_pdu>
    1318:	5c 01       	movw	r10, r24
    /* encode the APDU portion of the packet */
    apdu_len =
        iam_encode_apdu(&buffer[npdu_len], Device_Object_Instance_Number(),
    131a:	0e 94 33 03 	call	0x666	; 0x666 <Device_Vendor_Identifier>
    131e:	7c 01       	movw	r14, r24
    1320:	0e 94 0d 03 	call	0x61a	; 0x61a <Device_Object_Instance_Number>
    1324:	ab 01       	movw	r20, r22
    1326:	bc 01       	movw	r22, r24
    apdu_len =
    1328:	03 e0       	ldi	r16, 0x03	; 3
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	24 e6       	ldi	r18, 0x64	; 100
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	c6 01       	movw	r24, r12
    1332:	8a 0d       	add	r24, r10
    1334:	9b 1d       	adc	r25, r11
    1336:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <iam_encode_apdu>
        MAX_APDU, SEGMENTATION_NONE, Device_Vendor_Identifier());
    /* send data */
    pdu_len = npdu_len + apdu_len;
    133a:	95 01       	movw	r18, r10
    133c:	28 0f       	add	r18, r24
    133e:	39 1f       	adc	r19, r25
    int bytes = datalink_send_pdu(&dest, &npdu_data, &buffer[0], pdu_len);
    1340:	a6 01       	movw	r20, r12
    1342:	be 01       	movw	r22, r28
    1344:	6b 5d       	subi	r22, 0xDB	; 219
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	ce 01       	movw	r24, r28
    134a:	43 96       	adiw	r24, 0x13	; 19
    134c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <bip_send_pdu>
}
    1350:	ae 96       	adiw	r28, 0x2e	; 46
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	bf 90       	pop	r11
    136e:	af 90       	pop	r10
    1370:	08 95       	ret

00001372 <handler_who_is>:

void handler_who_is(uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src)
{
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	28 97       	sbiw	r28, 0x08	; 8
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	8a 01       	movw	r16, r20
    int len = 0;
    int32_t low_limit = 0;
    1394:	1d 82       	std	Y+5, r1	; 0x05
    1396:	1e 82       	std	Y+6, r1	; 0x06
    1398:	1f 82       	std	Y+7, r1	; 0x07
    139a:	18 86       	std	Y+8, r1	; 0x08
    int32_t high_limit = 0;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	1a 82       	std	Y+2, r1	; 0x02
    13a0:	1b 82       	std	Y+3, r1	; 0x03
    13a2:	1c 82       	std	Y+4, r1	; 0x04
    int32_t target_device;

    len =
    13a4:	9e 01       	movw	r18, r28
    13a6:	2f 5f       	subi	r18, 0xFF	; 255
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	ae 01       	movw	r20, r28
    13ac:	4b 5f       	subi	r20, 0xFB	; 251
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255
    13b0:	0e 94 87 1a 	call	0x350e	; 0x350e <whois_decode_service_request>
        whois_decode_service_request(service_request, service_len, &low_limit,
        &high_limit);
    if (len == 0) {
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	31 f4       	brne	.+12     	; 0x13c4 <handler_who_is+0x52>
        sendIamUnicast(&Handler_Transmit_Buffer[0], src);
    13b8:	b8 01       	movw	r22, r16
    13ba:	8e e2       	ldi	r24, 0x2E	; 46
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <sendIamUnicast>
    13c2:	16 c0       	rjmp	.+44     	; 0x13f0 <handler_who_is+0x7e>
    } else if (len != -1) {
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <handler_who_is+0x7e>
        /* is my device id within the limits? */
        target_device = Device_Object_Instance_Number();
    13c8:	0e 94 0d 03 	call	0x61a	; 0x61a <Device_Object_Instance_Number>
        if (((target_device >= low_limit) && (target_device <= high_limit))) {
    13cc:	cd 80       	ldd	r12, Y+5	; 0x05
    13ce:	de 80       	ldd	r13, Y+6	; 0x06
    13d0:	ef 80       	ldd	r14, Y+7	; 0x07
    13d2:	f8 84       	ldd	r15, Y+8	; 0x08
    13d4:	6c 15       	cp	r22, r12
    13d6:	7d 05       	cpc	r23, r13
    13d8:	8e 05       	cpc	r24, r14
    13da:	9f 05       	cpc	r25, r15
    13dc:	4c f0       	brlt	.+18     	; 0x13f0 <handler_who_is+0x7e>
    13de:	c9 80       	ldd	r12, Y+1	; 0x01
    13e0:	da 80       	ldd	r13, Y+2	; 0x02
    13e2:	eb 80       	ldd	r14, Y+3	; 0x03
    13e4:	fc 80       	ldd	r15, Y+4	; 0x04
    13e6:	c6 16       	cp	r12, r22
    13e8:	d7 06       	cpc	r13, r23
    13ea:	e8 06       	cpc	r14, r24
    13ec:	f9 06       	cpc	r15, r25
    13ee:	24 f7       	brge	.-56     	; 0x13b8 <handler_who_is+0x46>
            sendIamUnicast(&Handler_Transmit_Buffer[0], src);
        }
    }

    return;
}
    13f0:	28 96       	adiw	r28, 0x08	; 8
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	08 95       	ret

0000140e <handler_write_property>:

void handler_write_property(uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src,
    BACNET_CONFIRMED_SERVICE_DATA * service_data)
{
    140e:	8f 92       	push	r8
    1410:	9f 92       	push	r9
    1412:	af 92       	push	r10
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	a0 97       	sbiw	r28, 0x20	; 32
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	5a 01       	movw	r10, r20
    1438:	79 01       	movw	r14, r18
    int len = 0;
    int pdu_len = 0;
    BACNET_NPDU_DATA npdu_data;
    BACNET_ERROR_CLASS error_class = ERROR_CLASS_OBJECT;
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	38 a3       	std	Y+32, r19	; 0x20
    1440:	2f 8f       	std	Y+31, r18	; 0x1f
    BACNET_ERROR_CODE error_code = ERROR_CODE_UNKNOWN_OBJECT;
    1442:	2f e1       	ldi	r18, 0x1F	; 31
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3e 8f       	std	Y+30, r19	; 0x1e
    1448:	2d 8f       	std	Y+29, r18	; 0x1d
    BACNET_ADDRESS my_address;

    /* decode the service request only */
    len = wp_decode_service_request(service_request, service_len, &wp_data);
    144a:	46 ea       	ldi	r20, 0xA6	; 166
    144c:	52 e0       	ldi	r21, 0x02	; 2
    144e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <wp_decode_service_request>
    1452:	8c 01       	movw	r16, r24
    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	0e 94 a6 0c 	call	0x194c	; 0x194c <bip_get_my_address>
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	ce 01       	movw	r24, r28
    1464:	43 96       	adiw	r24, 0x13	; 19
    1466:	0e 94 13 10 	call	0x2026	; 0x2026 <npdu_encode_npdu_data>
    pdu_len =
    146a:	9e 01       	movw	r18, r28
    146c:	2d 5e       	subi	r18, 0xED	; 237
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	ae 01       	movw	r20, r28
    1472:	4f 5f       	subi	r20, 0xFF	; 255
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	b5 01       	movw	r22, r10
    1478:	8e e2       	ldi	r24, 0x2E	; 46
    147a:	93 e0       	ldi	r25, 0x03	; 3
    147c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <npdu_encode_pdu>
    1480:	4c 01       	movw	r8, r24
    1482:	82 5d       	subi	r24, 0xD2	; 210
    1484:	9c 4f       	sbci	r25, 0xFC	; 252
    1486:	6c 01       	movw	r12, r24
        npdu_encode_pdu(&Handler_Transmit_Buffer[0], src, &my_address,
        &npdu_data);
    /* bad decoding or something we didn't understand - send an abort */
    if (len <= 0) {
    1488:	10 16       	cp	r1, r16
    148a:	11 06       	cpc	r1, r17
    148c:	2c f0       	brlt	.+10     	; 0x1498 <handler_write_property+0x8a>
        len =
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	f7 01       	movw	r30, r14
    1494:	67 81       	ldd	r22, Z+7	; 0x07
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <handler_write_property+0x9a>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_OTHER, true);
    } else if (service_data->segmented_message) {
    1498:	f7 01       	movw	r30, r14
    149a:	80 81       	ld	r24, Z
    149c:	88 23       	and	r24, r24
    149e:	39 f0       	breq	.+14     	; 0x14ae <handler_write_property+0xa0>
        len =
    14a0:	21 e0       	ldi	r18, 0x01	; 1
    14a2:	44 e0       	ldi	r20, 0x04	; 4
    14a4:	67 81       	ldd	r22, Z+7	; 0x07
    14a6:	c6 01       	movw	r24, r12
    14a8:	0e 94 40 1b 	call	0x3680	; 0x3680 <abort_encode_apdu>
    14ac:	40 c0       	rjmp	.+128    	; 0x152e <handler_write_property+0x120>
            abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
            service_data->invoke_id, ABORT_REASON_SEGMENTATION_NOT_SUPPORTED,
            true);
    } else {
        switch (wp_data.object_type) {
    14ae:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <wp_data>
    14b2:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <wp_data+0x1>
    14b6:	85 30       	cpi	r24, 0x05	; 5
    14b8:	91 05       	cpc	r25, r1
    14ba:	d9 f0       	breq	.+54     	; 0x14f2 <handler_write_property+0xe4>
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	91 05       	cpc	r25, r1
    14c0:	69 f0       	breq	.+26     	; 0x14dc <handler_write_property+0xce>
    14c2:	02 97       	sbiw	r24, 0x02	; 2
    14c4:	49 f5       	brne	.+82     	; 0x1518 <handler_write_property+0x10a>
                        SERVICE_CONFIRMED_WRITE_PROPERTY, error_class,
                        error_code);
                }
                break;
            case OBJECT_ANALOG_VALUE:
                if (Analog_Value_Write_Property(&wp_data, &error_class,
    14c6:	ae 01       	movw	r20, r28
    14c8:	43 5e       	subi	r20, 0xE3	; 227
    14ca:	5f 4f       	sbci	r21, 0xFF	; 255
    14cc:	be 01       	movw	r22, r28
    14ce:	61 5e       	subi	r22, 0xE1	; 225
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	86 ea       	ldi	r24, 0xA6	; 166
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	0e 94 3c 07 	call	0xe78	; 0xe78 <Analog_Value_Write_Property>
    14da:	15 c0       	rjmp	.+42     	; 0x1506 <handler_write_property+0xf8>
                if (Device_Write_Property(&wp_data, &error_class, &error_code)) {
    14dc:	ae 01       	movw	r20, r28
    14de:	43 5e       	subi	r20, 0xE3	; 227
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	be 01       	movw	r22, r28
    14e4:	61 5e       	subi	r22, 0xE1	; 225
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	86 ea       	ldi	r24, 0xA6	; 166
    14ea:	92 e0       	ldi	r25, 0x02	; 2
    14ec:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Device_Write_Property>
    14f0:	0a c0       	rjmp	.+20     	; 0x1506 <handler_write_property+0xf8>
                        SERVICE_CONFIRMED_WRITE_PROPERTY, error_class,
                        error_code);
                }
                break;
            case OBJECT_BINARY_VALUE:
                if (Binary_Value_Write_Property(&wp_data, &error_class,
    14f2:	ae 01       	movw	r20, r28
    14f4:	43 5e       	subi	r20, 0xE3	; 227
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	be 01       	movw	r22, r28
    14fa:	61 5e       	subi	r22, 0xE1	; 225
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	86 ea       	ldi	r24, 0xA6	; 166
    1500:	92 e0       	ldi	r25, 0x02	; 2
    1502:	0e 94 c2 08 	call	0x1184	; 0x1184 <Binary_Value_Write_Property>
    1506:	88 23       	and	r24, r24
    1508:	39 f0       	breq	.+14     	; 0x1518 <handler_write_property+0x10a>
                        &error_code)) {
                    len =
    150a:	4f e0       	ldi	r20, 0x0F	; 15
    150c:	f7 01       	movw	r30, r14
    150e:	67 81       	ldd	r22, Z+7	; 0x07
    1510:	c6 01       	movw	r24, r12
    1512:	0e 94 77 16 	call	0x2cee	; 0x2cee <encode_simple_ack>
    1516:	0b c0       	rjmp	.+22     	; 0x152e <handler_write_property+0x120>
                        SERVICE_CONFIRMED_WRITE_PROPERTY, error_class,
                        error_code);
                }
                break;
            default:
                len =
    1518:	0d 8d       	ldd	r16, Y+29	; 0x1d
    151a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    151c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    151e:	38 a1       	ldd	r19, Y+32	; 0x20
    1520:	4f e0       	ldi	r20, 0x0F	; 15
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	f7 01       	movw	r30, r14
    1526:	67 81       	ldd	r22, Z+7	; 0x07
    1528:	c6 01       	movw	r24, r12
    152a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <bacerror_encode_apdu>
                    service_data->invoke_id, SERVICE_CONFIRMED_WRITE_PROPERTY,
                    error_class, error_code);
                break;
        }
    }
    pdu_len += len;
    152e:	94 01       	movw	r18, r8
    1530:	28 0f       	add	r18, r24
    1532:	39 1f       	adc	r19, r25
    datalink_send_pdu(src, &npdu_data, &Handler_Transmit_Buffer[0], pdu_len);
    1534:	4e e2       	ldi	r20, 0x2E	; 46
    1536:	53 e0       	ldi	r21, 0x03	; 3
    1538:	be 01       	movw	r22, r28
    153a:	6d 5e       	subi	r22, 0xED	; 237
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	c5 01       	movw	r24, r10
    1540:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <bip_send_pdu>

    return;
}
    1544:	a0 96       	adiw	r28, 0x20	; 32
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	9f 90       	pop	r9
    1566:	8f 90       	pop	r8
    1568:	08 95       	ret

0000156a <convertBIP_Address2uint32>:

/** Converter from uint8_t[4] type address to uint32_t
 *
 */
uint32_t convertBIP_Address2uint32(uint8_t * bip_address)
{
    156a:	fc 01       	movw	r30, r24
    return (uint32_t) ((bip_address[0] * 2 ^ 24) + (bip_address[1] * 2 ^ 16) +
    156c:	60 81       	ld	r22, Z
    156e:	41 81       	ldd	r20, Z+1	; 0x01
        (bip_address[2] * 2 ^ 8) + bip_address[3]);
    1570:	22 81       	ldd	r18, Z+2	; 0x02
    return (uint32_t) ((bip_address[0] * 2 ^ 24) + (bip_address[1] * 2 ^ 16) +
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	66 0f       	add	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	88 e1       	ldi	r24, 0x18	; 24
    157a:	68 27       	eor	r22, r24
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	44 0f       	add	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	80 e1       	ldi	r24, 0x10	; 16
    1584:	48 27       	eor	r20, r24
    1586:	64 0f       	add	r22, r20
    1588:	75 1f       	adc	r23, r21
        (bip_address[2] * 2 ^ 8) + bip_address[3]);
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	88 e0       	ldi	r24, 0x08	; 8
    1592:	28 27       	eor	r18, r24
    return (uint32_t) ((bip_address[0] * 2 ^ 24) + (bip_address[1] * 2 ^ 16) +
    1594:	62 0f       	add	r22, r18
    1596:	73 1f       	adc	r23, r19
        (bip_address[2] * 2 ^ 8) + bip_address[3]);
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	68 0f       	add	r22, r24
    159c:	71 1d       	adc	r23, r1
    return (uint32_t) ((bip_address[0] * 2 ^ 24) + (bip_address[1] * 2 ^ 16) +
    159e:	88 27       	eor	r24, r24
    15a0:	77 fd       	sbrc	r23, 7
    15a2:	80 95       	com	r24
    15a4:	98 2f       	mov	r25, r24
}
    15a6:	08 95       	ret

000015a8 <bip_set_socket>:
 *
 * @param sock_fd [in] Handle for the BACnet/IP socket.
 */
void bip_set_socket(uint8_t sock_fd)
{
    BIP_Socket = sock_fd;
    15a8:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <BIP_Socket>
    15ac:	08 95       	ret

000015ae <bip_socket>:
 * @return The handle to the BACnet/IP socket.
 */
uint8_t bip_socket(void)
{
    return BIP_Socket;
}
    15ae:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <BIP_Socket>
    15b2:	08 95       	ret

000015b4 <bip_valid>:

bool bip_valid(void)
{
    return (BIP_Socket < MAX_SOCK_NUM);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <BIP_Socket>
    15ba:	94 30       	cpi	r25, 0x04	; 4
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <bip_valid+0xc>
    15be:	80 e0       	ldi	r24, 0x00	; 0
}
    15c0:	08 95       	ret

000015c2 <bip_set_addr>:

void bip_set_addr(uint8_t * net_address)
{       /* in network byte order */
    15c2:	e3 e2       	ldi	r30, 0x23	; 35
    15c4:	f3 e0       	ldi	r31, 0x03	; 3
    for (uint8_t i = 0; i < 4; i++)
        BIP_Address[i] = net_address[i];
    15c6:	dc 01       	movw	r26, r24
    15c8:	2d 91       	ld	r18, X+
    15ca:	cd 01       	movw	r24, r26
    15cc:	21 93       	st	Z+, r18
    for (uint8_t i = 0; i < 4; i++)
    15ce:	b3 e0       	ldi	r27, 0x03	; 3
    15d0:	e7 32       	cpi	r30, 0x27	; 39
    15d2:	fb 07       	cpc	r31, r27
    15d4:	c1 f7       	brne	.-16     	; 0x15c6 <bip_set_addr+0x4>
}
    15d6:	08 95       	ret

000015d8 <bip_set_broadcast_addr>:
{
    return BIP_Address;
}

void bip_set_broadcast_addr(uint8_t * net_address)
{       /* in network byte order */
    15d8:	ef e1       	ldi	r30, 0x1F	; 31
    15da:	f3 e0       	ldi	r31, 0x03	; 3
    for (uint8_t i = 0; i < 4; i++)
        BIP_Broadcast_Address[i] = net_address[i];
    15dc:	dc 01       	movw	r26, r24
    15de:	2d 91       	ld	r18, X+
    15e0:	cd 01       	movw	r24, r26
    15e2:	21 93       	st	Z+, r18
    for (uint8_t i = 0; i < 4; i++)
    15e4:	b3 e0       	ldi	r27, 0x03	; 3
    15e6:	e3 32       	cpi	r30, 0x23	; 35
    15e8:	fb 07       	cpc	r31, r27
    15ea:	c1 f7       	brne	.-16     	; 0x15dc <bip_set_broadcast_addr+0x4>
}
    15ec:	08 95       	ret

000015ee <bip_send_pdu>:
    BACNET_NPDU_DATA * npdu_data,       /* network information */

    uint8_t * pdu,      /* any data to be sent - may be null */

    unsigned pdu_len)
{       /* number of bytes of data */
    15ee:	8f 92       	push	r8
    15f0:	9f 92       	push	r9
    15f2:	af 92       	push	r10
    15f4:	bf 92       	push	r11
    15f6:	cf 92       	push	r12
    15f8:	df 92       	push	r13
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	c6 58       	subi	r28, 0x86	; 134
    160c:	d1 09       	sbc	r29, r1
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	fc 01       	movw	r30, r24
    161a:	5a 01       	movw	r10, r20
    161c:	69 01       	movw	r12, r18

    uint8_t mtu[MAX_MPDU] = { 0 };
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	7c 01       	movw	r14, r24
    1624:	82 e8       	ldi	r24, 0x82	; 130
    1626:	d7 01       	movw	r26, r14
    1628:	1d 92       	st	X+, r1
    162a:	8a 95       	dec	r24
    162c:	e9 f7       	brne	.-6      	; 0x1628 <bip_send_pdu+0x3a>
    int mtu_len = 0;
    int bytes_sent = 0;
    /* addr and port in host format */
    uint8_t address[] = { 0, 0, 0, 0 };
    162e:	cd 57       	subi	r28, 0x7D	; 125
    1630:	df 4f       	sbci	r29, 0xFF	; 255
    1632:	18 82       	st	Y, r1
    1634:	19 82       	std	Y+1, r1	; 0x01
    1636:	1a 82       	std	Y+2, r1	; 0x02
    1638:	1b 82       	std	Y+3, r1	; 0x03
    163a:	c3 58       	subi	r28, 0x83	; 131
    163c:	d0 40       	sbci	r29, 0x00	; 0
    /* assumes that the driver has already been initialized */
    if (BIP_Socket < 0) {
        return BIP_Socket;
    }

    mtu[0] = BVLL_TYPE_BACNET_IP;
    163e:	81 e8       	ldi	r24, 0x81	; 129
    1640:	89 83       	std	Y+1, r24	; 0x01
    if ((dest->net == BACNET_BROADCAST_NETWORK) || ((dest->net > 0) &&
    1642:	80 85       	ldd	r24, Z+8	; 0x08
    1644:	91 85       	ldd	r25, Z+9	; 0x09
    1646:	8f 3f       	cpi	r24, 0xFF	; 255
    1648:	bf ef       	ldi	r27, 0xFF	; 255
    164a:	9b 07       	cpc	r25, r27
    164c:	29 f0       	breq	.+10     	; 0x1658 <bip_send_pdu+0x6a>
    164e:	89 2b       	or	r24, r25
    1650:	29 f1       	breq	.+74     	; 0x169c <bip_send_pdu+0xae>
    1652:	82 85       	ldd	r24, Z+10	; 0x0a
    1654:	81 11       	cpse	r24, r1
    1656:	22 c0       	rjmp	.+68     	; 0x169c <bip_send_pdu+0xae>
            (dest->len == 0)) || (dest->mac_len == 0)) {
        /* broadcast */
        for (uint8_t i = 0; i < 4; i++)
            address[i] = BIP_Broadcast_Address[i];
    1658:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <BIP_Broadcast_Address>
    165c:	cd 57       	subi	r28, 0x7D	; 125
    165e:	df 4f       	sbci	r29, 0xFF	; 255
    1660:	88 83       	st	Y, r24
    1662:	c3 58       	subi	r28, 0x83	; 131
    1664:	d0 40       	sbci	r29, 0x00	; 0
    1666:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <BIP_Broadcast_Address+0x1>
    166a:	cc 57       	subi	r28, 0x7C	; 124
    166c:	df 4f       	sbci	r29, 0xFF	; 255
    166e:	88 83       	st	Y, r24
    1670:	c4 58       	subi	r28, 0x84	; 132
    1672:	d0 40       	sbci	r29, 0x00	; 0
    1674:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BIP_Broadcast_Address+0x2>
    1678:	cb 57       	subi	r28, 0x7B	; 123
    167a:	df 4f       	sbci	r29, 0xFF	; 255
    167c:	88 83       	st	Y, r24
    167e:	c5 58       	subi	r28, 0x85	; 133
    1680:	d0 40       	sbci	r29, 0x00	; 0
    1682:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <BIP_Broadcast_Address+0x3>
    1686:	ca 57       	subi	r28, 0x7A	; 122
    1688:	df 4f       	sbci	r29, 0xFF	; 255
    168a:	88 83       	st	Y, r24
    168c:	c6 58       	subi	r28, 0x86	; 134
    168e:	d0 40       	sbci	r29, 0x00	; 0
        port = BIP_Port;
    1690:	00 91 27 03 	lds	r16, 0x0327	; 0x800327 <BIP_Port>
    1694:	10 91 28 03 	lds	r17, 0x0328	; 0x800328 <BIP_Port+0x1>
        mtu[1] = BVLC_ORIGINAL_BROADCAST_NPDU;
    1698:	8b e0       	ldi	r24, 0x0B	; 11
    169a:	19 c0       	rjmp	.+50     	; 0x16ce <bip_send_pdu+0xe0>
            (dest->len == 0)) || (dest->mac_len == 0)) {
    169c:	80 81       	ld	r24, Z
    169e:	88 23       	and	r24, r24
    16a0:	d9 f2       	breq	.-74     	; 0x1658 <bip_send_pdu+0x6a>
#ifdef DEBUG
        fprintf(stderr, "Send Broadcast NPDU to %d.%d.%d.%d:%d\n", address[0],
            address[1]
            , address[2], address[3], port);
#endif
    } else if (dest->mac_len == 6) {
    16a2:	86 30       	cpi	r24, 0x06	; 6
    16a4:	89 f5       	brne	.+98     	; 0x1708 <bip_send_pdu+0x11a>
    if (bac_addr) {
    16a6:	30 97       	sbiw	r30, 0x00	; 0
    16a8:	79 f0       	breq	.+30     	; 0x16c8 <bip_send_pdu+0xda>
        memcpy(address, &bac_addr->mac[0], 4);
    16aa:	01 81       	ldd	r16, Z+1	; 0x01
    16ac:	12 81       	ldd	r17, Z+2	; 0x02
    16ae:	23 81       	ldd	r18, Z+3	; 0x03
    16b0:	34 81       	ldd	r19, Z+4	; 0x04
    16b2:	cd 57       	subi	r28, 0x7D	; 125
    16b4:	df 4f       	sbci	r29, 0xFF	; 255
    16b6:	08 83       	st	Y, r16
    16b8:	19 83       	std	Y+1, r17	; 0x01
    16ba:	2a 83       	std	Y+2, r18	; 0x02
    16bc:	3b 83       	std	Y+3, r19	; 0x03
    16be:	c3 58       	subi	r28, 0x83	; 131
    16c0:	d0 40       	sbci	r29, 0x00	; 0
        memcpy(port, &bac_addr->mac[4], 2);
    16c2:	05 81       	ldd	r16, Z+5	; 0x05
    16c4:	16 81       	ldd	r17, Z+6	; 0x06
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <bip_send_pdu+0xde>
    uint16_t port = 0;
    16c8:	00 e0       	ldi	r16, 0x00	; 0
    16ca:	10 e0       	ldi	r17, 0x00	; 0
        bip_decode_bip_address(dest, address, &port);
        mtu[1] = BVLC_ORIGINAL_UNICAST_NPDU;
    16cc:	8a e0       	ldi	r24, 0x0A	; 10
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    }

    mtu_len = 2;
    mtu_len +=
        encode_unsigned16(&mtu[mtu_len],
        (uint16_t) (pdu_len + 4 /*inclusive */ ));
    16d0:	b6 01       	movw	r22, r12
    16d2:	6c 5f       	subi	r22, 0xFC	; 252
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
        encode_unsigned16(&mtu[mtu_len],
    16d6:	ce 01       	movw	r24, r28
    16d8:	03 96       	adiw	r24, 0x03	; 3
    16da:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <encode_unsigned16>
    mtu_len +=
    16de:	02 96       	adiw	r24, 0x02	; 2
    16e0:	4c 01       	movw	r8, r24
    memcpy(&mtu[mtu_len], pdu, pdu_len);
    16e2:	a6 01       	movw	r20, r12
    16e4:	b5 01       	movw	r22, r10
    16e6:	c7 01       	movw	r24, r14
    16e8:	88 0d       	add	r24, r8
    16ea:	99 1d       	adc	r25, r9
    16ec:	0e 94 89 23 	call	0x4712	; 0x4712 <memcpy>
    mtu_len += pdu_len;
    16f0:	a4 01       	movw	r20, r8
    16f2:	4c 0d       	add	r20, r12
    16f4:	5d 1d       	adc	r21, r13
    fprintf(stderr, "MTU size %d\n", mtu_len);
#endif

    /* Send the packet */
    bytes_sent =
        sendto_func(BIP_Socket, mtu, (uint16_t) mtu_len, address, port);
    16f6:	9e 01       	movw	r18, r28
    16f8:	2d 57       	subi	r18, 0x7D	; 125
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	b7 01       	movw	r22, r14
    16fe:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <BIP_Socket>
    1702:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <sendto_func>

    return bytes_sent;
    1706:	02 c0       	rjmp	.+4      	; 0x170c <bip_send_pdu+0x11e>
        return -1;
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	9f ef       	ldi	r25, 0xFF	; 255
}
    170c:	ca 57       	subi	r28, 0x7A	; 122
    170e:	df 4f       	sbci	r29, 0xFF	; 255
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	bf 90       	pop	r11
    172c:	af 90       	pop	r10
    172e:	9f 90       	pop	r9
    1730:	8f 90       	pop	r8
    1732:	08 95       	ret

00001734 <bip_receive>:
    uint8_t * pdu,      /* PDU data */

    uint16_t max_pdu,   /* amount of space available in the PDU  */

    unsigned timeout)
{
    1734:	4f 92       	push	r4
    1736:	5f 92       	push	r5
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	29 97       	sbiw	r28, 0x09	; 9
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	6c 01       	movw	r12, r24
    1762:	7b 01       	movw	r14, r22
    1764:	5a 01       	movw	r10, r20
    int received_bytes = 0;
    uint16_t pdu_len = 0;       /* return value */
    1766:	18 86       	std	Y+8, r1	; 0x08
    1768:	1f 82       	std	Y+7, r1	; 0x07
    uint8_t src_addr[] = { 0, 0, 0, 0 };
    176a:	19 82       	std	Y+1, r1	; 0x01
    176c:	1a 82       	std	Y+2, r1	; 0x02
    176e:	1b 82       	std	Y+3, r1	; 0x03
    1770:	1c 82       	std	Y+4, r1	; 0x04
    uint16_t src_port = 0;
    1772:	1e 82       	std	Y+6, r1	; 0x06
    1774:	1d 82       	std	Y+5, r1	; 0x05

    /* Make sure the socket is open */
    if (BIP_Socket < 0)
        return 0;

    if (getRXReceivedSize_func(CW5100Class_new(), BIP_Socket)) {
    1776:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <BIP_Socket>
    177a:	69 87       	std	Y+9, r22	; 0x09
    177c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
    1780:	69 85       	ldd	r22, Y+9	; 0x09
    1782:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <getRXReceivedSize_func>
    1786:	89 2b       	or	r24, r25
    1788:	19 f4       	brne	.+6      	; 0x1790 <bip_receive+0x5c>
        return 0;
    }

    /* no problem, just no bytes */
    if (received_bytes == 0)
        return 0;
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	c9 c0       	rjmp	.+402    	; 0x1922 <bip_receive+0x1ee>
        memcpy(&src_addr, &src->mac[0], 4);
    1790:	f6 01       	movw	r30, r12
    1792:	81 81       	ldd	r24, Z+1	; 0x01
    1794:	92 81       	ldd	r25, Z+2	; 0x02
    1796:	a3 81       	ldd	r26, Z+3	; 0x03
    1798:	b4 81       	ldd	r27, Z+4	; 0x04
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	ab 83       	std	Y+3, r26	; 0x03
    17a0:	bc 83       	std	Y+4, r27	; 0x04
        memcpy(&src_port, &src->mac[4], 2);
    17a2:	85 81       	ldd	r24, Z+5	; 0x05
    17a4:	96 81       	ldd	r25, Z+6	; 0x06
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
            (int) recvfrom_func(BIP_Socket, &pdu[0], max_pdu, src_addr,
    17aa:	8e 01       	movw	r16, r28
    17ac:	0b 5f       	subi	r16, 0xFB	; 251
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	9e 01       	movw	r18, r28
    17b2:	2f 5f       	subi	r18, 0xFF	; 255
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	a5 01       	movw	r20, r10
    17b8:	b7 01       	movw	r22, r14
    17ba:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <BIP_Socket>
    17be:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <recvfrom_func>
    if (received_bytes == 0)
    17c2:	18 16       	cp	r1, r24
    17c4:	19 06       	cpc	r1, r25
    17c6:	0c f7       	brge	.-62     	; 0x178a <bip_receive+0x56>

    /* the signature of a BACnet/IP packet */
    if (pdu[0] != BVLL_TYPE_BACNET_IP)
    17c8:	f7 01       	movw	r30, r14
    17ca:	20 81       	ld	r18, Z
    17cc:	21 38       	cpi	r18, 0x81	; 129
    17ce:	e9 f6       	brne	.-70     	; 0x178a <bip_receive+0x56>
        return 0;

    if (bvlc_for_non_bbmd(src_addr, &src_port, pdu, received_bytes) > 0) {
    17d0:	9c 01       	movw	r18, r24
    17d2:	a7 01       	movw	r20, r14
    17d4:	b8 01       	movw	r22, r16
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <bvlc_for_non_bbmd>
    17de:	89 2b       	or	r24, r25
    17e0:	a1 f6       	brne	.-88     	; 0x178a <bip_receive+0x56>
        fprintf(stderr, "BIP: BVLC discarded!\n");
#endif
        return 0;
    }

    function = bvlc_get_function_code();        /* aka, pdu[1] */
    17e2:	0e 94 75 0e 	call	0x1cea	; 0x1cea <bvlc_get_function_code>
    if ((function == BVLC_ORIGINAL_UNICAST_NPDU) ||
    17e6:	9c 01       	movw	r18, r24
    17e8:	2a 50       	subi	r18, 0x0A	; 10
    17ea:	31 09       	sbc	r19, r1
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	08 f0       	brcs	.+2      	; 0x17f4 <bip_receive+0xc0>
    17f2:	45 c0       	rjmp	.+138    	; 0x187e <bip_receive+0x14a>
        (function == BVLC_ORIGINAL_BROADCAST_NPDU)) {
        /* ignore messages from me */
        if ((convertBIP_Address2uint32(src_addr) ==
    17f4:	ce 01       	movw	r24, r28
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	0e 94 b5 0a 	call	0x156a	; 0x156a <convertBIP_Address2uint32>
    17fc:	2b 01       	movw	r4, r22
    17fe:	3c 01       	movw	r6, r24
                convertBIP_Address2uint32(BIP_Address)) &&
    1800:	83 e2       	ldi	r24, 0x23	; 35
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	0e 94 b5 0a 	call	0x156a	; 0x156a <convertBIP_Address2uint32>
        if ((convertBIP_Address2uint32(src_addr) ==
    1808:	46 16       	cp	r4, r22
    180a:	57 06       	cpc	r5, r23
    180c:	68 06       	cpc	r6, r24
    180e:	79 06       	cpc	r7, r25
    1810:	51 f4       	brne	.+20     	; 0x1826 <bip_receive+0xf2>
                convertBIP_Address2uint32(BIP_Address)) &&
    1812:	2d 81       	ldd	r18, Y+5	; 0x05
    1814:	3e 81       	ldd	r19, Y+6	; 0x06
    1816:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <BIP_Port>
    181a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <BIP_Port+0x1>
    181e:	28 17       	cp	r18, r24
    1820:	39 07       	cpc	r19, r25
    1822:	09 f4       	brne	.+2      	; 0x1826 <bip_receive+0xf2>
    1824:	7a c0       	rjmp	.+244    	; 0x191a <bip_receive+0x1e6>
#if 0
            fprintf(stderr, "BIP: src is me. Discarded!\n");
#endif
        } else {
            /* data in src->mac[] is in network format */
            src->mac_len = 6;
    1826:	86 e0       	ldi	r24, 0x06	; 6
    1828:	f6 01       	movw	r30, r12
    182a:	80 83       	st	Z, r24
            memcpy(&src->mac[0], &src_addr, 4);
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	ab 81       	ldd	r26, Y+3	; 0x03
    1832:	bc 81       	ldd	r27, Y+4	; 0x04
    1834:	81 83       	std	Z+1, r24	; 0x01
    1836:	92 83       	std	Z+2, r25	; 0x02
    1838:	a3 83       	std	Z+3, r26	; 0x03
    183a:	b4 83       	std	Z+4, r27	; 0x04
            memcpy(&src->mac[4], &src_port, 2);
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	96 83       	std	Z+6, r25	; 0x06
    1842:	85 83       	std	Z+5, r24	; 0x05
                src->mac[1], src->mac[2], src->mac[3]);
#endif
            /* FIXME: check destination address */
            /* see if it is broadcast or for us */
            /* decode the length of the PDU - length is inclusive of BVLC */
            (void) decode_unsigned16(&pdu[2], &pdu_len);
    1844:	be 01       	movw	r22, r28
    1846:	69 5f       	subi	r22, 0xF9	; 249
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	c7 01       	movw	r24, r14
    184c:	02 96       	adiw	r24, 0x02	; 2
    184e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
            /* subtract off the BVLC header */
            pdu_len -= 4;
    1852:	8f 81       	ldd	r24, Y+7	; 0x07
    1854:	98 85       	ldd	r25, Y+8	; 0x08
    1856:	04 97       	sbiw	r24, 0x04	; 4
            if (pdu_len < max_pdu) {
    1858:	8a 15       	cp	r24, r10
    185a:	9b 05       	cpc	r25, r11
    185c:	08 f0       	brcs	.+2      	; 0x1860 <bip_receive+0x12c>
    185e:	5d c0       	rjmp	.+186    	; 0x191a <bip_receive+0x1e6>
            pdu_len -= 4;
    1860:	98 87       	std	Y+8, r25	; 0x08
    1862:	8f 83       	std	Y+7, r24	; 0x07
    1864:	d7 01       	movw	r26, r14
    1866:	14 96       	adiw	r26, 0x04	; 4
    1868:	f7 01       	movw	r30, r14
    186a:	9f 01       	movw	r18, r30
    186c:	2e 19       	sub	r18, r14
    186e:	3f 09       	sbc	r19, r15
#if 0
                fprintf(stderr, "BIP: NPDU[%hu]:", pdu_len);
#endif
                /* shift the buffer to return a valid PDU */
                for (i = 0; i < pdu_len; i++) {
    1870:	28 17       	cp	r18, r24
    1872:	39 07       	cpc	r19, r25
    1874:	08 f0       	brcs	.+2      	; 0x1878 <bip_receive+0x144>
    1876:	53 c0       	rjmp	.+166    	; 0x191e <bip_receive+0x1ea>
                    pdu[i] = pdu[4 + i];
    1878:	2d 91       	ld	r18, X+
    187a:	21 93       	st	Z+, r18
    187c:	f6 cf       	rjmp	.-20     	; 0x186a <bip_receive+0x136>
#if PRINT_ENABLED
                fprintf(stderr, "BIP: PDU too large. Discarded!.\n");
#endif
            }
        }
    } else if (function == BVLC_FORWARDED_NPDU) {
    187e:	04 97       	sbiw	r24, 0x04	; 4
    1880:	09 f0       	breq	.+2      	; 0x1884 <bip_receive+0x150>
    1882:	4d c0       	rjmp	.+154    	; 0x191e <bip_receive+0x1ea>
        memcpy(&src_addr, &pdu[4], 4);
    1884:	f7 01       	movw	r30, r14
    1886:	84 81       	ldd	r24, Z+4	; 0x04
    1888:	95 81       	ldd	r25, Z+5	; 0x05
    188a:	a6 81       	ldd	r26, Z+6	; 0x06
    188c:	b7 81       	ldd	r27, Z+7	; 0x07
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	ab 83       	std	Y+3, r26	; 0x03
    1894:	bc 83       	std	Y+4, r27	; 0x04
        memcpy(&src_port, &pdu[8], 2);
    1896:	00 85       	ldd	r16, Z+8	; 0x08
    1898:	11 85       	ldd	r17, Z+9	; 0x09
    189a:	1e 83       	std	Y+6, r17	; 0x06
    189c:	0d 83       	std	Y+5, r16	; 0x05
        if ((convertBIP_Address2uint32(src_addr) ==
    189e:	ce 01       	movw	r24, r28
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	0e 94 b5 0a 	call	0x156a	; 0x156a <convertBIP_Address2uint32>
    18a6:	2b 01       	movw	r4, r22
    18a8:	3c 01       	movw	r6, r24
                convertBIP_Address2uint32(BIP_Address)) &&
    18aa:	83 e2       	ldi	r24, 0x23	; 35
    18ac:	93 e0       	ldi	r25, 0x03	; 3
    18ae:	0e 94 b5 0a 	call	0x156a	; 0x156a <convertBIP_Address2uint32>
        if ((convertBIP_Address2uint32(src_addr) ==
    18b2:	46 16       	cp	r4, r22
    18b4:	57 06       	cpc	r5, r23
    18b6:	68 06       	cpc	r6, r24
    18b8:	79 06       	cpc	r7, r25
    18ba:	39 f4       	brne	.+14     	; 0x18ca <bip_receive+0x196>
                convertBIP_Address2uint32(BIP_Address)) &&
    18bc:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <BIP_Port>
    18c0:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <BIP_Port+0x1>
    18c4:	08 17       	cp	r16, r24
    18c6:	19 07       	cpc	r17, r25
    18c8:	41 f1       	breq	.+80     	; 0x191a <bip_receive+0x1e6>
            (src_port == BIP_Port)) {
            /* ignore messages from me */
            pdu_len = 0;
        } else {
            /* data in src->mac[] is in network format */
            src->mac_len = 6;
    18ca:	86 e0       	ldi	r24, 0x06	; 6
    18cc:	f6 01       	movw	r30, r12
    18ce:	80 83       	st	Z, r24
            memcpy(&src->mac[0], &src_addr, 4);
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	ab 81       	ldd	r26, Y+3	; 0x03
    18d6:	bc 81       	ldd	r27, Y+4	; 0x04
    18d8:	81 83       	std	Z+1, r24	; 0x01
    18da:	92 83       	std	Z+2, r25	; 0x02
    18dc:	a3 83       	std	Z+3, r26	; 0x03
    18de:	b4 83       	std	Z+4, r27	; 0x04
            memcpy(&src->mac[4], &src_port, 2);
    18e0:	16 83       	std	Z+6, r17	; 0x06
    18e2:	05 83       	std	Z+5, r16	; 0x05
            /* FIXME: check destination address */
            /* see if it is broadcast or for us */
            /* decode the length of the PDU - length is inclusive of BVLC */
            (void) decode_unsigned16(&pdu[2], &pdu_len);
    18e4:	be 01       	movw	r22, r28
    18e6:	69 5f       	subi	r22, 0xF9	; 249
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	c7 01       	movw	r24, r14
    18ec:	02 96       	adiw	r24, 0x02	; 2
    18ee:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
            /* subtract off the BVLC header */
            pdu_len -= 10;
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	0a 97       	sbiw	r24, 0x0a	; 10
            if (pdu_len < max_pdu) {
    18f8:	8a 15       	cp	r24, r10
    18fa:	9b 05       	cpc	r25, r11
    18fc:	70 f4       	brcc	.+28     	; 0x191a <bip_receive+0x1e6>
            pdu_len -= 10;
    18fe:	98 87       	std	Y+8, r25	; 0x08
    1900:	8f 83       	std	Y+7, r24	; 0x07
    1902:	d7 01       	movw	r26, r14
    1904:	1a 96       	adiw	r26, 0x0a	; 10
    1906:	f7 01       	movw	r30, r14
    1908:	9f 01       	movw	r18, r30
    190a:	2e 19       	sub	r18, r14
    190c:	3f 09       	sbc	r19, r15
                /* shift the buffer to return a valid PDU */
                for (i = 0; i < pdu_len; i++) {
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	28 f4       	brcc	.+10     	; 0x191e <bip_receive+0x1ea>
                    pdu[i] = pdu[4 + 6 + i];
    1914:	2d 91       	ld	r18, X+
    1916:	21 93       	st	Z+, r18
    1918:	f7 cf       	rjmp	.-18     	; 0x1908 <bip_receive+0x1d4>
                }
            } else {
                /* ignore packets that are too large */
                /* clients should check my max-apdu first */
                pdu_len = 0;
    191a:	18 86       	std	Y+8, r1	; 0x08
    191c:	1f 82       	std	Y+7, r1	; 0x07
            }
        }
    }

    return pdu_len;
    191e:	8f 81       	ldd	r24, Y+7	; 0x07
    1920:	98 85       	ldd	r25, Y+8	; 0x08
}
    1922:	29 96       	adiw	r28, 0x09	; 9
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	7f 90       	pop	r7
    1944:	6f 90       	pop	r6
    1946:	5f 90       	pop	r5
    1948:	4f 90       	pop	r4
    194a:	08 95       	ret

0000194c <bip_get_my_address>:

void bip_get_my_address(BACNET_ADDRESS * my_address)
{
    194c:	fc 01       	movw	r30, r24
    int i = 0;

    if (my_address) {
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	11 f1       	breq	.+68     	; 0x1996 <bip_get_my_address+0x4a>
        my_address->mac_len = 6;
    1952:	86 e0       	ldi	r24, 0x06	; 6
    1954:	80 83       	st	Z, r24
        memcpy(&my_address->mac[0], &BIP_Address, 4);
    1956:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <BIP_Address>
    195a:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <BIP_Address+0x1>
    195e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <BIP_Address+0x2>
    1962:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <BIP_Address+0x3>
    1966:	41 83       	std	Z+1, r20	; 0x01
    1968:	52 83       	std	Z+2, r21	; 0x02
    196a:	63 83       	std	Z+3, r22	; 0x03
    196c:	74 83       	std	Z+4, r23	; 0x04
        memcpy(&my_address->mac[4], &BIP_Port, 2);
    196e:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <BIP_Port>
    1972:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <BIP_Port+0x1>
    1976:	96 83       	std	Z+6, r25	; 0x06
    1978:	85 83       	std	Z+5, r24	; 0x05
        my_address->net = 0;    /* local only, no routing */
    197a:	11 86       	std	Z+9, r1	; 0x09
    197c:	10 86       	std	Z+8, r1	; 0x08
        my_address->len = 0;    /* no SLEN */
    197e:	12 86       	std	Z+10, r1	; 0x0a
        for (i = 0; i < MAX_MAC_LEN; i++) {
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	df 01       	movw	r26, r30
    1986:	a8 0f       	add	r26, r24
    1988:	b9 1f       	adc	r27, r25
            /* no SADR */
            my_address->adr[i] = 0;
    198a:	1b 96       	adiw	r26, 0x0b	; 11
    198c:	1c 92       	st	X, r1
        for (i = 0; i < MAX_MAC_LEN; i++) {
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	87 30       	cpi	r24, 0x07	; 7
    1992:	91 05       	cpc	r25, r1
    1994:	b9 f7       	brne	.-18     	; 0x1984 <bip_get_my_address+0x38>
    1996:	08 95       	ret

00001998 <bip_set_interface>:
 *
 * @param ifname [in] The named interface to use for the network layer.
 *        Eg, for Linux, ifname is eth0, ath0, arc0, and others.
 */
void bip_set_interface(char *ifname)
{
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	2c 97       	sbiw	r28, 0x0c	; 12
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	18 2f       	mov	r17, r24
    19b2:	09 2f       	mov	r16, r25

    uint8_t local_address[] = { 0, 0, 0, 0 };
    19b4:	19 86       	std	Y+9, r1	; 0x09
    19b6:	1a 86       	std	Y+10, r1	; 0x0a
    19b8:	1b 86       	std	Y+11, r1	; 0x0b
    19ba:	1c 86       	std	Y+12, r1	; 0x0c
    uint8_t broadcast_address[] = { 0, 0, 0, 0 };
    19bc:	1d 82       	std	Y+5, r1	; 0x05
    19be:	1e 82       	std	Y+6, r1	; 0x06
    19c0:	1f 82       	std	Y+7, r1	; 0x07
    19c2:	18 86       	std	Y+8, r1	; 0x08
    uint8_t netmask[] = { 0, 0, 0, 0 };
    19c4:	19 82       	std	Y+1, r1	; 0x01
    19c6:	1a 82       	std	Y+2, r1	; 0x02
    19c8:	1b 82       	std	Y+3, r1	; 0x03
    19ca:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t invertedNetmask[] = { 0, 0, 0, 0 };

    getIPAddress_func(CW5100Class_new(), local_address);
    19cc:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
    19d0:	be 01       	movw	r22, r28
    19d2:	67 5f       	subi	r22, 0xF7	; 247
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <getIPAddress_func>
    bip_set_addr(local_address);
    19da:	ce 01       	movw	r24, r28
    19dc:	09 96       	adiw	r24, 0x09	; 9
    19de:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <bip_set_addr>
    if (BIP_Debug) {
    19e2:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <BIP_Debug>
    19e6:	88 23       	and	r24, r24
    19e8:	59 f1       	breq	.+86     	; 0x1a40 <bip_set_interface+0xa8>
        fprintf(stderr, "Interface: %s\n", ifname);
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	87 e8       	ldi	r24, 0x87	; 135
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	9f 93       	push	r25
    19f4:	8f 93       	push	r24
    19f6:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__iob+0x5>
    19fa:	8f 93       	push	r24
    19fc:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <__iob+0x4>
    1a00:	8f 93       	push	r24
    1a02:	0e 94 92 23 	call	0x4724	; 0x4724 <fprintf>
        fprintf(stderr, "IP Address: %d.%d.%d.%d\n", local_address[0],
    1a06:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a08:	1f 92       	push	r1
    1a0a:	8f 93       	push	r24
    1a0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a0e:	1f 92       	push	r1
    1a10:	8f 93       	push	r24
    1a12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a14:	1f 92       	push	r1
    1a16:	8f 93       	push	r24
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	1f 92       	push	r1
    1a1c:	8f 93       	push	r24
    1a1e:	86 e9       	ldi	r24, 0x96	; 150
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	9f 93       	push	r25
    1a24:	8f 93       	push	r24
    1a26:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__iob+0x5>
    1a2a:	8f 93       	push	r24
    1a2c:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <__iob+0x4>
    1a30:	8f 93       	push	r24
    1a32:	0e 94 92 23 	call	0x4724	; 0x4724 <fprintf>
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
            local_address[1], local_address[2], local_address[3]);
    }

    /* setup local broadcast address */
    getSubnetMask_func(CW5100Class_new(), netmask);
    1a40:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
    1a44:	be 01       	movw	r22, r28
    1a46:	6f 5f       	subi	r22, 0xFF	; 255
    1a48:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4a:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <getSubnetMask_func>
    1a4e:	8e 01       	movw	r16, r28
    1a50:	0f 5f       	subi	r16, 0xFF	; 255
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	9e 01       	movw	r18, r28
    1a56:	27 5f       	subi	r18, 0xF7	; 247
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	35 96       	adiw	r30, 0x05	; 5
    1a5e:	af 01       	movw	r20, r30
    1a60:	cf 01       	movw	r24, r30
    for (int i = 0; i < 4; i++) {       //FIXME: IPv4 ?
        invertedNetmask[i] = ~netmask[i];
    1a62:	d8 01       	movw	r26, r16
    1a64:	6d 91       	ld	r22, X+
    1a66:	8d 01       	movw	r16, r26
        broadcast_address[i] = (local_address[i] | invertedNetmask[i]);
    1a68:	d9 01       	movw	r26, r18
    1a6a:	7d 91       	ld	r23, X+
    1a6c:	9d 01       	movw	r18, r26
        invertedNetmask[i] = ~netmask[i];
    1a6e:	60 95       	com	r22
        broadcast_address[i] = (local_address[i] | invertedNetmask[i]);
    1a70:	67 2b       	or	r22, r23
    1a72:	61 93       	st	Z+, r22
    for (int i = 0; i < 4; i++) {       //FIXME: IPv4 ?
    1a74:	04 17       	cp	r16, r20
    1a76:	15 07       	cpc	r17, r21
    1a78:	a1 f7       	brne	.-24     	; 0x1a62 <bip_set_interface+0xca>
    }

    bip_set_broadcast_addr(broadcast_address);
    1a7a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <bip_set_broadcast_addr>
    if (BIP_Debug) {
    1a7e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <BIP_Debug>
    1a82:	88 23       	and	r24, r24
    1a84:	e9 f0       	breq	.+58     	; 0x1ac0 <bip_set_interface+0x128>
        fprintf(stderr, "IP Broadcast Address: %d.%d.%d.%d\n",
    1a86:	88 85       	ldd	r24, Y+8	; 0x08
    1a88:	1f 92       	push	r1
    1a8a:	8f 93       	push	r24
    1a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8e:	1f 92       	push	r1
    1a90:	8f 93       	push	r24
    1a92:	8e 81       	ldd	r24, Y+6	; 0x06
    1a94:	1f 92       	push	r1
    1a96:	8f 93       	push	r24
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	1f 92       	push	r1
    1a9c:	8f 93       	push	r24
    1a9e:	8f ea       	ldi	r24, 0xAF	; 175
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	9f 93       	push	r25
    1aa4:	8f 93       	push	r24
    1aa6:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__iob+0x5>
    1aaa:	8f 93       	push	r24
    1aac:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <__iob+0x4>
    1ab0:	8f 93       	push	r24
    1ab2:	0e 94 92 23 	call	0x4724	; 0x4724 <fprintf>
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
            broadcast_address[0], broadcast_address[1], broadcast_address[2],
            broadcast_address[3]);
    }
}
    1ac0:	2c 96       	adiw	r28, 0x0c	; 12
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <bip_init>:
 *        If NULL, the "eth0" interface is assigned.
 * @return True if the socket is successfully opened for BACnet/IP,
 *         else False if the socket functions fail.
 */
bool bip_init(char *ifname)
{
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    uint8_t sock_fd = 0;
    bool isOpen = false;

    if (ifname)
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	11 f4       	brne	.+4      	; 0x1ae2 <bip_init+0xc>
        bip_set_interface(ifname);
    else
        bip_set_interface("eth0");
    1ade:	82 ed       	ldi	r24, 0xD2	; 210
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <bip_set_interface>
{
    1ae6:	c0 e0       	ldi	r28, 0x00	; 0

    /* assumes that the driver has already been initialized */
    for (sock_fd = 0; sock_fd < MAX_SOCK_NUM; sock_fd++) {
        if (readSnSR_func(CW5100Class_new(), sock_fd) == SnSR_CLOSED()) {
    1ae8:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <CW5100Class_new>
    1aec:	6c 2f       	mov	r22, r28
    1aee:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <readSnSR_func>
    1af2:	d8 2f       	mov	r29, r24
    1af4:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <SnSR_CLOSED>
    1af8:	d8 13       	cpse	r29, r24
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <bip_init+0x48>
            socket_func(sock_fd, SnMR_UDP(), (uint16_t) 47808, 0);
    1afc:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <SnMR_UDP>
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	40 ec       	ldi	r20, 0xC0	; 192
    1b04:	5a eb       	ldi	r21, 0xBA	; 186
    1b06:	68 2f       	mov	r22, r24
    1b08:	8c 2f       	mov	r24, r28
    1b0a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <socket_func>
            listen_func(sock_fd);
    1b0e:	8c 2f       	mov	r24, r28
    1b10:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <listen_func>

    if (!isOpen) {
        bip_set_socket(MAX_SOCK_NUM);
        return false;
    } else {
        bip_set_socket(sock_fd);
    1b14:	8c 2f       	mov	r24, r28
    1b16:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <bip_set_socket>
    }

    return true;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <bip_init+0x56>
    for (sock_fd = 0; sock_fd < MAX_SOCK_NUM; sock_fd++) {
    1b1e:	cf 5f       	subi	r28, 0xFF	; 255
    1b20:	c4 30       	cpi	r28, 0x04	; 4
    1b22:	11 f7       	brne	.-60     	; 0x1ae8 <bip_init+0x12>
        bip_set_socket(MAX_SOCK_NUM);
    1b24:	84 e0       	ldi	r24, 0x04	; 4
    1b26:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <bip_set_socket>
        return false;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
}
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <bvlc_for_non_bbmd>:

uint16_t bvlc_for_non_bbmd(uint8_t * addr,
    uint16_t * port,
    uint8_t * npdu,
    uint16_t received_bytes)
{
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	c4 58       	subi	r28, 0x84	; 132
    1b4c:	d1 09       	sbc	r29, r1
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	6c 01       	movw	r12, r24
    1b5a:	5b 01       	movw	r10, r22
    1b5c:	c9 01       	movw	r24, r18

    uint16_t result_code = 0;   /* aka, BVLC_RESULT_SUCCESSFUL_COMPLETION */
    1b5e:	cd 57       	subi	r28, 0x7D	; 125
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	19 82       	std	Y+1, r1	; 0x01
    1b64:	18 82       	st	Y, r1
    1b66:	c3 58       	subi	r28, 0x83	; 131
    1b68:	d0 40       	sbci	r29, 0x00	; 0
    BVLC_Function_Code = npdu[1];       /* The BVLC function */
    1b6a:	fa 01       	movw	r30, r20
    1b6c:	01 81       	ldd	r16, Z+1	; 0x01
    1b6e:	20 2f       	mov	r18, r16
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <BVLC_Function_Code+0x1>
    1b76:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <BVLC_Function_Code>
    switch (BVLC_Function_Code) {
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	0a 30       	cpi	r16, 0x0A	; 10
    1b7e:	11 05       	cpc	r17, r1
    1b80:	08 f0       	brcs	.+2      	; 0x1b84 <bvlc_for_non_bbmd+0x52>
    1b82:	4f c0       	rjmp	.+158    	; 0x1c22 <bvlc_for_non_bbmd+0xf0>
    1b84:	f8 01       	movw	r30, r16
    1b86:	ec 5c       	subi	r30, 0xCC	; 204
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__tablejump2__>
        case BVLC_RESULT:
            if (received_bytes >= 6) {
    1b8e:	06 97       	sbiw	r24, 0x06	; 6
    1b90:	08 f4       	brcc	.+2      	; 0x1b94 <bvlc_for_non_bbmd+0x62>
    1b92:	47 c0       	rjmp	.+142    	; 0x1c22 <bvlc_for_non_bbmd+0xf0>
                /* This is the result of our foreign device registration */
                (void) decode_unsigned16(&npdu[4], &result_code);
    1b94:	be 01       	movw	r22, r28
    1b96:	6d 57       	subi	r22, 0x7D	; 125
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	ca 01       	movw	r24, r20
    1b9c:	04 96       	adiw	r24, 0x04	; 4
    1b9e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
                BVLC_Result_Code = (BACNET_BVLC_RESULT) result_code;
    1ba2:	cd 57       	subi	r28, 0x7D	; 125
    1ba4:	df 4f       	sbci	r29, 0xFF	; 255
    1ba6:	88 81       	ld	r24, Y
    1ba8:	c3 58       	subi	r28, 0x83	; 131
    1baa:	d0 40       	sbci	r29, 0x00	; 0
    1bac:	cc 57       	subi	r28, 0x7C	; 124
    1bae:	df 4f       	sbci	r29, 0xFF	; 255
    1bb0:	98 81       	ld	r25, Y
    1bb2:	c4 58       	subi	r28, 0x84	; 132
    1bb4:	d0 40       	sbci	r29, 0x00	; 0
    1bb6:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <BVLC_Result_Code>
    1bba:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <BVLC_Result_Code+0x1>
                fprintf(stderr, "BVLC: Result Code=%d\n", BVLC_Result_Code);
    1bbe:	9f 93       	push	r25
    1bc0:	8f 93       	push	r24
    1bc2:	87 ed       	ldi	r24, 0xD7	; 215
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	9f 93       	push	r25
    1bc8:	8f 93       	push	r24
    1bca:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__iob+0x5>
    1bce:	8f 93       	push	r24
    1bd0:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <__iob+0x4>
    1bd4:	8f 93       	push	r24
    1bd6:	0e 94 92 23 	call	0x4724	; 0x4724 <fprintf>
                /* But don't send any response */
                result_code = 0;
    1bda:	cd 57       	subi	r28, 0x7D	; 125
    1bdc:	df 4f       	sbci	r29, 0xFF	; 255
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	18 82       	st	Y, r1
    1be2:	c3 58       	subi	r28, 0x83	; 131
    1be4:	d0 40       	sbci	r29, 0x00	; 0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	17 c0       	rjmp	.+46     	; 0x1c22 <bvlc_for_non_bbmd+0xf0>
            }
            break;
        case BVLC_WRITE_BROADCAST_DISTRIBUTION_TABLE:
            result_code = BVLC_RESULT_WRITE_BROADCAST_DISTRIBUTION_TABLE_NAK;
    1bf4:	80 e1       	ldi	r24, 0x10	; 16
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <bvlc_for_non_bbmd+0xe4>
            break;
        case BVLC_READ_BROADCAST_DIST_TABLE:
            result_code = BVLC_RESULT_READ_BROADCAST_DISTRIBUTION_TABLE_NAK;
    1bfa:	80 e2       	ldi	r24, 0x20	; 32
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0b c0       	rjmp	.+22     	; 0x1c16 <bvlc_for_non_bbmd+0xe4>
            break;
            /* case BVLC_READ_BROADCAST_DIST_TABLE_ACK: */
        case BVLC_REGISTER_FOREIGN_DEVICE:
            result_code = BVLC_RESULT_REGISTER_FOREIGN_DEVICE_NAK;
    1c00:	80 e3       	ldi	r24, 0x30	; 48
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	08 c0       	rjmp	.+16     	; 0x1c16 <bvlc_for_non_bbmd+0xe4>
            break;
        case BVLC_READ_FOREIGN_DEVICE_TABLE:
            result_code = BVLC_RESULT_READ_FOREIGN_DEVICE_TABLE_NAK;
    1c06:	80 e4       	ldi	r24, 0x40	; 64
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	05 c0       	rjmp	.+10     	; 0x1c16 <bvlc_for_non_bbmd+0xe4>
            break;
            /* case BVLC_READ_FOREIGN_DEVICE_TABLE_ACK: */
        case BVLC_DELETE_FOREIGN_DEVICE_TABLE_ENTRY:
            result_code = BVLC_RESULT_DELETE_FOREIGN_DEVICE_TABLE_ENTRY_NAK;
    1c0c:	80 e5       	ldi	r24, 0x50	; 80
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <bvlc_for_non_bbmd+0xe4>
            break;
        case BVLC_DISTRIBUTE_BROADCAST_TO_NETWORK:
            result_code = BVLC_RESULT_DISTRIBUTE_BROADCAST_TO_NETWORK_NAK;
    1c12:	80 e6       	ldi	r24, 0x60	; 96
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	cd 57       	subi	r28, 0x7D	; 125
    1c18:	df 4f       	sbci	r29, 0xFF	; 255
    1c1a:	99 83       	std	Y+1, r25	; 0x01
    1c1c:	88 83       	st	Y, r24
    1c1e:	c3 58       	subi	r28, 0x83	; 131
    1c20:	d0 40       	sbci	r29, 0x00	; 0
            /* case BVLC_ORIGINAL_BROADCAST_NPDU: */
        default:
            break;
    }

    if (result_code > 0) {
    1c22:	cd 57       	subi	r28, 0x7D	; 125
    1c24:	df 4f       	sbci	r29, 0xFF	; 255
    1c26:	08 81       	ld	r16, Y
    1c28:	19 81       	ldd	r17, Y+1	; 0x01
    1c2a:	c3 58       	subi	r28, 0x83	; 131
    1c2c:	d0 40       	sbci	r29, 0x00	; 0
    1c2e:	01 15       	cp	r16, r1
    1c30:	11 05       	cpc	r17, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <bvlc_for_non_bbmd+0x104>
    1c34:	42 c0       	rjmp	.+132    	; 0x1cba <bvlc_for_non_bbmd+0x188>
    uint8_t mtu[MAX_MPDU] = { 0 };
    1c36:	ce 01       	movw	r24, r28
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	7c 01       	movw	r14, r24
    1c3c:	82 e8       	ldi	r24, 0x82	; 130
    1c3e:	f7 01       	movw	r30, r14
    1c40:	11 92       	st	Z+, r1
    1c42:	8a 95       	dec	r24
    1c44:	e9 f7       	brne	.-6      	; 0x1c40 <bvlc_for_non_bbmd+0x10e>
        pdu[0] = BVLL_TYPE_BACNET_IP;
    1c46:	81 e8       	ldi	r24, 0x81	; 129
    1c48:	89 83       	std	Y+1, r24	; 0x01
        encode_unsigned16(&pdu[2], 6);
    1c4a:	66 e0       	ldi	r22, 0x06	; 6
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	ce 01       	movw	r24, r28
    1c50:	03 96       	adiw	r24, 0x03	; 3
    1c52:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <encode_unsigned16>
        encode_unsigned16(&pdu[4], (uint16_t) result_code);
    1c56:	b8 01       	movw	r22, r16
    1c58:	ce 01       	movw	r24, r28
    1c5a:	05 96       	adiw	r24, 0x05	; 5
    1c5c:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <encode_unsigned16>
    if (bip_valid()) {
    1c60:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <bip_valid>
    1c64:	81 11       	cpse	r24, r1
    1c66:	0b c0       	rjmp	.+22     	; 0x1c7e <bvlc_for_non_bbmd+0x14c>
    return sendto_func(bip_socket(), mtu, mtu_len, dest_addr, *dest_port);
    1c68:	f5 01       	movw	r30, r10
    1c6a:	00 81       	ld	r16, Z
    1c6c:	11 81       	ldd	r17, Z+1	; 0x01
    1c6e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <bip_socket>
    1c72:	96 01       	movw	r18, r12
    1c74:	46 e0       	ldi	r20, 0x06	; 6
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	b7 01       	movw	r22, r14
    1c7a:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <sendto_func>
        bvlc_send_result(addr, port, result_code);
        fprintf(stderr, "BVLC: NAK code=%d\n", result_code);
    1c7e:	cc 57       	subi	r28, 0x7C	; 124
    1c80:	df 4f       	sbci	r29, 0xFF	; 255
    1c82:	88 81       	ld	r24, Y
    1c84:	c4 58       	subi	r28, 0x84	; 132
    1c86:	d0 40       	sbci	r29, 0x00	; 0
    1c88:	8f 93       	push	r24
    1c8a:	cd 57       	subi	r28, 0x7D	; 125
    1c8c:	df 4f       	sbci	r29, 0xFF	; 255
    1c8e:	88 81       	ld	r24, Y
    1c90:	c3 58       	subi	r28, 0x83	; 131
    1c92:	d0 40       	sbci	r29, 0x00	; 0
    1c94:	8f 93       	push	r24
    1c96:	8d ee       	ldi	r24, 0xED	; 237
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	9f 93       	push	r25
    1c9c:	8f 93       	push	r24
    1c9e:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__iob+0x5>
    1ca2:	8f 93       	push	r24
    1ca4:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <__iob+0x4>
    1ca8:	8f 93       	push	r24
    1caa:	0e 94 92 23 	call	0x4724	; 0x4724 <fprintf>
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    }
    return result_code;
}
    1cba:	cd 57       	subi	r28, 0x7D	; 125
    1cbc:	df 4f       	sbci	r29, 0xFF	; 255
    1cbe:	88 81       	ld	r24, Y
    1cc0:	99 81       	ldd	r25, Y+1	; 0x01
    1cc2:	c3 58       	subi	r28, 0x83	; 131
    1cc4:	d0 40       	sbci	r29, 0x00	; 0
    1cc6:	cc 57       	subi	r28, 0x7C	; 124
    1cc8:	df 4f       	sbci	r29, 0xFF	; 255
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	bf 90       	pop	r11
    1ce6:	af 90       	pop	r10
    1ce8:	08 95       	ret

00001cea <bvlc_get_function_code>:

BACNET_BVLC_FUNCTION bvlc_get_function_code(void)
{
    return BVLC_Function_Code;
}
    1cea:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <BVLC_Function_Code>
    1cee:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <BVLC_Function_Code+0x1>
    1cf2:	08 95       	ret

00001cf4 <npdu_handler>:
 */
void npdu_handler(
    BACNET_ADDRESS * src,       /* source address */
    uint8_t * pdu,      /* PDU data */
    uint16_t pdu_len)
{       /* length PDU  */
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	6c 97       	sbiw	r28, 0x1c	; 28
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	7c 01       	movw	r14, r24
    1d16:	8b 01       	movw	r16, r22
    1d18:	6a 01       	movw	r12, r20
    int apdu_offset = 0;
    BACNET_ADDRESS dest = { 0 };
    1d1a:	be 01       	movw	r22, r28
    1d1c:	6f 5f       	subi	r22, 0xFF	; 255
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d20:	82 e1       	ldi	r24, 0x12	; 18
    1d22:	fb 01       	movw	r30, r22
    1d24:	11 92       	st	Z+, r1
    1d26:	8a 95       	dec	r24
    1d28:	e9 f7       	brne	.-6      	; 0x1d24 <npdu_handler+0x30>
    BACNET_NPDU_DATA npdu_data = { 0 };
    1d2a:	9e 01       	movw	r18, r28
    1d2c:	2d 5e       	subi	r18, 0xED	; 237
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	8a e0       	ldi	r24, 0x0A	; 10
    1d32:	f9 01       	movw	r30, r18
    1d34:	11 92       	st	Z+, r1
    1d36:	8a 95       	dec	r24
    1d38:	e9 f7       	brne	.-6      	; 0x1d34 <npdu_handler+0x40>

    /* only handle the version that we know how to handle */
    if (pdu[0] == BACNET_PROTOCOL_VERSION) {
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	80 81       	ld	r24, Z
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	29 f5       	brne	.+74     	; 0x1d8c <npdu_handler+0x98>
        apdu_offset = npdu_decode(&pdu[0], &dest, src, &npdu_data);
    1d42:	a7 01       	movw	r20, r14
    1d44:	c8 01       	movw	r24, r16
    1d46:	0e 94 25 10 	call	0x204a	; 0x204a <npdu_decode>
    1d4a:	9c 01       	movw	r18, r24
        if (npdu_data.network_layer_message) {
    1d4c:	8d 89       	ldd	r24, Y+21	; 0x15
    1d4e:	81 11       	cpse	r24, r1
    1d50:	1d c0       	rjmp	.+58     	; 0x1d8c <npdu_handler+0x98>
            /*FIXME: network layer message received!  Handle it! */
#if PRINT_ENABLED
            fprintf(stderr, "NPDU: Network Layer Message discarded!\n");
#endif
        } else if ((apdu_offset > 0) && (apdu_offset <= pdu_len)) {
    1d52:	12 16       	cp	r1, r18
    1d54:	13 06       	cpc	r1, r19
    1d56:	d4 f4       	brge	.+52     	; 0x1d8c <npdu_handler+0x98>
    1d58:	c2 16       	cp	r12, r18
    1d5a:	d3 06       	cpc	r13, r19
    1d5c:	b8 f0       	brcs	.+46     	; 0x1d8c <npdu_handler+0x98>
            if ((dest.net == 0) || (dest.net == BACNET_BROADCAST_NETWORK)) {
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	ac 01       	movw	r20, r24
    1d64:	41 50       	subi	r20, 0x01	; 1
    1d66:	51 09       	sbc	r21, r1
    1d68:	4e 3f       	cpi	r20, 0xFE	; 254
    1d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6c:	78 f0       	brcs	.+30     	; 0x1d8c <npdu_handler+0x98>
    1d6e:	b8 01       	movw	r22, r16
    1d70:	62 0f       	add	r22, r18
    1d72:	73 1f       	adc	r23, r19
                /* only handle the version that we know how to handle */
                /* and we are not a router, so ignore messages with
                   routing information cause they are not for us */
                if ((dest.net == BACNET_BROADCAST_NETWORK) &&
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	21 f4       	brne	.+8      	; 0x1d80 <npdu_handler+0x8c>
                    ((pdu[apdu_offset] & 0xF0) ==
    1d78:	fb 01       	movw	r30, r22
    1d7a:	80 81       	ld	r24, Z
    1d7c:	80 7f       	andi	r24, 0xF0	; 240
                if ((dest.net == BACNET_BROADCAST_NETWORK) &&
    1d7e:	31 f0       	breq	.+12     	; 0x1d8c <npdu_handler+0x98>
                    /* hack for 5.4.5.1 - IDLE */
                    /* ConfirmedBroadcastReceived */
                    /* then enter IDLE - ignore the PDU */
                } else {
                    apdu_handler(src, &pdu[apdu_offset],
                        (uint16_t) (pdu_len - apdu_offset));
    1d80:	a6 01       	movw	r20, r12
    1d82:	42 1b       	sub	r20, r18
    1d84:	53 0b       	sbc	r21, r19
                    apdu_handler(src, &pdu[apdu_offset],
    1d86:	c7 01       	movw	r24, r14
    1d88:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <apdu_handler>
            (unsigned) pdu[0]);
#endif
    }

    return;
}
    1d8c:	6c 96       	adiw	r28, 0x1c	; 28
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	cf 90       	pop	r12
    1da8:	08 95       	ret

00001daa <handler_unrecognized_service>:
void handler_unrecognized_service(
    uint8_t * service_request,
    uint16_t service_len,
    BACNET_ADDRESS * src,
    BACNET_CONFIRMED_SERVICE_DATA * service_data)
{
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	6c 97       	sbiw	r28, 0x1c	; 28
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	8a 01       	movw	r16, r20
    1dcc:	69 01       	movw	r12, r18

    (void) service_request;
    (void) service_len;

    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    1dce:	ce 01       	movw	r24, r28
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	0e 94 a6 0c 	call	0x194c	; 0x194c <bip_get_my_address>
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	ce 01       	movw	r24, r28
    1dde:	43 96       	adiw	r24, 0x13	; 19
    1de0:	0e 94 13 10 	call	0x2026	; 0x2026 <npdu_encode_npdu_data>
    pdu_len =
    1de4:	9e 01       	movw	r18, r28
    1de6:	2d 5e       	subi	r18, 0xED	; 237
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	ae 01       	movw	r20, r28
    1dec:	4f 5f       	subi	r20, 0xFF	; 255
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	b8 01       	movw	r22, r16
    1df2:	8e e2       	ldi	r24, 0x2E	; 46
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <npdu_encode_pdu>
    1dfa:	7c 01       	movw	r14, r24
        npdu_encode_pdu(&Handler_Transmit_Buffer[0], src, &my_address,
        &npdu_data);
    /* encode the APDU portion of the packet */
    len =
    1dfc:	49 e0       	ldi	r20, 0x09	; 9
    1dfe:	f6 01       	movw	r30, r12
    1e00:	67 81       	ldd	r22, Z+7	; 0x07
    1e02:	82 5d       	subi	r24, 0xD2	; 210
    1e04:	9c 4f       	sbci	r25, 0xFC	; 252
    1e06:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <reject_encode_apdu>
        reject_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
        service_data->invoke_id, REJECT_REASON_UNRECOGNIZED_SERVICE);
    pdu_len += len;
    1e0a:	97 01       	movw	r18, r14
    1e0c:	28 0f       	add	r18, r24
    1e0e:	39 1f       	adc	r19, r25
    /* send the data */
    bytes_sent =
    1e10:	4e e2       	ldi	r20, 0x2E	; 46
    1e12:	53 e0       	ldi	r21, 0x03	; 3
    1e14:	be 01       	movw	r22, r28
    1e16:	6d 5e       	subi	r22, 0xED	; 237
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	c8 01       	movw	r24, r16
    1e1c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <bip_send_pdu>
    } else {
#if PRINT_ENABLED
        fprintf(stderr, "Failed to Send Reject (%s)!\n", strerror(errno));
#endif
    }
}
    1e20:	6c 96       	adiw	r28, 0x1c	; 28
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	08 95       	ret

00001e3e <npdu_encode_pdu>:
int npdu_encode_pdu(
    uint8_t * npdu,
    BACNET_ADDRESS * dest,
    BACNET_ADDRESS * src,
    BACNET_NPDU_DATA * npdu_data)
{
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	ec 01       	movw	r28, r24
    1e54:	7b 01       	movw	r14, r22
    1e56:	5a 01       	movw	r10, r20
    1e58:	69 01       	movw	r12, r18
    int len = 0;        /* return value - number of octets loaded in this function */
    uint8_t i = 0;      /* counter  */


    if (npdu && npdu_data) {
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <npdu_encode_pdu+0x22>
    1e5e:	d5 c0       	rjmp	.+426    	; 0x200a <npdu_encode_pdu+0x1cc>
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <npdu_encode_pdu+0x2a>
    1e66:	d1 c0       	rjmp	.+418    	; 0x200a <npdu_encode_pdu+0x1cc>
        /* protocol version */
        npdu[0] = npdu_data->protocol_version;
    1e68:	d9 01       	movw	r26, r18
    1e6a:	8c 91       	ld	r24, X
    1e6c:	88 83       	st	Y, r24
        /* initialize the control octet */
        npdu[1] = 0;
    1e6e:	19 82       	std	Y+1, r1	; 0x01
        /* Bit 7: 1 indicates that the NSDU conveys a network layer message. */
        /*          Message Type field is present. */
        /*        0 indicates that the NSDU contains a BACnet APDU. */
        /*          Message Type field is absent. */
        if (npdu_data->network_layer_message)
    1e70:	12 96       	adiw	r26, 0x02	; 2
    1e72:	8c 91       	ld	r24, X
    1e74:	88 23       	and	r24, r24
    1e76:	11 f0       	breq	.+4      	; 0x1e7c <npdu_encode_pdu+0x3e>
            npdu[1] |= BIT7;
    1e78:	80 e8       	ldi	r24, 0x80	; 128
    1e7a:	89 83       	std	Y+1, r24	; 0x01
        /*Bit 5: Destination specifier where: */
        /* 0 = DNET, DLEN, DADR, and Hop Count absent */
        /* 1 = DNET, DLEN, and Hop Count present */
        /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
        /* DLEN > 0 specifies length of DADR field */
        if (dest && dest->net)
    1e7c:	e1 14       	cp	r14, r1
    1e7e:	f1 04       	cpc	r15, r1
    1e80:	41 f0       	breq	.+16     	; 0x1e92 <npdu_encode_pdu+0x54>
    1e82:	f7 01       	movw	r30, r14
    1e84:	80 85       	ldd	r24, Z+8	; 0x08
    1e86:	91 85       	ldd	r25, Z+9	; 0x09
    1e88:	89 2b       	or	r24, r25
    1e8a:	19 f0       	breq	.+6      	; 0x1e92 <npdu_encode_pdu+0x54>
            npdu[1] |= BIT5;
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	80 62       	ori	r24, 0x20	; 32
    1e90:	89 83       	std	Y+1, r24	; 0x01
        /* Bit 3: Source specifier where: */
        /* 0 =  SNET, SLEN, and SADR absent */
        /* 1 =  SNET, SLEN, and SADR present */
        /* SLEN = 0 Invalid */
        /* SLEN > 0 specifies length of SADR field */
        if (src && src->net && src->len)
    1e92:	a1 14       	cp	r10, r1
    1e94:	b1 04       	cpc	r11, r1
    1e96:	71 f0       	breq	.+28     	; 0x1eb4 <npdu_encode_pdu+0x76>
    1e98:	d5 01       	movw	r26, r10
    1e9a:	18 96       	adiw	r26, 0x08	; 8
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	9c 91       	ld	r25, X
    1ea0:	19 97       	sbiw	r26, 0x09	; 9
    1ea2:	89 2b       	or	r24, r25
    1ea4:	39 f0       	breq	.+14     	; 0x1eb4 <npdu_encode_pdu+0x76>
    1ea6:	1a 96       	adiw	r26, 0x0a	; 10
    1ea8:	8c 91       	ld	r24, X
    1eaa:	88 23       	and	r24, r24
    1eac:	19 f0       	breq	.+6      	; 0x1eb4 <npdu_encode_pdu+0x76>
            npdu[1] |= BIT3;
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	88 60       	ori	r24, 0x08	; 8
    1eb2:	89 83       	std	Y+1, r24	; 0x01
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        /* 0 indicates that other than a BACnet-Confirmed-Request-PDU, */
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        if (npdu_data->data_expecting_reply)
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	88 23       	and	r24, r24
    1eba:	19 f0       	breq	.+6      	; 0x1ec2 <npdu_encode_pdu+0x84>
            npdu[1] |= BIT2;
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	84 60       	ori	r24, 0x04	; 4
    1ec0:	89 83       	std	Y+1, r24	; 0x01
        /* Bits 1,0: Network priority where: */
        /* B'11' = Life Safety message */
        /* B'10' = Critical Equipment message */
        /* B'01' = Urgent message */
        /* B'00' = Normal message */
        npdu[1] |= (npdu_data->priority & 0x03);
    1ec2:	d6 01       	movw	r26, r12
    1ec4:	13 96       	adiw	r26, 0x03	; 3
    1ec6:	9c 91       	ld	r25, X
    1ec8:	93 70       	andi	r25, 0x03	; 3
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	89 2b       	or	r24, r25
    1ece:	89 83       	std	Y+1, r24	; 0x01
        len = 2;
        if (dest && dest->net) {
    1ed0:	e1 14       	cp	r14, r1
    1ed2:	f1 04       	cpc	r15, r1
    1ed4:	59 f1       	breq	.+86     	; 0x1f2c <npdu_encode_pdu+0xee>
    1ed6:	f7 01       	movw	r30, r14
    1ed8:	60 85       	ldd	r22, Z+8	; 0x08
    1eda:	71 85       	ldd	r23, Z+9	; 0x09
    1edc:	61 15       	cp	r22, r1
    1ede:	71 05       	cpc	r23, r1
    1ee0:	29 f1       	breq	.+74     	; 0x1f2c <npdu_encode_pdu+0xee>
            len += encode_unsigned16(&npdu[len], dest->net);
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	02 96       	adiw	r24, 0x02	; 2
    1ee6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <encode_unsigned16>
            npdu[len++] = dest->len;
    1eea:	9c 01       	movw	r18, r24
    1eec:	2d 5f       	subi	r18, 0xFD	; 253
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	d7 01       	movw	r26, r14
    1ef2:	1a 96       	adiw	r26, 0x0a	; 10
    1ef4:	4c 91       	ld	r20, X
    1ef6:	1a 97       	sbiw	r26, 0x0a	; 10
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e8 0f       	add	r30, r24
    1efc:	f9 1f       	adc	r31, r25
    1efe:	42 83       	std	Z+2, r20	; 0x02
            /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
            /* DLEN > 0 specifies length of DADR field */
            if (dest->len) {
    1f00:	1a 96       	adiw	r26, 0x0a	; 10
    1f02:	8c 91       	ld	r24, X
    1f04:	88 23       	and	r24, r24
    1f06:	a9 f0       	breq	.+42     	; 0x1f32 <npdu_encode_pdu+0xf4>
    1f08:	c9 01       	movw	r24, r18
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	42 1b       	sub	r20, r18
    1f0e:	8c 01       	movw	r16, r24
                for (i = 0; i < dest->len; i++) {
    1f10:	f7 01       	movw	r30, r14
    1f12:	52 85       	ldd	r21, Z+10	; 0x0a
    1f14:	45 17       	cp	r20, r21
    1f16:	70 f4       	brcc	.+28     	; 0x1f34 <npdu_encode_pdu+0xf6>
                    npdu[len++] = dest->adr[i];
    1f18:	f7 01       	movw	r30, r14
    1f1a:	e4 0f       	add	r30, r20
    1f1c:	f1 1d       	adc	r31, r1
    1f1e:	43 85       	ldd	r20, Z+11	; 0x0b
    1f20:	fe 01       	movw	r30, r28
    1f22:	e8 0f       	add	r30, r24
    1f24:	f9 1f       	adc	r31, r25
    1f26:	40 83       	st	Z, r20
    1f28:	01 96       	adiw	r24, 0x01	; 1
    1f2a:	ef cf       	rjmp	.-34     	; 0x1f0a <npdu_encode_pdu+0xcc>
        len = 2;
    1f2c:	02 e0       	ldi	r16, 0x02	; 2
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <npdu_encode_pdu+0xf6>
            npdu[len++] = dest->len;
    1f32:	89 01       	movw	r16, r18
                }
            }
        }
        if (src && src->net && src->len) {      /* Only insert if valid */
    1f34:	a1 14       	cp	r10, r1
    1f36:	b1 04       	cpc	r11, r1
    1f38:	a1 f1       	breq	.+104    	; 0x1fa2 <npdu_encode_pdu+0x164>
    1f3a:	d5 01       	movw	r26, r10
    1f3c:	18 96       	adiw	r26, 0x08	; 8
    1f3e:	6d 91       	ld	r22, X+
    1f40:	7c 91       	ld	r23, X
    1f42:	19 97       	sbiw	r26, 0x09	; 9
    1f44:	61 15       	cp	r22, r1
    1f46:	71 05       	cpc	r23, r1
    1f48:	61 f1       	breq	.+88     	; 0x1fa2 <npdu_encode_pdu+0x164>
    1f4a:	1a 96       	adiw	r26, 0x0a	; 10
    1f4c:	8c 91       	ld	r24, X
    1f4e:	88 23       	and	r24, r24
    1f50:	41 f1       	breq	.+80     	; 0x1fa2 <npdu_encode_pdu+0x164>
            len += encode_unsigned16(&npdu[len], src->net);
    1f52:	ce 01       	movw	r24, r28
    1f54:	80 0f       	add	r24, r16
    1f56:	91 1f       	adc	r25, r17
    1f58:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <encode_unsigned16>
    1f5c:	08 0f       	add	r16, r24
    1f5e:	19 1f       	adc	r17, r25
            npdu[len++] = src->len;
    1f60:	98 01       	movw	r18, r16
    1f62:	2f 5f       	subi	r18, 0xFF	; 255
    1f64:	3f 4f       	sbci	r19, 0xFF	; 255
    1f66:	f5 01       	movw	r30, r10
    1f68:	82 85       	ldd	r24, Z+10	; 0x0a
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e0 0f       	add	r30, r16
    1f6e:	f1 1f       	adc	r31, r17
    1f70:	80 83       	st	Z, r24
            /* SLEN = 0 denotes broadcast MAC SADR and SADR field is absent */
            /* SLEN > 0 specifies length of SADR field */
            if (src->len) {
    1f72:	d5 01       	movw	r26, r10
    1f74:	1a 96       	adiw	r26, 0x0a	; 10
    1f76:	8c 91       	ld	r24, X
    1f78:	88 23       	and	r24, r24
    1f7a:	91 f0       	breq	.+36     	; 0x1fa0 <npdu_encode_pdu+0x162>
    1f7c:	c9 01       	movw	r24, r18
    1f7e:	48 2f       	mov	r20, r24
    1f80:	42 1b       	sub	r20, r18
    1f82:	8c 01       	movw	r16, r24
                for (i = 0; i < src->len; i++) {
    1f84:	f5 01       	movw	r30, r10
    1f86:	52 85       	ldd	r21, Z+10	; 0x0a
    1f88:	45 17       	cp	r20, r21
    1f8a:	58 f4       	brcc	.+22     	; 0x1fa2 <npdu_encode_pdu+0x164>
                    npdu[len++] = src->adr[i];
    1f8c:	f5 01       	movw	r30, r10
    1f8e:	e4 0f       	add	r30, r20
    1f90:	f1 1d       	adc	r31, r1
    1f92:	43 85       	ldd	r20, Z+11	; 0x0b
    1f94:	fe 01       	movw	r30, r28
    1f96:	e8 0f       	add	r30, r24
    1f98:	f9 1f       	adc	r31, r25
    1f9a:	40 83       	st	Z, r20
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	ef cf       	rjmp	.-34     	; 0x1f7e <npdu_encode_pdu+0x140>
            npdu[len++] = src->len;
    1fa0:	89 01       	movw	r16, r18
            }
        }
        /* The Hop Count field shall be present only if the message is */
        /* destined for a remote network, i.e., if DNET is present. */
        /* This is a one-octet field that is initialized to a value of 0xff. */
        if (dest && dest->net) {
    1fa2:	e1 14       	cp	r14, r1
    1fa4:	f1 04       	cpc	r15, r1
    1fa6:	79 f0       	breq	.+30     	; 0x1fc6 <npdu_encode_pdu+0x188>
    1fa8:	d7 01       	movw	r26, r14
    1faa:	18 96       	adiw	r26, 0x08	; 8
    1fac:	8d 91       	ld	r24, X+
    1fae:	9c 91       	ld	r25, X
    1fb0:	19 97       	sbiw	r26, 0x09	; 9
    1fb2:	89 2b       	or	r24, r25
    1fb4:	41 f0       	breq	.+16     	; 0x1fc6 <npdu_encode_pdu+0x188>
            npdu[len] = npdu_data->hop_count;
    1fb6:	f6 01       	movw	r30, r12
    1fb8:	81 85       	ldd	r24, Z+9	; 0x09
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e0 0f       	add	r30, r16
    1fbe:	f1 1f       	adc	r31, r17
    1fc0:	80 83       	st	Z, r24
            len++;
    1fc2:	0f 5f       	subi	r16, 0xFF	; 255
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        if (npdu_data->network_layer_message) {
    1fc6:	d6 01       	movw	r26, r12
    1fc8:	12 96       	adiw	r26, 0x02	; 2
    1fca:	8c 91       	ld	r24, X
    1fcc:	12 97       	sbiw	r26, 0x02	; 2
    1fce:	88 23       	and	r24, r24
    1fd0:	f1 f0       	breq	.+60     	; 0x200e <npdu_encode_pdu+0x1d0>
            npdu[len] = npdu_data->network_message_type;
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e0 0f       	add	r30, r16
    1fd6:	f1 1f       	adc	r31, r17
    1fd8:	15 96       	adiw	r26, 0x05	; 5
    1fda:	8c 91       	ld	r24, X
    1fdc:	15 97       	sbiw	r26, 0x05	; 5
    1fde:	80 83       	st	Z, r24
            len++;
    1fe0:	0f 5f       	subi	r16, 0xFF	; 255
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
            /* Message Type field contains a value in the range 0x80 - 0xFF, */
            /* then a Vendor ID field shall be present */
            if (npdu_data->network_message_type >= 0x80)
    1fe4:	15 96       	adiw	r26, 0x05	; 5
    1fe6:	8d 91       	ld	r24, X+
    1fe8:	9c 91       	ld	r25, X
    1fea:	16 97       	sbiw	r26, 0x06	; 6
    1fec:	80 38       	cpi	r24, 0x80	; 128
    1fee:	91 05       	cpc	r25, r1
    1ff0:	70 f0       	brcs	.+28     	; 0x200e <npdu_encode_pdu+0x1d0>
                len += encode_unsigned16(&npdu[len], npdu_data->vendor_id);
    1ff2:	17 96       	adiw	r26, 0x07	; 7
    1ff4:	6d 91       	ld	r22, X+
    1ff6:	7c 91       	ld	r23, X
    1ff8:	18 97       	sbiw	r26, 0x08	; 8
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	80 0f       	add	r24, r16
    1ffe:	91 1f       	adc	r25, r17
    2000:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <encode_unsigned16>
    2004:	08 0f       	add	r16, r24
    2006:	19 1f       	adc	r17, r25
    2008:	02 c0       	rjmp	.+4      	; 0x200e <npdu_encode_pdu+0x1d0>
    int len = 0;        /* return value - number of octets loaded in this function */
    200a:	00 e0       	ldi	r16, 0x00	; 0
    200c:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    return len;
}
    200e:	c8 01       	movw	r24, r16
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	df 90       	pop	r13
    201e:	cf 90       	pop	r12
    2020:	bf 90       	pop	r11
    2022:	af 90       	pop	r10
    2024:	08 95       	ret

00002026 <npdu_encode_npdu_data>:
 */
void npdu_encode_npdu_data(
    BACNET_NPDU_DATA * npdu_data,
    bool data_expecting_reply,
    BACNET_MESSAGE_PRIORITY priority)
{
    2026:	fc 01       	movw	r30, r24
    if (npdu_data) {
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	71 f0       	breq	.+28     	; 0x2048 <npdu_encode_npdu_data+0x22>
        npdu_data->data_expecting_reply = data_expecting_reply;
    202c:	61 83       	std	Z+1, r22	; 0x01
        npdu_data->protocol_version = BACNET_PROTOCOL_VERSION;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	80 83       	st	Z, r24
        npdu_data->network_layer_message = false;       /* false if APDU */
    2032:	12 82       	std	Z+2, r1	; 0x02
        npdu_data->network_message_type = NETWORK_MESSAGE_INVALID;      /* optional */
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	96 83       	std	Z+6, r25	; 0x06
    203a:	85 83       	std	Z+5, r24	; 0x05
        npdu_data->vendor_id = 0;       /* optional, if net message type is > 0x80 */
    203c:	10 86       	std	Z+8, r1	; 0x08
    203e:	17 82       	std	Z+7, r1	; 0x07
        npdu_data->priority = priority;
    2040:	54 83       	std	Z+4, r21	; 0x04
    2042:	43 83       	std	Z+3, r20	; 0x03
        npdu_data->hop_count = HOP_COUNT_DEFAULT;
    2044:	8f ef       	ldi	r24, 0xFF	; 255
    2046:	81 87       	std	Z+9, r24	; 0x09
    2048:	08 95       	ret

0000204a <npdu_decode>:
int npdu_decode(
    uint8_t * npdu,
    BACNET_ADDRESS * dest,
    BACNET_ADDRESS * src,
    BACNET_NPDU_DATA * npdu_data)
{
    204a:	8f 92       	push	r8
    204c:	9f 92       	push	r9
    204e:	af 92       	push	r10
    2050:	bf 92       	push	r11
    2052:	cf 92       	push	r12
    2054:	df 92       	push	r13
    2056:	ef 92       	push	r14
    2058:	ff 92       	push	r15
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	00 d0       	rcall	.+0      	; 0x2064 <npdu_decode+0x1a>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <npdu_decode+0x1c>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	7c 01       	movw	r14, r24
    206c:	4b 01       	movw	r8, r22
    206e:	5a 01       	movw	r10, r20
    2070:	69 01       	movw	r12, r18
    int len = 0;        /* return value - number of octets loaded in this function */
    uint8_t i = 0;      /* counter */
    uint16_t src_net = 0;
    2072:	1c 82       	std	Y+4, r1	; 0x04
    2074:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t dest_net = 0;
    2076:	1a 82       	std	Y+2, r1	; 0x02
    2078:	19 82       	std	Y+1, r1	; 0x01
    uint8_t address_len = 0;
    uint8_t mac_octet = 0;

    if (npdu && npdu_data) {
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	09 f4       	brne	.+2      	; 0x2080 <npdu_decode+0x36>
    207e:	03 c1       	rjmp	.+518    	; 0x2286 <npdu_decode+0x23c>
    2080:	21 15       	cp	r18, r1
    2082:	31 05       	cpc	r19, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <npdu_decode+0x3e>
    2086:	ff c0       	rjmp	.+510    	; 0x2286 <npdu_decode+0x23c>
        /* Protocol Version */
        npdu_data->protocol_version = npdu[0];
    2088:	dc 01       	movw	r26, r24
    208a:	8c 91       	ld	r24, X
    208c:	f9 01       	movw	r30, r18
    208e:	80 83       	st	Z, r24
        /* control octet */
        /* Bit 7: 1 indicates that the NSDU conveys a network layer message. */
        /*          Message Type field is present. */
        /*        0 indicates that the NSDU contains a BACnet APDU. */
        /*          Message Type field is absent. */
        npdu_data->network_layer_message = (npdu[1] & BIT7) ? true : false;
    2090:	11 96       	adiw	r26, 0x01	; 1
    2092:	8c 91       	ld	r24, X
    2094:	11 97       	sbiw	r26, 0x01	; 1
    2096:	88 1f       	adc	r24, r24
    2098:	88 27       	eor	r24, r24
    209a:	88 1f       	adc	r24, r24
    209c:	82 83       	std	Z+2, r24	; 0x02
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        /* 0 indicates that other than a BACnet-Confirmed-Request-PDU, */
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        npdu_data->data_expecting_reply = (npdu[1] & BIT2) ? true : false;
    209e:	11 96       	adiw	r26, 0x01	; 1
    20a0:	8c 91       	ld	r24, X
    20a2:	11 97       	sbiw	r26, 0x01	; 1
    20a4:	82 fb       	bst	r24, 2
    20a6:	88 27       	eor	r24, r24
    20a8:	80 f9       	bld	r24, 0
    20aa:	81 83       	std	Z+1, r24	; 0x01
        /* Bits 1,0: Network priority where: */
        /* B'11' = Life Safety message */
        /* B'10' = Critical Equipment message */
        /* B'01' = Urgent message */
        /* B'00' = Normal message */
        npdu_data->priority = (BACNET_MESSAGE_PRIORITY) (npdu[1] & 0x03);
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	8c 91       	ld	r24, X
    20b0:	11 97       	sbiw	r26, 0x01	; 1
    20b2:	83 70       	andi	r24, 0x03	; 3
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	94 83       	std	Z+4, r25	; 0x04
    20b8:	83 83       	std	Z+3, r24	; 0x03
        /*Bit 5: Destination specifier where: */
        /* 0 = DNET, DLEN, DADR, and Hop Count absent */
        /* 1 = DNET, DLEN, and Hop Count present */
        /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
        /* DLEN > 0 specifies length of DADR field */
        if (npdu[1] & BIT5) {
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	8c 91       	ld	r24, X
    20be:	85 ff       	sbrs	r24, 5
    20c0:	3b c0       	rjmp	.+118    	; 0x2138 <npdu_decode+0xee>
            len += decode_unsigned16(&npdu[len], &dest_net);
    20c2:	be 01       	movw	r22, r28
    20c4:	6f 5f       	subi	r22, 0xFF	; 255
    20c6:	7f 4f       	sbci	r23, 0xFF	; 255
    20c8:	c7 01       	movw	r24, r14
    20ca:	02 96       	adiw	r24, 0x02	; 2
    20cc:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
            /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
            /* DLEN > 0 specifies length of DADR field */
            address_len = npdu[len++];
    20d0:	8c 01       	movw	r16, r24
    20d2:	0d 5f       	subi	r16, 0xFD	; 253
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	f7 01       	movw	r30, r14
    20d8:	e8 0f       	add	r30, r24
    20da:	f9 1f       	adc	r31, r25
    20dc:	42 81       	ldd	r20, Z+2	; 0x02
            if (dest) {
    20de:	81 14       	cp	r8, r1
    20e0:	91 04       	cpc	r9, r1
    20e2:	49 f0       	breq	.+18     	; 0x20f6 <npdu_decode+0xac>
                dest->net = dest_net;
    20e4:	29 81       	ldd	r18, Y+1	; 0x01
    20e6:	3a 81       	ldd	r19, Y+2	; 0x02
    20e8:	d4 01       	movw	r26, r8
    20ea:	19 96       	adiw	r26, 0x09	; 9
    20ec:	3c 93       	st	X, r19
    20ee:	2e 93       	st	-X, r18
    20f0:	18 97       	sbiw	r26, 0x08	; 8
                dest->len = address_len;
    20f2:	1a 96       	adiw	r26, 0x0a	; 10
    20f4:	4c 93       	st	X, r20
            }
            if (address_len) {
    20f6:	44 23       	and	r20, r20
    20f8:	a1 f1       	breq	.+104    	; 0x2162 <npdu_decode+0x118>
                if (address_len > MAX_MAC_LEN) {
    20fa:	48 30       	cpi	r20, 0x08	; 8
    20fc:	18 f0       	brcs	.+6      	; 0x2104 <npdu_decode+0xba>
                    /* address is too large could be a malformed message */
                    return -1;
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	9f ef       	ldi	r25, 0xFF	; 255
    2102:	c5 c0       	rjmp	.+394    	; 0x228e <npdu_decode+0x244>
                if (address_len > MAX_MAC_LEN) {
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	df 01       	movw	r26, r30
    210a:	a2 0f       	add	r26, r18
    210c:	b3 1f       	adc	r27, r19
                }

                for (i = 0; i < address_len; i++) {
                    mac_octet = npdu[len++];
    210e:	13 96       	adiw	r26, 0x03	; 3
    2110:	5c 91       	ld	r21, X
                    if (dest)
    2112:	81 14       	cp	r8, r1
    2114:	91 04       	cpc	r9, r1
    2116:	29 f0       	breq	.+10     	; 0x2122 <npdu_decode+0xd8>
    2118:	d4 01       	movw	r26, r8
    211a:	a2 0f       	add	r26, r18
    211c:	b3 1f       	adc	r27, r19
                        dest->adr[i] = mac_octet;
    211e:	1b 96       	adiw	r26, 0x0b	; 11
    2120:	5c 93       	st	X, r21
    2122:	2f 5f       	subi	r18, 0xFF	; 255
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
                for (i = 0; i < address_len; i++) {
    2126:	24 17       	cp	r18, r20
    2128:	78 f3       	brcs	.-34     	; 0x2108 <npdu_decode+0xbe>
    212a:	8c 01       	movw	r16, r24
    212c:	0c 5f       	subi	r16, 0xFC	; 252
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	41 50       	subi	r20, 0x01	; 1
    2132:	04 0f       	add	r16, r20
    2134:	11 1d       	adc	r17, r1
    2136:	15 c0       	rjmp	.+42     	; 0x2162 <npdu_decode+0x118>
                }
            }
        }
        /* zero out the destination address */
        else if (dest) {
    2138:	61 15       	cp	r22, r1
    213a:	71 05       	cpc	r23, r1
    213c:	19 f4       	brne	.+6      	; 0x2144 <npdu_decode+0xfa>
        len = 2;
    213e:	02 e0       	ldi	r16, 0x02	; 2
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <npdu_decode+0x118>
            dest->net = 0;
    2144:	fb 01       	movw	r30, r22
    2146:	11 86       	std	Z+9, r1	; 0x09
    2148:	10 86       	std	Z+8, r1	; 0x08
            dest->len = 0;
    214a:	12 86       	std	Z+10, r1	; 0x0a
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	f4 01       	movw	r30, r8
    2152:	e8 0f       	add	r30, r24
    2154:	f9 1f       	adc	r31, r25
            for (i = 0; i < MAX_MAC_LEN; i++) {
                dest->adr[i] = 0;
    2156:	13 86       	std	Z+11, r1	; 0x0b
    2158:	01 96       	adiw	r24, 0x01	; 1
            for (i = 0; i < MAX_MAC_LEN; i++) {
    215a:	87 30       	cpi	r24, 0x07	; 7
    215c:	91 05       	cpc	r25, r1
    215e:	c1 f7       	brne	.-16     	; 0x2150 <npdu_decode+0x106>
    2160:	ee cf       	rjmp	.-36     	; 0x213e <npdu_decode+0xf4>
        /* Bit 3: Source specifier where: */
        /* 0 =  SNET, SLEN, and SADR absent */
        /* 1 =  SNET, SLEN, and SADR present */
        /* SLEN = 0 Invalid todo Steve: immediately below src->len == broadcast case, surely then this comment is incorrect? */
        /* SLEN > 0 specifies length of SADR field */
        if (npdu[1] & BIT3) {
    2162:	d7 01       	movw	r26, r14
    2164:	11 96       	adiw	r26, 0x01	; 1
    2166:	8c 91       	ld	r24, X
    2168:	83 ff       	sbrs	r24, 3
    216a:	3c c0       	rjmp	.+120    	; 0x21e4 <npdu_decode+0x19a>
            len += decode_unsigned16(&npdu[len], &src_net);
    216c:	be 01       	movw	r22, r28
    216e:	6d 5f       	subi	r22, 0xFD	; 253
    2170:	7f 4f       	sbci	r23, 0xFF	; 255
    2172:	c7 01       	movw	r24, r14
    2174:	80 0f       	add	r24, r16
    2176:	91 1f       	adc	r25, r17
    2178:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
    217c:	80 0f       	add	r24, r16
    217e:	91 1f       	adc	r25, r17
            /* SLEN = 0 denotes broadcast MAC SADR and SADR field is absent */
            /* SLEN > 0 specifies length of SADR field */
            address_len = npdu[len++];
    2180:	8c 01       	movw	r16, r24
    2182:	0f 5f       	subi	r16, 0xFF	; 255
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	f7 01       	movw	r30, r14
    2188:	e8 0f       	add	r30, r24
    218a:	f9 1f       	adc	r31, r25
    218c:	40 81       	ld	r20, Z
            if (src) {
    218e:	a1 14       	cp	r10, r1
    2190:	b1 04       	cpc	r11, r1
    2192:	49 f0       	breq	.+18     	; 0x21a6 <npdu_decode+0x15c>
                src->net = src_net;
    2194:	2b 81       	ldd	r18, Y+3	; 0x03
    2196:	3c 81       	ldd	r19, Y+4	; 0x04
    2198:	d5 01       	movw	r26, r10
    219a:	19 96       	adiw	r26, 0x09	; 9
    219c:	3c 93       	st	X, r19
    219e:	2e 93       	st	-X, r18
    21a0:	18 97       	sbiw	r26, 0x08	; 8
                src->len = address_len;
    21a2:	1a 96       	adiw	r26, 0x0a	; 10
    21a4:	4c 93       	st	X, r20
            }
            if (address_len) {
    21a6:	44 23       	and	r20, r20
    21a8:	b1 f1       	breq	.+108    	; 0x2216 <npdu_decode+0x1cc>
                if (address_len > MAX_MAC_LEN) {
    21aa:	48 30       	cpi	r20, 0x08	; 8
    21ac:	08 f0       	brcs	.+2      	; 0x21b0 <npdu_decode+0x166>
    21ae:	a7 cf       	rjmp	.-178    	; 0x20fe <npdu_decode+0xb4>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	df 01       	movw	r26, r30
    21b6:	a2 0f       	add	r26, r18
    21b8:	b3 1f       	adc	r27, r19
                    /* address is too large could be a malformed message */
                    return -1;
                }

                for (i = 0; i < address_len; i++) {
                    mac_octet = npdu[len++];
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	5c 91       	ld	r21, X
                    if (src)
    21be:	a1 14       	cp	r10, r1
    21c0:	b1 04       	cpc	r11, r1
    21c2:	29 f0       	breq	.+10     	; 0x21ce <npdu_decode+0x184>
    21c4:	d5 01       	movw	r26, r10
    21c6:	a2 0f       	add	r26, r18
    21c8:	b3 1f       	adc	r27, r19
                        src->adr[i] = mac_octet;
    21ca:	1b 96       	adiw	r26, 0x0b	; 11
    21cc:	5c 93       	st	X, r21
    21ce:	2f 5f       	subi	r18, 0xFF	; 255
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
                for (i = 0; i < address_len; i++) {
    21d2:	24 17       	cp	r18, r20
    21d4:	78 f3       	brcs	.-34     	; 0x21b4 <npdu_decode+0x16a>
    21d6:	8c 01       	movw	r16, r24
    21d8:	0e 5f       	subi	r16, 0xFE	; 254
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	41 50       	subi	r20, 0x01	; 1
    21de:	04 0f       	add	r16, r20
    21e0:	11 1d       	adc	r17, r1
    21e2:	19 c0       	rjmp	.+50     	; 0x2216 <npdu_decode+0x1cc>
                }
            }
        } else if (src) {
    21e4:	a1 14       	cp	r10, r1
    21e6:	b1 04       	cpc	r11, r1
    21e8:	b1 f0       	breq	.+44     	; 0x2216 <npdu_decode+0x1cc>
            /* Clear the net number, with one exception: if the receive() 
             * function set it to BACNET_BROADCAST_NETWORK, (eg, for 
             * BVLC_ORIGINAL_BROADCAST_NPDU) then don't stomp on that.
             */
            if (src->net != BACNET_BROADCAST_NETWORK)
    21ea:	f5 01       	movw	r30, r10
    21ec:	80 85       	ldd	r24, Z+8	; 0x08
    21ee:	91 85       	ldd	r25, Z+9	; 0x09
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	29 f0       	breq	.+10     	; 0x21fe <npdu_decode+0x1b4>
                src->net = 0;
    21f4:	d5 01       	movw	r26, r10
    21f6:	19 96       	adiw	r26, 0x09	; 9
    21f8:	1c 92       	st	X, r1
    21fa:	1e 92       	st	-X, r1
    21fc:	18 97       	sbiw	r26, 0x08	; 8
            src->len = 0;
    21fe:	f5 01       	movw	r30, r10
    2200:	12 86       	std	Z+10, r1	; 0x0a
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	f5 01       	movw	r30, r10
    2208:	e8 0f       	add	r30, r24
    220a:	f9 1f       	adc	r31, r25
            for (i = 0; i < MAX_MAC_LEN; i++) {
                src->adr[i] = 0;
    220c:	13 86       	std	Z+11, r1	; 0x0b
    220e:	01 96       	adiw	r24, 0x01	; 1
            for (i = 0; i < MAX_MAC_LEN; i++) {
    2210:	87 30       	cpi	r24, 0x07	; 7
    2212:	91 05       	cpc	r25, r1
    2214:	c1 f7       	brne	.-16     	; 0x2206 <npdu_decode+0x1bc>
            }
        }
        /* The Hop Count field shall be present only if the message is */
        /* destined for a remote network, i.e., if DNET is present. */
        /* This is a one-octet field that is initialized to a value of 0xff. */
        if (dest_net) {
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	89 2b       	or	r24, r25
    221c:	51 f0       	breq	.+20     	; 0x2232 <npdu_decode+0x1e8>
            npdu_data->hop_count = npdu[len++];
    221e:	f7 01       	movw	r30, r14
    2220:	e0 0f       	add	r30, r16
    2222:	f1 1f       	adc	r31, r17
    2224:	80 81       	ld	r24, Z
    2226:	d6 01       	movw	r26, r12
    2228:	19 96       	adiw	r26, 0x09	; 9
    222a:	8c 93       	st	X, r24
    222c:	0f 5f       	subi	r16, 0xFF	; 255
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <npdu_decode+0x1ec>
        } else {
            npdu_data->hop_count = 0;
    2232:	f6 01       	movw	r30, r12
    2234:	11 86       	std	Z+9, r1	; 0x09
        }
        /* Indicates that the NSDU conveys a network layer message. */
        /* Message Type field is present. */
        if (npdu_data->network_layer_message) {
    2236:	d6 01       	movw	r26, r12
    2238:	12 96       	adiw	r26, 0x02	; 2
    223a:	8c 91       	ld	r24, X
    223c:	88 23       	and	r24, r24
    223e:	d1 f0       	breq	.+52     	; 0x2274 <npdu_decode+0x22a>
            npdu_data->network_message_type =
                (BACNET_NETWORK_MESSAGE_TYPE) npdu[len++];
    2240:	58 01       	movw	r10, r16
    2242:	bf ef       	ldi	r27, 0xFF	; 255
    2244:	ab 1a       	sub	r10, r27
    2246:	bb 0a       	sbc	r11, r27
    2248:	f7 01       	movw	r30, r14
    224a:	e0 0f       	add	r30, r16
    224c:	f1 1f       	adc	r31, r17
    224e:	80 81       	ld	r24, Z
    2250:	90 e0       	ldi	r25, 0x00	; 0
            npdu_data->network_message_type =
    2252:	f6 01       	movw	r30, r12
    2254:	96 83       	std	Z+6, r25	; 0x06
    2256:	85 83       	std	Z+5, r24	; 0x05
            /* Message Type field contains a value in the range 0x80 - 0xFF, */
            /* then a Vendor ID field shall be present */
            if (npdu_data->network_message_type >= 0x80)
    2258:	80 38       	cpi	r24, 0x80	; 128
    225a:	91 05       	cpc	r25, r1
    225c:	b8 f0       	brcs	.+46     	; 0x228c <npdu_decode+0x242>
                len += decode_unsigned16(&npdu[len], &npdu_data->vendor_id);
    225e:	b6 01       	movw	r22, r12
    2260:	69 5f       	subi	r22, 0xF9	; 249
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	c7 01       	movw	r24, r14
    2266:	8a 0d       	add	r24, r10
    2268:	9b 1d       	adc	r25, r11
    226a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
    226e:	8a 0d       	add	r24, r10
    2270:	9b 1d       	adc	r25, r11
    2272:	0d c0       	rjmp	.+26     	; 0x228e <npdu_decode+0x244>
        } else {
            /* Since npdu_data->network_layer_message is false,
             * it doesn't much matter what we set here; this is safe: */
            npdu_data->network_message_type = NETWORK_MESSAGE_INVALID;
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	d6 01       	movw	r26, r12
    227a:	16 96       	adiw	r26, 0x06	; 6
    227c:	9c 93       	st	X, r25
    227e:	8e 93       	st	-X, r24
    2280:	15 97       	sbiw	r26, 0x05	; 5
    2282:	c8 01       	movw	r24, r16
    2284:	04 c0       	rjmp	.+8      	; 0x228e <npdu_decode+0x244>
    int len = 0;        /* return value - number of octets loaded in this function */
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	01 c0       	rjmp	.+2      	; 0x228e <npdu_decode+0x244>
                (BACNET_NETWORK_MESSAGE_TYPE) npdu[len++];
    228c:	c5 01       	movw	r24, r10
        }
    }

    return len;
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	df 90       	pop	r13
    22a4:	cf 90       	pop	r12
    22a6:	bf 90       	pop	r11
    22a8:	af 90       	pop	r10
    22aa:	9f 90       	pop	r9
    22ac:	8f 90       	pop	r8
    22ae:	08 95       	ret

000022b0 <byte_reverse_bits>:
    return encode_tag(&apdu[0], tag_number, true, 0);
}

static uint8_t byte_reverse_bits(
    uint8_t in_byte)
{
    22b0:	98 2f       	mov	r25, r24
    uint8_t out_byte = 0;

    if (in_byte & BIT0) {
    22b2:	80 fd       	sbrc	r24, 0
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <byte_reverse_bits+0xa>
    uint8_t out_byte = 0;
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <byte_reverse_bits+0xc>
        out_byte |= BIT7;
    22ba:	80 e8       	ldi	r24, 0x80	; 128
    }
    if (in_byte & BIT1) {
    22bc:	91 fd       	sbrc	r25, 1
        out_byte |= BIT6;
    22be:	80 64       	ori	r24, 0x40	; 64
    }
    if (in_byte & BIT2) {
    22c0:	92 fd       	sbrc	r25, 2
        out_byte |= BIT5;
    22c2:	80 62       	ori	r24, 0x20	; 32
    }
    if (in_byte & BIT3) {
    22c4:	93 fd       	sbrc	r25, 3
        out_byte |= BIT4;
    22c6:	80 61       	ori	r24, 0x10	; 16
    }
    if (in_byte & BIT4) {
    22c8:	94 fd       	sbrc	r25, 4
        out_byte |= BIT3;
    22ca:	88 60       	ori	r24, 0x08	; 8
    }
    if (in_byte & BIT5) {
    22cc:	95 fd       	sbrc	r25, 5
        out_byte |= BIT2;
    22ce:	84 60       	ori	r24, 0x04	; 4
    }
    if (in_byte & BIT6) {
    22d0:	96 fd       	sbrc	r25, 6
        out_byte |= BIT1;
    22d2:	82 60       	ori	r24, 0x02	; 2
    }
    if (in_byte & BIT7) {
    22d4:	97 fd       	sbrc	r25, 7
        out_byte |= BIT0;
    22d6:	81 60       	ori	r24, 0x01	; 1
    }

    return out_byte;
}
    22d8:	08 95       	ret

000022da <decode_max_segs>:
    switch (octet & 0xF0) {
    22da:	80 7f       	andi	r24, 0xF0	; 240
    22dc:	80 34       	cpi	r24, 0x40	; 64
    22de:	b9 f0       	breq	.+46     	; 0x230e <decode_max_segs+0x34>
    22e0:	38 f4       	brcc	.+14     	; 0x22f0 <decode_max_segs+0x16>
    22e2:	80 32       	cpi	r24, 0x20	; 32
    22e4:	71 f0       	breq	.+28     	; 0x2302 <decode_max_segs+0x28>
    22e6:	80 33       	cpi	r24, 0x30	; 48
    22e8:	79 f0       	breq	.+30     	; 0x2308 <decode_max_segs+0x2e>
    22ea:	80 31       	cpi	r24, 0x10	; 16
    22ec:	39 f4       	brne	.+14     	; 0x22fc <decode_max_segs+0x22>
    22ee:	1b c0       	rjmp	.+54     	; 0x2326 <decode_max_segs+0x4c>
    22f0:	80 36       	cpi	r24, 0x60	; 96
    22f2:	99 f0       	breq	.+38     	; 0x231a <decode_max_segs+0x40>
    22f4:	80 37       	cpi	r24, 0x70	; 112
    22f6:	a1 f0       	breq	.+40     	; 0x2320 <decode_max_segs+0x46>
    22f8:	80 35       	cpi	r24, 0x50	; 80
    22fa:	61 f0       	breq	.+24     	; 0x2314 <decode_max_segs+0x3a>
    int max_segs = 0;
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	08 95       	ret
            max_segs = 4;
    2302:	84 e0       	ldi	r24, 0x04	; 4
    2304:	90 e0       	ldi	r25, 0x00	; 0
            break;
    2306:	08 95       	ret
            max_segs = 8;
    2308:	88 e0       	ldi	r24, 0x08	; 8
    230a:	90 e0       	ldi	r25, 0x00	; 0
            break;
    230c:	08 95       	ret
            max_segs = 16;
    230e:	80 e1       	ldi	r24, 0x10	; 16
    2310:	90 e0       	ldi	r25, 0x00	; 0
            break;
    2312:	08 95       	ret
            max_segs = 32;
    2314:	80 e2       	ldi	r24, 0x20	; 32
    2316:	90 e0       	ldi	r25, 0x00	; 0
            break;
    2318:	08 95       	ret
            max_segs = 64;
    231a:	80 e4       	ldi	r24, 0x40	; 64
    231c:	90 e0       	ldi	r25, 0x00	; 0
            break;
    231e:	08 95       	ret
            max_segs = 65;
    2320:	81 e4       	ldi	r24, 0x41	; 65
    2322:	90 e0       	ldi	r25, 0x00	; 0
            break;
    2324:	08 95       	ret
            max_segs = 2;
    2326:	82 e0       	ldi	r24, 0x02	; 2
    2328:	90 e0       	ldi	r25, 0x00	; 0
}
    232a:	08 95       	ret

0000232c <decode_max_apdu>:
    switch (octet & 0x0F) {
    232c:	8f 70       	andi	r24, 0x0F	; 15
    232e:	86 30       	cpi	r24, 0x06	; 6
    2330:	48 f4       	brcc	.+18     	; 0x2344 <decode_max_apdu+0x18>
    2332:	e8 2f       	mov	r30, r24
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	e0 50       	subi	r30, 0x00	; 0
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	08 95       	ret
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
}
    2348:	08 95       	ret

0000234a <encode_tag>:
{
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	fc 01       	movw	r30, r24
    if (context_specific)
    2354:	41 11       	cpse	r20, r1
    2356:	02 c0       	rjmp	.+4      	; 0x235c <encode_tag+0x12>
    apdu[0] = 0;
    2358:	10 82       	st	Z, r1
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <encode_tag+0x16>
        apdu[0] = BIT3;
    235c:	88 e0       	ldi	r24, 0x08	; 8
    235e:	80 83       	st	Z, r24
    2360:	80 81       	ld	r24, Z
    if (tag_number <= 14) {
    2362:	6f 30       	cpi	r22, 0x0F	; 15
    2364:	48 f4       	brcc	.+18     	; 0x2378 <encode_tag+0x2e>
        apdu[0] |= (tag_number << 4);
    2366:	90 e1       	ldi	r25, 0x10	; 16
    2368:	69 9f       	mul	r22, r25
    236a:	b0 01       	movw	r22, r0
    236c:	11 24       	eor	r1, r1
    236e:	68 2b       	or	r22, r24
    2370:	60 83       	st	Z, r22
    int len = 1;        /* return value */
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <encode_tag+0x38>
        apdu[0] |= 0xF0;
    2378:	80 6f       	ori	r24, 0xF0	; 240
    237a:	80 83       	st	Z, r24
        apdu[1] = tag_number;
    237c:	61 83       	std	Z+1, r22	; 0x01
        len++;
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	40 81       	ld	r20, Z
    if (len_value_type <= 4) {
    2384:	05 30       	cpi	r16, 0x05	; 5
    2386:	11 05       	cpc	r17, r1
    2388:	21 05       	cpc	r18, r1
    238a:	31 05       	cpc	r19, r1
    238c:	18 f4       	brcc	.+6      	; 0x2394 <encode_tag+0x4a>
        apdu[0] |= len_value_type;
    238e:	04 2b       	or	r16, r20
    2390:	00 83       	st	Z, r16
    2392:	29 c0       	rjmp	.+82     	; 0x23e6 <encode_tag+0x9c>
        apdu[0] |= 5;
    2394:	45 60       	ori	r20, 0x05	; 5
    2396:	40 83       	st	Z, r20
    2398:	ec 01       	movw	r28, r24
    239a:	21 96       	adiw	r28, 0x01	; 1
    239c:	df 01       	movw	r26, r30
    239e:	a8 0f       	add	r26, r24
    23a0:	b9 1f       	adc	r27, r25
        if (len_value_type <= 253) {
    23a2:	0e 3f       	cpi	r16, 0xFE	; 254
    23a4:	11 05       	cpc	r17, r1
    23a6:	21 05       	cpc	r18, r1
    23a8:	31 05       	cpc	r19, r1
    23aa:	18 f4       	brcc	.+6      	; 0x23b2 <encode_tag+0x68>
            apdu[len++] = (uint8_t) len_value_type;
    23ac:	0c 93       	st	X, r16
    23ae:	ce 01       	movw	r24, r28
    23b0:	1a c0       	rjmp	.+52     	; 0x23e6 <encode_tag+0x9c>
        } else if (len_value_type <= 65535) {
    23b2:	01 15       	cp	r16, r1
    23b4:	11 05       	cpc	r17, r1
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	28 07       	cpc	r18, r24
    23ba:	31 05       	cpc	r19, r1
    23bc:	48 f4       	brcc	.+18     	; 0x23d0 <encode_tag+0x86>
            apdu[len++] = 254;
    23be:	8e ef       	ldi	r24, 0xFE	; 254
    23c0:	8c 93       	st	X, r24
            len += encode_unsigned16(&apdu[len], (uint16_t) len_value_type);
    23c2:	b8 01       	movw	r22, r16
    23c4:	cf 01       	movw	r24, r30
    23c6:	8c 0f       	add	r24, r28
    23c8:	9d 1f       	adc	r25, r29
    23ca:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <encode_unsigned16>
    23ce:	09 c0       	rjmp	.+18     	; 0x23e2 <encode_tag+0x98>
            apdu[len++] = 255;
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	8c 93       	st	X, r24
            len += encode_unsigned32(&apdu[len], len_value_type);
    23d4:	b9 01       	movw	r22, r18
    23d6:	a8 01       	movw	r20, r16
    23d8:	cf 01       	movw	r24, r30
    23da:	8c 0f       	add	r24, r28
    23dc:	9d 1f       	adc	r25, r29
    23de:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <encode_unsigned32>
    23e2:	8c 0f       	add	r24, r28
    23e4:	9d 1f       	adc	r25, r29
}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	08 95       	ret

000023f0 <encode_opening_tag>:
{
    23f0:	fc 01       	movw	r30, r24
    apdu[0] = BIT3;
    23f2:	88 e0       	ldi	r24, 0x08	; 8
    23f4:	80 83       	st	Z, r24
    if (tag_number <= 14) {
    23f6:	6f 30       	cpi	r22, 0x0F	; 15
    23f8:	48 f4       	brcc	.+18     	; 0x240c <encode_opening_tag+0x1c>
        apdu[0] |= (tag_number << 4);
    23fa:	80 e1       	ldi	r24, 0x10	; 16
    23fc:	68 9f       	mul	r22, r24
    23fe:	b0 01       	movw	r22, r0
    2400:	11 24       	eor	r1, r1
    2402:	68 60       	ori	r22, 0x08	; 8
    2404:	60 83       	st	Z, r22
    int len = 1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <encode_opening_tag+0x26>
        apdu[0] |= 0xF0;
    240c:	88 ef       	ldi	r24, 0xF8	; 248
    240e:	80 83       	st	Z, r24
        apdu[1] = tag_number;
    2410:	61 83       	std	Z+1, r22	; 0x01
        len++;
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	90 e0       	ldi	r25, 0x00	; 0
    apdu[0] |= 6;
    2416:	20 81       	ld	r18, Z
    2418:	26 60       	ori	r18, 0x06	; 6
    241a:	20 83       	st	Z, r18
}
    241c:	08 95       	ret

0000241e <encode_closing_tag>:
{
    241e:	fc 01       	movw	r30, r24
    apdu[0] = BIT3;
    2420:	88 e0       	ldi	r24, 0x08	; 8
    2422:	80 83       	st	Z, r24
    if (tag_number <= 14) {
    2424:	6f 30       	cpi	r22, 0x0F	; 15
    2426:	48 f4       	brcc	.+18     	; 0x243a <encode_closing_tag+0x1c>
        apdu[0] |= (tag_number << 4);
    2428:	80 e1       	ldi	r24, 0x10	; 16
    242a:	68 9f       	mul	r22, r24
    242c:	b0 01       	movw	r22, r0
    242e:	11 24       	eor	r1, r1
    2430:	68 60       	ori	r22, 0x08	; 8
    2432:	60 83       	st	Z, r22
    int len = 1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <encode_closing_tag+0x26>
        apdu[0] |= 0xF0;
    243a:	88 ef       	ldi	r24, 0xF8	; 248
    243c:	80 83       	st	Z, r24
        apdu[1] = tag_number;
    243e:	61 83       	std	Z+1, r22	; 0x01
        len++;
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	90 e0       	ldi	r25, 0x00	; 0
    apdu[0] |= 7;
    2444:	20 81       	ld	r18, Z
    2446:	27 60       	ori	r18, 0x07	; 7
    2448:	20 83       	st	Z, r18
}
    244a:	08 95       	ret

0000244c <decode_tag_number>:
    if (IS_EXTENDED_TAG_NUMBER(apdu[0])) {
    244c:	fc 01       	movw	r30, r24
    244e:	20 81       	ld	r18, Z
    2450:	32 2f       	mov	r19, r18
    2452:	30 7f       	andi	r19, 0xF0	; 240
    2454:	30 3f       	cpi	r19, 0xF0	; 240
    2456:	39 f4       	brne	.+14     	; 0x2466 <decode_tag_number+0x1a>
        if (tag_number) {
    2458:	61 15       	cp	r22, r1
    245a:	71 05       	cpc	r23, r1
    245c:	61 f0       	breq	.+24     	; 0x2476 <decode_tag_number+0x2a>
            *tag_number = apdu[1];
    245e:	81 81       	ldd	r24, Z+1	; 0x01
    2460:	fb 01       	movw	r30, r22
    2462:	80 83       	st	Z, r24
    2464:	08 c0       	rjmp	.+16     	; 0x2476 <decode_tag_number+0x2a>
        if (tag_number) {
    2466:	61 15       	cp	r22, r1
    2468:	71 05       	cpc	r23, r1
    246a:	41 f0       	breq	.+16     	; 0x247c <decode_tag_number+0x30>
            *tag_number = (uint8_t) (apdu[0] >> 4);
    246c:	22 95       	swap	r18
    246e:	2f 70       	andi	r18, 0x0F	; 15
    2470:	fb 01       	movw	r30, r22
    2472:	20 83       	st	Z, r18
    2474:	03 c0       	rjmp	.+6      	; 0x247c <decode_tag_number+0x30>
        len++;
    2476:	82 e0       	ldi	r24, 0x02	; 2
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	08 95       	ret
    int len = 1;        /* return value */
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
}
    2480:	08 95       	ret

00002482 <decode_tag_number_and_value>:
{
    2482:	af 92       	push	r10
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	00 d0       	rcall	.+0      	; 0x2498 <decode_tag_number_and_value+0x16>
    2498:	00 d0       	rcall	.+0      	; 0x249a <decode_tag_number_and_value+0x18>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	6c 01       	movw	r12, r24
    24a0:	7a 01       	movw	r14, r20
    len = decode_tag_number(&apdu[0], tag_number);
    24a2:	0e 94 26 12 	call	0x244c	; 0x244c <decode_tag_number>
    if (IS_EXTENDED_VALUE(apdu[0])) {
    24a6:	f6 01       	movw	r30, r12
    24a8:	00 81       	ld	r16, Z
    24aa:	07 70       	andi	r16, 0x07	; 7
    24ac:	05 30       	cpi	r16, 0x05	; 5
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <decode_tag_number_and_value+0x30>
    24b0:	42 c0       	rjmp	.+132    	; 0x2536 <decode_tag_number_and_value+0xb4>
        if (apdu[len] == 255) {
    24b2:	e8 0f       	add	r30, r24
    24b4:	f9 1f       	adc	r31, r25
    24b6:	00 81       	ld	r16, Z
    24b8:	9c 01       	movw	r18, r24
    24ba:	2f 5f       	subi	r18, 0xFF	; 255
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	59 01       	movw	r10, r18
    24c0:	0f 3f       	cpi	r16, 0xFF	; 255
    24c2:	99 f4       	brne	.+38     	; 0x24ea <decode_tag_number_and_value+0x68>
            len += decode_unsigned32(&apdu[len], &value32);
    24c4:	be 01       	movw	r22, r28
    24c6:	6f 5f       	subi	r22, 0xFF	; 255
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	c6 01       	movw	r24, r12
    24cc:	82 0f       	add	r24, r18
    24ce:	93 1f       	adc	r25, r19
    24d0:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <decode_unsigned32>
    24d4:	8a 0d       	add	r24, r10
    24d6:	9b 1d       	adc	r25, r11
            if (value) {
    24d8:	e1 14       	cp	r14, r1
    24da:	f1 04       	cpc	r15, r1
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <decode_tag_number_and_value+0x5e>
    24de:	43 c0       	rjmp	.+134    	; 0x2566 <decode_tag_number_and_value+0xe4>
                *value = value32;
    24e0:	49 81       	ldd	r20, Y+1	; 0x01
    24e2:	5a 81       	ldd	r21, Y+2	; 0x02
    24e4:	6b 81       	ldd	r22, Y+3	; 0x03
    24e6:	7c 81       	ldd	r23, Y+4	; 0x04
    24e8:	13 c0       	rjmp	.+38     	; 0x2510 <decode_tag_number_and_value+0x8e>
        else if (apdu[len] == 254) {
    24ea:	0e 3f       	cpi	r16, 0xFE	; 254
    24ec:	b9 f4       	brne	.+46     	; 0x251c <decode_tag_number_and_value+0x9a>
            len += decode_unsigned16(&apdu[len], &value16);
    24ee:	be 01       	movw	r22, r28
    24f0:	6f 5f       	subi	r22, 0xFF	; 255
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	c6 01       	movw	r24, r12
    24f6:	82 0f       	add	r24, r18
    24f8:	93 1f       	adc	r25, r19
    24fa:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
    24fe:	8a 0d       	add	r24, r10
    2500:	9b 1d       	adc	r25, r11
            if (value) {
    2502:	e1 14       	cp	r14, r1
    2504:	f1 04       	cpc	r15, r1
    2506:	79 f1       	breq	.+94     	; 0x2566 <decode_tag_number_and_value+0xe4>
                *value = value16;
    2508:	49 81       	ldd	r20, Y+1	; 0x01
    250a:	5a 81       	ldd	r21, Y+2	; 0x02
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	f7 01       	movw	r30, r14
    2512:	40 83       	st	Z, r20
    2514:	51 83       	std	Z+1, r21	; 0x01
    2516:	62 83       	std	Z+2, r22	; 0x02
    2518:	73 83       	std	Z+3, r23	; 0x03
    251a:	25 c0       	rjmp	.+74     	; 0x2566 <decode_tag_number_and_value+0xe4>
            if (value) {
    251c:	e1 14       	cp	r14, r1
    251e:	f1 04       	cpc	r15, r1
    2520:	41 f0       	breq	.+16     	; 0x2532 <decode_tag_number_and_value+0xb0>
                *value = apdu[len];
    2522:	10 e0       	ldi	r17, 0x00	; 0
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	f7 01       	movw	r30, r14
    252a:	00 83       	st	Z, r16
    252c:	11 83       	std	Z+1, r17	; 0x01
    252e:	22 83       	std	Z+2, r18	; 0x02
    2530:	33 83       	std	Z+3, r19	; 0x03
            len++;
    2532:	c5 01       	movw	r24, r10
    2534:	18 c0       	rjmp	.+48     	; 0x2566 <decode_tag_number_and_value+0xe4>
    } else if (IS_OPENING_TAG(apdu[0]) && value) {
    2536:	06 30       	cpi	r16, 0x06	; 6
    2538:	11 f0       	breq	.+4      	; 0x253e <decode_tag_number_and_value+0xbc>
    } else if (IS_CLOSING_TAG(apdu[0]) && value) {
    253a:	07 30       	cpi	r16, 0x07	; 7
    253c:	49 f4       	brne	.+18     	; 0x2550 <decode_tag_number_and_value+0xce>
    253e:	e1 14       	cp	r14, r1
    2540:	f1 04       	cpc	r15, r1
    2542:	89 f0       	breq	.+34     	; 0x2566 <decode_tag_number_and_value+0xe4>
        *value = 0;
    2544:	f7 01       	movw	r30, r14
    2546:	10 82       	st	Z, r1
    2548:	11 82       	std	Z+1, r1	; 0x01
    254a:	12 82       	std	Z+2, r1	; 0x02
    254c:	13 82       	std	Z+3, r1	; 0x03
    254e:	0b c0       	rjmp	.+22     	; 0x2566 <decode_tag_number_and_value+0xe4>
    } else if (value) {
    2550:	e1 14       	cp	r14, r1
    2552:	f1 04       	cpc	r15, r1
    2554:	41 f0       	breq	.+16     	; 0x2566 <decode_tag_number_and_value+0xe4>
        *value = apdu[0] & 0x07;
    2556:	10 e0       	ldi	r17, 0x00	; 0
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	f7 01       	movw	r30, r14
    255e:	00 83       	st	Z, r16
    2560:	11 83       	std	Z+1, r17	; 0x01
    2562:	22 83       	std	Z+2, r18	; 0x02
    2564:	33 83       	std	Z+3, r19	; 0x03
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	1f 91       	pop	r17
    2574:	0f 91       	pop	r16
    2576:	ff 90       	pop	r15
    2578:	ef 90       	pop	r14
    257a:	df 90       	pop	r13
    257c:	cf 90       	pop	r12
    257e:	bf 90       	pop	r11
    2580:	af 90       	pop	r10
    2582:	08 95       	ret

00002584 <decode_is_context_tag>:
{
    2584:	ff 92       	push	r15
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	1f 92       	push	r1
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	8c 01       	movw	r16, r24
    2596:	f6 2e       	mov	r15, r22
    uint8_t my_tag_number = 0;
    2598:	19 82       	std	Y+1, r1	; 0x01
    decode_tag_number(apdu, &my_tag_number);
    259a:	be 01       	movw	r22, r28
    259c:	6f 5f       	subi	r22, 0xFF	; 255
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	0e 94 26 12 	call	0x244c	; 0x244c <decode_tag_number>
    return (bool) (IS_CONTEXT_SPECIFIC(*apdu) &&
    25a4:	f8 01       	movw	r30, r16
    25a6:	80 81       	ld	r24, Z
    25a8:	83 ff       	sbrs	r24, 3
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <decode_is_context_tag+0x2e>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	99 81       	ldd	r25, Y+1	; 0x01
    25b0:	9f 11       	cpse	r25, r15
    25b2:	80 e0       	ldi	r24, 0x00	; 0
}
    25b4:	81 70       	andi	r24, 0x01	; 1
    25b6:	0f 90       	pop	r0
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ff 90       	pop	r15
    25c2:	08 95       	ret

000025c4 <decode_is_opening_tag_number>:
{
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	1f 92       	push	r1
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	8c 01       	movw	r16, r24
    25d6:	f6 2e       	mov	r15, r22
    uint8_t my_tag_number = 0;
    25d8:	19 82       	std	Y+1, r1	; 0x01
    decode_tag_number(apdu, &my_tag_number);
    25da:	be 01       	movw	r22, r28
    25dc:	6f 5f       	subi	r22, 0xFF	; 255
    25de:	7f 4f       	sbci	r23, 0xFF	; 255
    25e0:	0e 94 26 12 	call	0x244c	; 0x244c <decode_tag_number>
    return (bool) (IS_OPENING_TAG(apdu[0]) && (my_tag_number == tag_number));
    25e4:	f8 01       	movw	r30, r16
    25e6:	80 81       	ld	r24, Z
    25e8:	87 70       	andi	r24, 0x07	; 7
    25ea:	86 30       	cpi	r24, 0x06	; 6
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <decode_is_opening_tag_number+0x30>
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	99 81       	ldd	r25, Y+1	; 0x01
    25f2:	9f 11       	cpse	r25, r15
    25f4:	80 e0       	ldi	r24, 0x00	; 0
}
    25f6:	81 70       	andi	r24, 0x01	; 1
    25f8:	0f 90       	pop	r0
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	08 95       	ret

00002606 <decode_is_closing_tag_number>:
{
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	1f 92       	push	r1
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	8c 01       	movw	r16, r24
    2618:	f6 2e       	mov	r15, r22
    uint8_t my_tag_number = 0;
    261a:	19 82       	std	Y+1, r1	; 0x01
    decode_tag_number(apdu, &my_tag_number);
    261c:	be 01       	movw	r22, r28
    261e:	6f 5f       	subi	r22, 0xFF	; 255
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	0e 94 26 12 	call	0x244c	; 0x244c <decode_tag_number>
    return (bool) (IS_CLOSING_TAG(apdu[0]) && (my_tag_number == tag_number));
    2626:	f8 01       	movw	r30, r16
    2628:	80 81       	ld	r24, Z
    262a:	87 70       	andi	r24, 0x07	; 7
    262c:	87 30       	cpi	r24, 0x07	; 7
    262e:	19 f4       	brne	.+6      	; 0x2636 <decode_is_closing_tag_number+0x30>
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	99 81       	ldd	r25, Y+1	; 0x01
    2634:	9f 11       	cpse	r25, r15
    2636:	80 e0       	ldi	r24, 0x00	; 0
}
    2638:	81 70       	andi	r24, 0x01	; 1
    263a:	0f 90       	pop	r0
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	1f 91       	pop	r17
    2642:	0f 91       	pop	r16
    2644:	ff 90       	pop	r15
    2646:	08 95       	ret

00002648 <encode_application_boolean>:
{
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    uint32_t len_value = 0;
    264c:	06 2f       	mov	r16, r22
    264e:	10 e0       	ldi	r17, 0x00	; 0
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    len =
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	61 e0       	ldi	r22, 0x01	; 1
    2658:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
}
    265c:	1f 91       	pop	r17
    265e:	0f 91       	pop	r16
    2660:	08 95       	ret

00002662 <encode_bitstring>:
/* from clause 20.2.10 Encoding of a Bit String Value */
/* returns the number of apdu bytes consumed */
int encode_bitstring(
    uint8_t * apdu,
    BACNET_BIT_STRING * bit_string)
{
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	8c 01       	movw	r16, r24
    2674:	eb 01       	movw	r28, r22
    uint8_t remaining_used_bits = 0;
    uint8_t used_bytes = 0;
    uint8_t i = 0;

    /* if the bit string is empty, then the first octet shall be zero */
    if (bitstring_bits_used(bit_string) == 0) {
    2676:	cb 01       	movw	r24, r22
    2678:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <bitstring_bits_used>
    267c:	81 11       	cpse	r24, r1
    267e:	05 c0       	rjmp	.+10     	; 0x268a <encode_bitstring+0x28>
        apdu[len++] = 0;
    2680:	f8 01       	movw	r30, r16
    2682:	10 82       	st	Z, r1
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	21 c0       	rjmp	.+66     	; 0x26cc <encode_bitstring+0x6a>
    } else {
        used_bytes = bitstring_bytes_used(bit_string);
    268a:	ce 01       	movw	r24, r28
    268c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <bitstring_bytes_used>
    2690:	c8 2e       	mov	r12, r24
        remaining_used_bits =
            (uint8_t) (bitstring_bits_used(bit_string) - ((used_bytes -
    2692:	ce 01       	movw	r24, r28
    2694:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <bitstring_bits_used>
    2698:	ec 2c       	mov	r14, r12
    269a:	f1 2c       	mov	r15, r1
                    1) * 8));
        /* number of unused bits in the subsequent final octet */
        apdu[len++] = (uint8_t) (8 - remaining_used_bits);
    269c:	9c 2d       	mov	r25, r12
    269e:	99 0f       	add	r25, r25
    26a0:	99 0f       	add	r25, r25
    26a2:	99 0f       	add	r25, r25
    26a4:	98 1b       	sub	r25, r24
    26a6:	f8 01       	movw	r30, r16
    26a8:	91 93       	st	Z+, r25
    26aa:	8f 01       	movw	r16, r30
        for (i = 0; i < used_bytes; i++) {
    26ac:	d1 2c       	mov	r13, r1
    26ae:	dc 14       	cp	r13, r12
    26b0:	59 f0       	breq	.+22     	; 0x26c8 <encode_bitstring+0x66>
            apdu[len++] = byte_reverse_bits(bitstring_octet(bit_string, i));
    26b2:	6d 2d       	mov	r22, r13
    26b4:	ce 01       	movw	r24, r28
    26b6:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <bitstring_octet>
    26ba:	0e 94 58 11 	call	0x22b0	; 0x22b0 <byte_reverse_bits>
    26be:	f8 01       	movw	r30, r16
    26c0:	81 93       	st	Z+, r24
    26c2:	8f 01       	movw	r16, r30
        for (i = 0; i < used_bytes; i++) {
    26c4:	d3 94       	inc	r13
    26c6:	f3 cf       	rjmp	.-26     	; 0x26ae <encode_bitstring+0x4c>
    26c8:	c7 01       	movw	r24, r14
    26ca:	01 96       	adiw	r24, 0x01	; 1
        }
    }

    return len;
}
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	df 90       	pop	r13
    26da:	cf 90       	pop	r12
    26dc:	08 95       	ret

000026de <encode_application_bitstring>:

int encode_application_bitstring(
    uint8_t * apdu,
    BACNET_BIT_STRING * bit_string)
{
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	ec 01       	movw	r28, r24
    26ec:	7b 01       	movw	r14, r22
    int len = 0;
    uint32_t bit_string_encoded_length = 1;     /* 1 for the bits remaining octet */

    /* bit string may use more than 1 octet for the tag, so find out how many */
    bit_string_encoded_length += bitstring_bytes_used(bit_string);
    26ee:	cb 01       	movw	r24, r22
    26f0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <bitstring_bytes_used>
    26f4:	08 2f       	mov	r16, r24
    26f6:	10 e0       	ldi	r17, 0x00	; 0
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	0f 5f       	subi	r16, 0xFF	; 255
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	2f 4f       	sbci	r18, 0xFF	; 255
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    len =
    2704:	40 e0       	ldi	r20, 0x00	; 0
    2706:	68 e0       	ldi	r22, 0x08	; 8
    2708:	ce 01       	movw	r24, r28
    270a:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
    270e:	8c 01       	movw	r16, r24
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_BIT_STRING, false,
        bit_string_encoded_length);
    len += encode_bitstring(&apdu[len], bit_string);
    2710:	b7 01       	movw	r22, r14
    2712:	ce 01       	movw	r24, r28
    2714:	80 0f       	add	r24, r16
    2716:	91 1f       	adc	r25, r17
    2718:	0e 94 31 13 	call	0x2662	; 0x2662 <encode_bitstring>

    return len;
}
    271c:	80 0f       	add	r24, r16
    271e:	91 1f       	adc	r25, r17
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	08 95       	ret

0000272e <decode_object_id>:
/* returns the number of apdu bytes consumed */
int decode_object_id(
    uint8_t * apdu,
    uint16_t * object_type,
    uint32_t * instance)
{
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	00 d0       	rcall	.+0      	; 0x2740 <decode_object_id+0x12>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <decode_object_id+0x14>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	6b 01       	movw	r12, r22
    2748:	7a 01       	movw	r14, r20
    uint32_t value = 0;
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	1a 82       	std	Y+2, r1	; 0x02
    274e:	1b 82       	std	Y+3, r1	; 0x03
    2750:	1c 82       	std	Y+4, r1	; 0x04
    int len = 0;

    len = decode_unsigned32(apdu, &value);
    2752:	be 01       	movw	r22, r28
    2754:	6f 5f       	subi	r22, 0xFF	; 255
    2756:	7f 4f       	sbci	r23, 0xFF	; 255
    2758:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <decode_unsigned32>
    *object_type =
        (uint16_t) (((value >> BACNET_INSTANCE_BITS) & BACNET_MAX_OBJECT));
    275c:	09 81       	ldd	r16, Y+1	; 0x01
    275e:	1a 81       	ldd	r17, Y+2	; 0x02
    2760:	2b 81       	ldd	r18, Y+3	; 0x03
    2762:	3c 81       	ldd	r19, Y+4	; 0x04
    2764:	b9 01       	movw	r22, r18
    2766:	a8 01       	movw	r20, r16
    2768:	e6 e1       	ldi	r30, 0x16	; 22
    276a:	76 95       	lsr	r23
    276c:	67 95       	ror	r22
    276e:	57 95       	ror	r21
    2770:	47 95       	ror	r20
    2772:	ea 95       	dec	r30
    2774:	d1 f7       	brne	.-12     	; 0x276a <decode_object_id+0x3c>
    2776:	53 70       	andi	r21, 0x03	; 3
    *object_type =
    2778:	f6 01       	movw	r30, r12
    277a:	51 83       	std	Z+1, r21	; 0x01
    277c:	40 83       	st	Z, r20
    *instance = (value & BACNET_MAX_INSTANCE);
    277e:	2f 73       	andi	r18, 0x3F	; 63
    2780:	33 27       	eor	r19, r19
    2782:	f7 01       	movw	r30, r14
    2784:	00 83       	st	Z, r16
    2786:	11 83       	std	Z+1, r17	; 0x01
    2788:	22 83       	std	Z+2, r18	; 0x02
    278a:	33 83       	std	Z+3, r19	; 0x03

    return len;
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	ff 90       	pop	r15
    279e:	ef 90       	pop	r14
    27a0:	df 90       	pop	r13
    27a2:	cf 90       	pop	r12
    27a4:	08 95       	ret

000027a6 <decode_object_id_safe>:
int decode_object_id_safe(
    uint8_t * apdu,
    uint32_t len_value,
    uint16_t * object_type,
    uint32_t * instance)
{
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    if (len_value != 4) {
    27aa:	44 30       	cpi	r20, 0x04	; 4
    27ac:	51 05       	cpc	r21, r1
    27ae:	61 05       	cpc	r22, r1
    27b0:	71 05       	cpc	r23, r1
    27b2:	31 f4       	brne	.+12     	; 0x27c0 <decode_object_id_safe+0x1a>
        return 0;
    } else {
        return decode_object_id(apdu, object_type, instance);
    27b4:	a8 01       	movw	r20, r16
    27b6:	b9 01       	movw	r22, r18
    }
}
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
        return decode_object_id(apdu, object_type, instance);
    27bc:	0c 94 97 13 	jmp	0x272e	; 0x272e <decode_object_id>
}
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	08 95       	ret

000027ca <encode_bacnet_object_id>:
/* returns the number of apdu bytes consumed */
int encode_bacnet_object_id(
    uint8_t * apdu,
    int object_type,
    uint32_t instance)
{
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	89 01       	movw	r16, r18
    27d0:	9a 01       	movw	r18, r20
    uint32_t value = 0;
    uint32_t type = 0;
    int len = 0;

    type = (uint32_t) object_type;
    27d2:	ab 01       	movw	r20, r22
    27d4:	66 27       	eor	r22, r22
    27d6:	57 fd       	sbrc	r21, 7
    27d8:	60 95       	com	r22
    27da:	76 2f       	mov	r23, r22
    value =
        ((type & BACNET_MAX_OBJECT) << BACNET_INSTANCE_BITS) | (instance &
    27dc:	f6 e1       	ldi	r31, 0x16	; 22
    27de:	44 0f       	add	r20, r20
    27e0:	55 1f       	adc	r21, r21
    27e2:	66 1f       	adc	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	fa 95       	dec	r31
    27e8:	d1 f7       	brne	.-12     	; 0x27de <encode_bacnet_object_id+0x14>
    27ea:	2f 73       	andi	r18, 0x3F	; 63
    27ec:	33 27       	eor	r19, r19
    value =
    27ee:	40 2b       	or	r20, r16
    27f0:	51 2b       	or	r21, r17
    27f2:	62 2b       	or	r22, r18
    27f4:	73 2b       	or	r23, r19
        BACNET_MAX_INSTANCE);
    len = encode_unsigned32(apdu, value);

    return len;
}
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    len = encode_unsigned32(apdu, value);
    27fa:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <encode_unsigned32>

000027fe <encode_context_object_id>:
int encode_context_object_id(
    uint8_t * apdu,
    uint8_t tag_number,
    int object_type,
    uint32_t instance)
{
    27fe:	af 92       	push	r10
    2800:	bf 92       	push	r11
    2802:	cf 92       	push	r12
    2804:	df 92       	push	r13
    2806:	ef 92       	push	r14
    2808:	ff 92       	push	r15
    280a:	0f 93       	push	r16
    280c:	1f 93       	push	r17
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	ec 01       	movw	r28, r24
    2814:	5a 01       	movw	r10, r20
    2816:	68 01       	movw	r12, r16
    2818:	79 01       	movw	r14, r18
    int len = 0;

    /* length of object id is 4 octets, as per 20.2.14 */

    len = encode_tag(&apdu[0], tag_number, true, 4);
    281a:	04 e0       	ldi	r16, 0x04	; 4
    281c:	10 e0       	ldi	r17, 0x00	; 0
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
    2828:	8c 01       	movw	r16, r24
    len += encode_bacnet_object_id(&apdu[len], object_type, instance);
    282a:	a7 01       	movw	r20, r14
    282c:	96 01       	movw	r18, r12
    282e:	b5 01       	movw	r22, r10
    2830:	ce 01       	movw	r24, r28
    2832:	80 0f       	add	r24, r16
    2834:	91 1f       	adc	r25, r17
    2836:	0e 94 e5 13 	call	0x27ca	; 0x27ca <encode_bacnet_object_id>

    return len;
}
    283a:	80 0f       	add	r24, r16
    283c:	91 1f       	adc	r25, r17
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	08 95       	ret

00002854 <encode_application_object_id>:
/* returns the number of apdu bytes consumed */
int encode_application_object_id(
    uint8_t * apdu,
    int object_type,
    uint32_t instance)
{
    2854:	ef 92       	push	r14
    2856:	ff 92       	push	r15
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	ec 01       	movw	r28, r24
    int len = 0;

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_object_id(&apdu[1], object_type, instance);
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	0e 94 e5 13 	call	0x27ca	; 0x27ca <encode_bacnet_object_id>
    2868:	7c 01       	movw	r14, r24
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_OBJECT_ID, false,
    286a:	8c 01       	movw	r16, r24
    286c:	22 27       	eor	r18, r18
    286e:	17 fd       	sbrc	r17, 7
    2870:	20 95       	com	r18
    2872:	32 2f       	mov	r19, r18
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	6c e0       	ldi	r22, 0x0C	; 12
    2878:	ce 01       	movw	r24, r28
    287a:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
        (uint32_t) len);

    return len;
}
    287e:	8e 0d       	add	r24, r14
    2880:	9f 1d       	adc	r25, r15
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	ff 90       	pop	r15
    288c:	ef 90       	pop	r14
    288e:	08 95       	ret

00002890 <encode_bacnet_character_string_safe>:
    uint8_t * apdu,
    uint32_t max_apdu,
    uint8_t encoding,
    char *pString,
    uint32_t length)
{
    2890:	8f 92       	push	r8
    2892:	9f 92       	push	r9
    2894:	af 92       	push	r10
    2896:	bf 92       	push	r11
    2898:	cf 92       	push	r12
    289a:	df 92       	push	r13
    289c:	ef 92       	push	r14
    289e:	ff 92       	push	r15
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	dc 01       	movw	r26, r24
    28a6:	4a 01       	movw	r8, r20
    28a8:	5b 01       	movw	r10, r22
    uint32_t apdu_len = 1 /*encoding */ ;
    uint32_t i;

    apdu_len += length;
    28aa:	c7 01       	movw	r24, r14
    28ac:	b6 01       	movw	r22, r12
    28ae:	6f 5f       	subi	r22, 0xFF	; 255
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255
    28b2:	8f 4f       	sbci	r24, 0xFF	; 255
    28b4:	9f 4f       	sbci	r25, 0xFF	; 255
    if (apdu && (apdu_len <= max_apdu)) {
    28b6:	10 97       	sbiw	r26, 0x00	; 0
    28b8:	b1 f0       	breq	.+44     	; 0x28e6 <encode_bacnet_character_string_safe+0x56>
    28ba:	86 16       	cp	r8, r22
    28bc:	97 06       	cpc	r9, r23
    28be:	a8 06       	cpc	r10, r24
    28c0:	b9 06       	cpc	r11, r25
    28c2:	88 f0       	brcs	.+34     	; 0x28e6 <encode_bacnet_character_string_safe+0x56>
        apdu[0] = encoding;
    28c4:	2d 93       	st	X+, r18
    28c6:	f8 01       	movw	r30, r16
        for (i = 0; i < length; i++) {
    28c8:	00 e0       	ldi	r16, 0x00	; 0
    28ca:	10 e0       	ldi	r17, 0x00	; 0
    28cc:	98 01       	movw	r18, r16
    28ce:	0c 15       	cp	r16, r12
    28d0:	1d 05       	cpc	r17, r13
    28d2:	2e 05       	cpc	r18, r14
    28d4:	3f 05       	cpc	r19, r15
    28d6:	51 f0       	breq	.+20     	; 0x28ec <encode_bacnet_character_string_safe+0x5c>
            apdu[1 + i] = (uint8_t) pString[i];
    28d8:	41 91       	ld	r20, Z+
    28da:	4d 93       	st	X+, r20
        for (i = 0; i < length; i++) {
    28dc:	0f 5f       	subi	r16, 0xFF	; 255
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	2f 4f       	sbci	r18, 0xFF	; 255
    28e2:	3f 4f       	sbci	r19, 0xFF	; 255
    28e4:	f4 cf       	rjmp	.-24     	; 0x28ce <encode_bacnet_character_string_safe+0x3e>
        }
    } else {
        apdu_len = 0;
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	cb 01       	movw	r24, r22
    }

    return apdu_len;
}
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	cf 90       	pop	r12
    28f8:	bf 90       	pop	r11
    28fa:	af 90       	pop	r10
    28fc:	9f 90       	pop	r9
    28fe:	8f 90       	pop	r8
    2900:	08 95       	ret

00002902 <encode_bacnet_character_string>:

int encode_bacnet_character_string(
    uint8_t * apdu,
    BACNET_CHARACTER_STRING * char_string)
{
    2902:	cf 92       	push	r12
    2904:	df 92       	push	r13
    2906:	ef 92       	push	r14
    2908:	ff 92       	push	r15
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	ec 01       	movw	r28, r24
    2914:	7b 01       	movw	r14, r22
    return (int) encode_bacnet_character_string_safe(apdu, MAX_APDU,
        characterstring_encoding(char_string),
        characterstring_value(char_string),
        characterstring_length(char_string));
    2916:	cb 01       	movw	r24, r22
    2918:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <characterstring_length>
    291c:	6c 01       	movw	r12, r24
    return (int) encode_bacnet_character_string_safe(apdu, MAX_APDU,
    291e:	c7 01       	movw	r24, r14
    2920:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <characterstring_value>
    2924:	8c 01       	movw	r16, r24
    2926:	c7 01       	movw	r24, r14
    2928:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <characterstring_encoding>
    292c:	e1 2c       	mov	r14, r1
    292e:	f1 2c       	mov	r15, r1
    2930:	28 2f       	mov	r18, r24
    2932:	44 e6       	ldi	r20, 0x64	; 100
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	ce 01       	movw	r24, r28
    293c:	0e 94 48 14 	call	0x2890	; 0x2890 <encode_bacnet_character_string_safe>
}
    2940:	cb 01       	movw	r24, r22
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	08 95       	ret

00002954 <encode_application_character_string>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_character_string(
    uint8_t * apdu,
    BACNET_CHARACTER_STRING * char_string)
{
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	ec 01       	movw	r28, r24
    2966:	7b 01       	movw	r14, r22
    int len = 0;
    int string_len = 0;

    string_len =
        (int) characterstring_length(char_string) + 1 /* for encoding */ ;
    2968:	cb 01       	movw	r24, r22
    296a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <characterstring_length>
    string_len =
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	6c 01       	movw	r12, r24
    len =
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_CHARACTER_STRING, false,
    2972:	8c 01       	movw	r16, r24
    2974:	22 27       	eor	r18, r18
    2976:	17 fd       	sbrc	r17, 7
    2978:	20 95       	com	r18
    297a:	32 2f       	mov	r19, r18
    len =
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	67 e0       	ldi	r22, 0x07	; 7
    2980:	ce 01       	movw	r24, r28
    2982:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
    2986:	8c 01       	movw	r16, r24
        (uint32_t) string_len);
    if ((len + string_len) < MAX_APDU) {
    2988:	c8 0e       	add	r12, r24
    298a:	d9 1e       	adc	r13, r25
    298c:	84 e6       	ldi	r24, 0x64	; 100
    298e:	c8 16       	cp	r12, r24
    2990:	d1 04       	cpc	r13, r1
    2992:	4c f4       	brge	.+18     	; 0x29a6 <encode_application_character_string+0x52>
        len += encode_bacnet_character_string(&apdu[len], char_string);
    2994:	b7 01       	movw	r22, r14
    2996:	ce 01       	movw	r24, r28
    2998:	80 0f       	add	r24, r16
    299a:	91 1f       	adc	r25, r17
    299c:	0e 94 81 14 	call	0x2902	; 0x2902 <encode_bacnet_character_string>
    29a0:	80 0f       	add	r24, r16
    29a2:	91 1f       	adc	r25, r17
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <encode_application_character_string+0x56>
    } else {
        len = 0;
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    }

    return len;
}
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	df 90       	pop	r13
    29b8:	cf 90       	pop	r12
    29ba:	08 95       	ret

000029bc <decode_character_string>:
/* returns the number of apdu bytes consumed */
int decode_character_string(
    uint8_t * apdu,
    uint32_t len_value,
    BACNET_CHARACTER_STRING * char_string)
{
    29bc:	cf 92       	push	r12
    29be:	df 92       	push	r13
    29c0:	ef 92       	push	r14
    29c2:	ff 92       	push	r15
    29c4:	fc 01       	movw	r30, r24
    29c6:	6a 01       	movw	r12, r20
    29c8:	7b 01       	movw	r14, r22
    29ca:	c9 01       	movw	r24, r18
    int len = 0;        /* return value */
    bool status = false;

    status =
        characterstring_init(char_string, apdu[0], (char *) &apdu[1],
    29cc:	9a 01       	movw	r18, r20
    29ce:	21 50       	subi	r18, 0x01	; 1
    29d0:	31 09       	sbc	r19, r1
    29d2:	af 01       	movw	r20, r30
    29d4:	4f 5f       	subi	r20, 0xFF	; 255
    29d6:	5f 4f       	sbci	r21, 0xFF	; 255
    status =
    29d8:	60 81       	ld	r22, Z
    29da:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <characterstring_init>
        len_value - 1);
    if (status) {
    29de:	88 23       	and	r24, r24
    29e0:	11 f0       	breq	.+4      	; 0x29e6 <decode_character_string+0x2a>
        len = (int) len_value;
    29e2:	c6 01       	movw	r24, r12
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <decode_character_string+0x2e>
    int len = 0;        /* return value */
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    }

    return len;
}
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	08 95       	ret

000029f4 <decode_unsigned>:
/* returns the number of apdu bytes consumed */
int decode_unsigned(
    uint8_t * apdu,
    uint32_t len_value,
    uint32_t * value)
{
    29f4:	cf 92       	push	r12
    29f6:	df 92       	push	r13
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <decode_unsigned+0x12>
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	6a 01       	movw	r12, r20
    2a0c:	7b 01       	movw	r14, r22
    2a0e:	89 01       	movw	r16, r18
    uint16_t unsigned16_value = 0;
    2a10:	1a 82       	std	Y+2, r1	; 0x02
    2a12:	19 82       	std	Y+1, r1	; 0x01

    if (value) {
    2a14:	21 15       	cp	r18, r1
    2a16:	31 05       	cpc	r19, r1
    2a18:	a9 f1       	breq	.+106    	; 0x2a84 <decode_unsigned+0x90>
        switch (len_value) {
    2a1a:	42 30       	cpi	r20, 0x02	; 2
    2a1c:	51 05       	cpc	r21, r1
    2a1e:	61 05       	cpc	r22, r1
    2a20:	71 05       	cpc	r23, r1
    2a22:	c1 f0       	breq	.+48     	; 0x2a54 <decode_unsigned+0x60>
    2a24:	48 f4       	brcc	.+18     	; 0x2a38 <decode_unsigned+0x44>
    2a26:	41 30       	cpi	r20, 0x01	; 1
    2a28:	51 05       	cpc	r21, r1
    2a2a:	61 05       	cpc	r22, r1
    2a2c:	71 05       	cpc	r23, r1
    2a2e:	29 f5       	brne	.+74     	; 0x2a7a <decode_unsigned+0x86>
            case 1:
                *value = apdu[0];
    2a30:	fc 01       	movw	r30, r24
    2a32:	80 81       	ld	r24, Z
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	15 c0       	rjmp	.+42     	; 0x2a62 <decode_unsigned+0x6e>
        switch (len_value) {
    2a38:	43 30       	cpi	r20, 0x03	; 3
    2a3a:	51 05       	cpc	r21, r1
    2a3c:	61 05       	cpc	r22, r1
    2a3e:	71 05       	cpc	r23, r1
    2a40:	c1 f0       	breq	.+48     	; 0x2a72 <decode_unsigned+0x7e>
    2a42:	44 30       	cpi	r20, 0x04	; 4
    2a44:	51 05       	cpc	r21, r1
    2a46:	61 05       	cpc	r22, r1
    2a48:	71 05       	cpc	r23, r1
    2a4a:	b9 f4       	brne	.+46     	; 0x2a7a <decode_unsigned+0x86>
                break;
            case 3:
                decode_unsigned24(&apdu[0], value);
                break;
            case 4:
                decode_unsigned32(&apdu[0], value);
    2a4c:	b8 01       	movw	r22, r16
    2a4e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <decode_unsigned32>
                break;
    2a52:	18 c0       	rjmp	.+48     	; 0x2a84 <decode_unsigned+0x90>
                decode_unsigned16(&apdu[0], &unsigned16_value);
    2a54:	be 01       	movw	r22, r28
    2a56:	6f 5f       	subi	r22, 0xFF	; 255
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <decode_unsigned16>
                *value = unsigned16_value;
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	a0 e0       	ldi	r26, 0x00	; 0
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	f8 01       	movw	r30, r16
    2a68:	80 83       	st	Z, r24
    2a6a:	91 83       	std	Z+1, r25	; 0x01
    2a6c:	a2 83       	std	Z+2, r26	; 0x02
    2a6e:	b3 83       	std	Z+3, r27	; 0x03
                break;
    2a70:	09 c0       	rjmp	.+18     	; 0x2a84 <decode_unsigned+0x90>
                decode_unsigned24(&apdu[0], value);
    2a72:	b8 01       	movw	r22, r16
    2a74:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <decode_unsigned24>
                break;
    2a78:	05 c0       	rjmp	.+10     	; 0x2a84 <decode_unsigned+0x90>
            default:
                *value = 0;
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	10 82       	st	Z, r1
    2a7e:	11 82       	std	Z+1, r1	; 0x01
    2a80:	12 82       	std	Z+2, r1	; 0x02
    2a82:	13 82       	std	Z+3, r1	; 0x03
                break;
        }
    }

    return (int) len_value;
}
    2a84:	c6 01       	movw	r24, r12
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	08 95       	ret

00002a9c <encode_bacnet_unsigned>:
    uint8_t * apdu,
    uint32_t value)
{
    int len = 0;        /* return value */

    if (value < 0x100) {
    2a9c:	4f 3f       	cpi	r20, 0xFF	; 255
    2a9e:	51 05       	cpc	r21, r1
    2aa0:	61 05       	cpc	r22, r1
    2aa2:	71 05       	cpc	r23, r1
    2aa4:	a1 f0       	breq	.+40     	; 0x2ace <encode_bacnet_unsigned+0x32>
    2aa6:	98 f0       	brcs	.+38     	; 0x2ace <encode_bacnet_unsigned+0x32>
        apdu[0] = (uint8_t) value;
        len = 1;
    } else if (value < 0x10000) {
    2aa8:	41 15       	cp	r20, r1
    2aaa:	51 05       	cpc	r21, r1
    2aac:	f1 e0       	ldi	r31, 0x01	; 1
    2aae:	6f 07       	cpc	r22, r31
    2ab0:	71 05       	cpc	r23, r1
    2ab2:	18 f4       	brcc	.+6      	; 0x2aba <encode_bacnet_unsigned+0x1e>
        len = encode_unsigned16(&apdu[0], (uint16_t) value);
    2ab4:	ba 01       	movw	r22, r20
    2ab6:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <encode_unsigned16>
    } else if (value < 0x1000000) {
    2aba:	41 15       	cp	r20, r1
    2abc:	51 05       	cpc	r21, r1
    2abe:	61 05       	cpc	r22, r1
    2ac0:	21 e0       	ldi	r18, 0x01	; 1
    2ac2:	72 07       	cpc	r23, r18
    2ac4:	10 f4       	brcc	.+4      	; 0x2aca <encode_bacnet_unsigned+0x2e>
        len = encode_unsigned24(&apdu[0], value);
    2ac6:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <encode_unsigned24>
    } else {
        len = encode_unsigned32(&apdu[0], value);
    2aca:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <encode_unsigned32>
        apdu[0] = (uint8_t) value;
    2ace:	fc 01       	movw	r30, r24
    2ad0:	40 83       	st	Z, r20
    }

    return len;
}
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	08 95       	ret

00002ad8 <encode_context_unsigned>:
/* returns the number of apdu bytes consumed */
int encode_context_unsigned(
    uint8_t * apdu,
    uint8_t tag_number,
    uint32_t value)
{
    2ad8:	cf 92       	push	r12
    2ada:	df 92       	push	r13
    2adc:	ef 92       	push	r14
    2ade:	ff 92       	push	r15
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	ec 01       	movw	r28, r24
    2aea:	69 01       	movw	r12, r18
    2aec:	7a 01       	movw	r14, r20
    int len = 0;

    /* length of unsigned is variable, as per 20.2.4 */
    if (value < 0x100) {
    2aee:	2f 3f       	cpi	r18, 0xFF	; 255
    2af0:	31 05       	cpc	r19, r1
    2af2:	41 05       	cpc	r20, r1
    2af4:	51 05       	cpc	r21, r1
    2af6:	81 f0       	breq	.+32     	; 0x2b18 <encode_context_unsigned+0x40>
    2af8:	78 f0       	brcs	.+30     	; 0x2b18 <encode_context_unsigned+0x40>
        len = 1;
    } else if (value < 0x10000) {
    2afa:	21 15       	cp	r18, r1
    2afc:	31 05       	cpc	r19, r1
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	48 07       	cpc	r20, r24
    2b02:	51 05       	cpc	r21, r1
    2b04:	60 f0       	brcs	.+24     	; 0x2b1e <encode_context_unsigned+0x46>
        len = 2;
    } else if (value < 0x1000000) {
    2b06:	21 15       	cp	r18, r1
    2b08:	31 05       	cpc	r19, r1
    2b0a:	41 05       	cpc	r20, r1
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	58 07       	cpc	r21, r24
    2b10:	48 f4       	brcc	.+18     	; 0x2b24 <encode_context_unsigned+0x4c>
        len = 3;
    2b12:	03 e0       	ldi	r16, 0x03	; 3
    2b14:	10 e0       	ldi	r17, 0x00	; 0
    2b16:	08 c0       	rjmp	.+16     	; 0x2b28 <encode_context_unsigned+0x50>
        len = 1;
    2b18:	01 e0       	ldi	r16, 0x01	; 1
    2b1a:	10 e0       	ldi	r17, 0x00	; 0
    2b1c:	05 c0       	rjmp	.+10     	; 0x2b28 <encode_context_unsigned+0x50>
        len = 2;
    2b1e:	02 e0       	ldi	r16, 0x02	; 2
    2b20:	10 e0       	ldi	r17, 0x00	; 0
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <encode_context_unsigned+0x50>
    } else {
        len = 4;
    2b24:	04 e0       	ldi	r16, 0x04	; 4
    2b26:	10 e0       	ldi	r17, 0x00	; 0
    }

    len = encode_tag(&apdu[0], tag_number, true, (uint32_t) len);
    2b28:	22 27       	eor	r18, r18
    2b2a:	17 fd       	sbrc	r17, 7
    2b2c:	20 95       	com	r18
    2b2e:	32 2f       	mov	r19, r18
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	ce 01       	movw	r24, r28
    2b34:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
    2b38:	8c 01       	movw	r16, r24
    len += encode_bacnet_unsigned(&apdu[len], value);
    2b3a:	b7 01       	movw	r22, r14
    2b3c:	a6 01       	movw	r20, r12
    2b3e:	ce 01       	movw	r24, r28
    2b40:	80 0f       	add	r24, r16
    2b42:	91 1f       	adc	r25, r17
    2b44:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <encode_bacnet_unsigned>

    return len;
}
    2b48:	80 0f       	add	r24, r16
    2b4a:	91 1f       	adc	r25, r17
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	08 95       	ret

00002b5e <encode_application_unsigned>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_unsigned(
    uint8_t * apdu,
    uint32_t value)
{
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	ec 01       	movw	r28, r24
    int len = 0;

    len = encode_bacnet_unsigned(&apdu[1], value);
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <encode_bacnet_unsigned>
    2b72:	7c 01       	movw	r14, r24
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_UNSIGNED_INT, false,
    2b74:	8c 01       	movw	r16, r24
    2b76:	22 27       	eor	r18, r18
    2b78:	17 fd       	sbrc	r17, 7
    2b7a:	20 95       	com	r18
    2b7c:	32 2f       	mov	r19, r18
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	62 e0       	ldi	r22, 0x02	; 2
    2b82:	ce 01       	movw	r24, r28
    2b84:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
        (uint32_t) len);

    return len;
}
    2b88:	8e 0d       	add	r24, r14
    2b8a:	9f 1d       	adc	r25, r15
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret

00002b9a <decode_enumerated>:
/* returns the number of apdu bytes consumed */
int decode_enumerated(
    uint8_t * apdu,
    uint32_t len_value,
    uint32_t * value)
{
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <decode_enumerated+0xa>
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <decode_enumerated+0xc>
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	89 01       	movw	r16, r18
    uint32_t unsigned_value = 0;
    2bac:	19 82       	std	Y+1, r1	; 0x01
    2bae:	1a 82       	std	Y+2, r1	; 0x02
    2bb0:	1b 82       	std	Y+3, r1	; 0x03
    2bb2:	1c 82       	std	Y+4, r1	; 0x04
    int len;

    len = decode_unsigned(apdu, len_value, &unsigned_value);
    2bb4:	9e 01       	movw	r18, r28
    2bb6:	2f 5f       	subi	r18, 0xFF	; 255
    2bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bba:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <decode_unsigned>
    if (value) {
    2bbe:	01 15       	cp	r16, r1
    2bc0:	11 05       	cpc	r17, r1
    2bc2:	49 f0       	breq	.+18     	; 0x2bd6 <decode_enumerated+0x3c>
        *value = unsigned_value;
    2bc4:	49 81       	ldd	r20, Y+1	; 0x01
    2bc6:	5a 81       	ldd	r21, Y+2	; 0x02
    2bc8:	6b 81       	ldd	r22, Y+3	; 0x03
    2bca:	7c 81       	ldd	r23, Y+4	; 0x04
    2bcc:	f8 01       	movw	r30, r16
    2bce:	40 83       	st	Z, r20
    2bd0:	51 83       	std	Z+1, r21	; 0x01
    2bd2:	62 83       	std	Z+2, r22	; 0x02
    2bd4:	73 83       	std	Z+3, r23	; 0x03
    }

    return len;
}
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	08 95       	ret

00002be8 <encode_application_enumerated>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_enumerated(
    uint8_t * apdu,
    uint32_t value)
{
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	ec 01       	movw	r28, r24
    return encode_bacnet_unsigned(apdu, value);
    2bf6:	01 96       	adiw	r24, 0x01	; 1
    2bf8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <encode_bacnet_unsigned>
    2bfc:	7c 01       	movw	r14, r24
    int len = 0;        /* return value */

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_enumerated(&apdu[1], value);
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_ENUMERATED, false,
    2bfe:	8c 01       	movw	r16, r24
    2c00:	22 27       	eor	r18, r18
    2c02:	17 fd       	sbrc	r17, 7
    2c04:	20 95       	com	r18
    2c06:	32 2f       	mov	r19, r18
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	69 e0       	ldi	r22, 0x09	; 9
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
        (uint32_t) len);

    return len;
}
    2c12:	8e 0d       	add	r24, r14
    2c14:	9f 1d       	adc	r25, r15
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	08 95       	ret

00002c24 <encode_context_enumerated>:
/* returns the number of apdu bytes consumed */
int encode_context_enumerated(
    uint8_t * apdu,
    uint8_t tag_number,
    uint32_t value)
{
    2c24:	cf 92       	push	r12
    2c26:	df 92       	push	r13
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	ec 01       	movw	r28, r24
    2c36:	69 01       	movw	r12, r18
    2c38:	7a 01       	movw	r14, r20
    int len = 0;        /* return value */

    /* length of enumerated is variable, as per 20.2.11 */
    if (value < 0x100) {
    2c3a:	2f 3f       	cpi	r18, 0xFF	; 255
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	41 05       	cpc	r20, r1
    2c40:	51 05       	cpc	r21, r1
    2c42:	81 f0       	breq	.+32     	; 0x2c64 <encode_context_enumerated+0x40>
    2c44:	78 f0       	brcs	.+30     	; 0x2c64 <encode_context_enumerated+0x40>
        len = 1;
    } else if (value < 0x10000) {
    2c46:	21 15       	cp	r18, r1
    2c48:	31 05       	cpc	r19, r1
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	48 07       	cpc	r20, r24
    2c4e:	51 05       	cpc	r21, r1
    2c50:	60 f0       	brcs	.+24     	; 0x2c6a <encode_context_enumerated+0x46>
        len = 2;
    } else if (value < 0x1000000) {
    2c52:	21 15       	cp	r18, r1
    2c54:	31 05       	cpc	r19, r1
    2c56:	41 05       	cpc	r20, r1
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	58 07       	cpc	r21, r24
    2c5c:	48 f4       	brcc	.+18     	; 0x2c70 <encode_context_enumerated+0x4c>
        len = 3;
    2c5e:	03 e0       	ldi	r16, 0x03	; 3
    2c60:	10 e0       	ldi	r17, 0x00	; 0
    2c62:	08 c0       	rjmp	.+16     	; 0x2c74 <encode_context_enumerated+0x50>
        len = 1;
    2c64:	01 e0       	ldi	r16, 0x01	; 1
    2c66:	10 e0       	ldi	r17, 0x00	; 0
    2c68:	05 c0       	rjmp	.+10     	; 0x2c74 <encode_context_enumerated+0x50>
        len = 2;
    2c6a:	02 e0       	ldi	r16, 0x02	; 2
    2c6c:	10 e0       	ldi	r17, 0x00	; 0
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <encode_context_enumerated+0x50>
    } else {
        len = 4;
    2c70:	04 e0       	ldi	r16, 0x04	; 4
    2c72:	10 e0       	ldi	r17, 0x00	; 0
    }

    len = encode_tag(&apdu[0], tag_number, true, (uint32_t) len);
    2c74:	22 27       	eor	r18, r18
    2c76:	17 fd       	sbrc	r17, 7
    2c78:	20 95       	com	r18
    2c7a:	32 2f       	mov	r19, r18
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	ce 01       	movw	r24, r28
    2c80:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
    2c84:	8c 01       	movw	r16, r24
    return encode_bacnet_unsigned(apdu, value);
    2c86:	b7 01       	movw	r22, r14
    2c88:	a6 01       	movw	r20, r12
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	80 0f       	add	r24, r16
    2c8e:	91 1f       	adc	r25, r17
    2c90:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <encode_bacnet_unsigned>
    len += encode_bacnet_enumerated(&apdu[len], value);

    return len;
}
    2c94:	80 0f       	add	r24, r16
    2c96:	91 1f       	adc	r25, r17
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	1f 91       	pop	r17
    2c9e:	0f 91       	pop	r16
    2ca0:	ff 90       	pop	r15
    2ca2:	ef 90       	pop	r14
    2ca4:	df 90       	pop	r13
    2ca6:	cf 90       	pop	r12
    2ca8:	08 95       	ret

00002caa <encode_application_real>:
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_real(
    uint8_t * apdu,
    float value)
{
    2caa:	ef 92       	push	r14
    2cac:	ff 92       	push	r15
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	ec 01       	movw	r28, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	ba 01       	movw	r22, r20
    int len = 0;

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_real(value, &apdu[1]);
    2cbc:	ae 01       	movw	r20, r28
    2cbe:	4f 5f       	subi	r20, 0xFF	; 255
    2cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc2:	0e 94 12 17 	call	0x2e24	; 0x2e24 <encode_bacnet_real>
    2cc6:	7c 01       	movw	r14, r24
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_REAL, false,
    2cc8:	8c 01       	movw	r16, r24
    2cca:	22 27       	eor	r18, r18
    2ccc:	17 fd       	sbrc	r17, 7
    2cce:	20 95       	com	r18
    2cd0:	32 2f       	mov	r19, r18
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	64 e0       	ldi	r22, 0x04	; 4
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	0e 94 a5 11 	call	0x234a	; 0x234a <encode_tag>
        (uint32_t) len);

    return len;
}
    2cdc:	8e 0d       	add	r24, r14
    2cde:	9f 1d       	adc	r25, r15
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	08 95       	ret

00002cee <encode_simple_ack>:
/* returns the number of apdu bytes consumed */
int encode_simple_ack(
    uint8_t * apdu,
    uint8_t invoke_id,
    uint8_t service_choice)
{
    2cee:	fc 01       	movw	r30, r24
    apdu[0] = PDU_TYPE_SIMPLE_ACK;
    2cf0:	80 e2       	ldi	r24, 0x20	; 32
    2cf2:	80 83       	st	Z, r24
    apdu[1] = invoke_id;
    2cf4:	61 83       	std	Z+1, r22	; 0x01
    apdu[2] = service_choice;
    2cf6:	42 83       	std	Z+2, r20	; 0x02

    return 3;
}
    2cf8:	83 e0       	ldi	r24, 0x03	; 3
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	08 95       	ret

00002cfe <encode_unsigned16>:

int encode_unsigned16(
    uint8_t * apdu,
    uint16_t value)
{
    apdu[0] = (uint8_t) ((value & 0xff00) >> 8);
    2cfe:	fc 01       	movw	r30, r24
    2d00:	70 83       	st	Z, r23
    apdu[1] = (uint8_t) (value & 0x00ff);
    2d02:	61 83       	std	Z+1, r22	; 0x01

    return 2;
}
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	08 95       	ret

00002d0a <decode_unsigned16>:

int decode_unsigned16(
    uint8_t * apdu,
    uint16_t * value)
{
    if (value) {
    2d0a:	61 15       	cp	r22, r1
    2d0c:	71 05       	cpc	r23, r1
    2d0e:	71 f0       	breq	.+28     	; 0x2d2c <decode_unsigned16+0x22>
        *value = (uint16_t) ((((uint16_t) apdu[0]) << 8) & 0xff00);
    2d10:	fc 01       	movw	r30, r24
    2d12:	20 81       	ld	r18, Z
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	32 2f       	mov	r19, r18
    2d18:	22 27       	eor	r18, r18
    2d1a:	fb 01       	movw	r30, r22
    2d1c:	31 83       	std	Z+1, r19	; 0x01
    2d1e:	20 83       	st	Z, r18
        *value |= ((uint16_t) (((uint16_t) apdu[1]) & 0x00ff));
    2d20:	fc 01       	movw	r30, r24
    2d22:	81 81       	ldd	r24, Z+1	; 0x01
    2d24:	28 2b       	or	r18, r24
    2d26:	fb 01       	movw	r30, r22
    2d28:	31 83       	std	Z+1, r19	; 0x01
    2d2a:	20 83       	st	Z, r18
    }

    return 2;
}
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	08 95       	ret

00002d32 <encode_unsigned24>:

int encode_unsigned24(
    uint8_t * apdu,
    uint32_t value)
{
    2d32:	fc 01       	movw	r30, r24
    apdu[0] = (uint8_t) ((value & 0xff0000) >> 16);
    2d34:	60 83       	st	Z, r22
    apdu[1] = (uint8_t) ((value & 0x00ff00) >> 8);
    2d36:	51 83       	std	Z+1, r21	; 0x01
    apdu[2] = (uint8_t) (value & 0x0000ff);
    2d38:	42 83       	std	Z+2, r20	; 0x02

    return 3;
}
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	08 95       	ret

00002d40 <decode_unsigned24>:

int decode_unsigned24(
    uint8_t * apdu,
    uint32_t * value)
{
    2d40:	dc 01       	movw	r26, r24
    2d42:	fb 01       	movw	r30, r22
    if (value) {
    2d44:	30 97       	sbiw	r30, 0x00	; 0
    2d46:	d1 f0       	breq	.+52     	; 0x2d7c <decode_unsigned24+0x3c>
        *value = ((uint32_t) ((((uint32_t) apdu[0]) << 16) & 0x00ff0000));
    2d48:	4c 91       	ld	r20, X
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	ba 01       	movw	r22, r20
    2d52:	55 27       	eor	r21, r21
    2d54:	44 27       	eor	r20, r20
    2d56:	40 83       	st	Z, r20
    2d58:	51 83       	std	Z+1, r21	; 0x01
    2d5a:	62 83       	std	Z+2, r22	; 0x02
    2d5c:	73 83       	std	Z+3, r23	; 0x03
        *value |= (uint32_t) ((((uint32_t) apdu[1]) << 8) & 0x0000ff00);
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	8c 91       	ld	r24, X
    2d62:	11 97       	sbiw	r26, 0x01	; 1
    2d64:	58 2b       	or	r21, r24
    2d66:	40 83       	st	Z, r20
    2d68:	51 83       	std	Z+1, r21	; 0x01
    2d6a:	62 83       	std	Z+2, r22	; 0x02
    2d6c:	73 83       	std	Z+3, r23	; 0x03
        *value |= ((uint32_t) (((uint32_t) apdu[2]) & 0x000000ff));
    2d6e:	12 96       	adiw	r26, 0x02	; 2
    2d70:	8c 91       	ld	r24, X
    2d72:	48 2b       	or	r20, r24
    2d74:	40 83       	st	Z, r20
    2d76:	51 83       	std	Z+1, r21	; 0x01
    2d78:	62 83       	std	Z+2, r22	; 0x02
    2d7a:	73 83       	std	Z+3, r23	; 0x03
    }

    return 3;
}
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	08 95       	ret

00002d82 <encode_unsigned32>:

int encode_unsigned32(
    uint8_t * apdu,
    uint32_t value)
{
    2d82:	fc 01       	movw	r30, r24
    apdu[0] = (uint8_t) ((value & 0xff000000) >> 24);
    2d84:	70 83       	st	Z, r23
    apdu[1] = (uint8_t) ((value & 0x00ff0000) >> 16);
    2d86:	61 83       	std	Z+1, r22	; 0x01
    apdu[2] = (uint8_t) ((value & 0x0000ff00) >> 8);
    2d88:	52 83       	std	Z+2, r21	; 0x02
    apdu[3] = (uint8_t) (value & 0x000000ff);
    2d8a:	43 83       	std	Z+3, r20	; 0x03

    return 4;
}
    2d8c:	84 e0       	ldi	r24, 0x04	; 4
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	08 95       	ret

00002d92 <decode_unsigned32>:

int decode_unsigned32(
    uint8_t * apdu,
    uint32_t * value)
{
    2d92:	fc 01       	movw	r30, r24
    2d94:	db 01       	movw	r26, r22
    if (value) {
    2d96:	10 97       	sbiw	r26, 0x00	; 0
    2d98:	11 f1       	breq	.+68     	; 0x2dde <decode_unsigned32+0x4c>
        *value = ((uint32_t) ((((uint32_t) apdu[0]) << 24) & 0xff000000));
    2d9a:	40 81       	ld	r20, Z
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	70 e0       	ldi	r23, 0x00	; 0
    2da2:	74 2f       	mov	r23, r20
    2da4:	66 27       	eor	r22, r22
    2da6:	55 27       	eor	r21, r21
    2da8:	44 27       	eor	r20, r20
    2daa:	4d 93       	st	X+, r20
    2dac:	5d 93       	st	X+, r21
    2dae:	6d 93       	st	X+, r22
    2db0:	7c 93       	st	X, r23
    2db2:	13 97       	sbiw	r26, 0x03	; 3
        *value |= ((uint32_t) ((((uint32_t) apdu[1]) << 16) & 0x00ff0000));
    2db4:	81 81       	ldd	r24, Z+1	; 0x01
    2db6:	68 2b       	or	r22, r24
    2db8:	4d 93       	st	X+, r20
    2dba:	5d 93       	st	X+, r21
    2dbc:	6d 93       	st	X+, r22
    2dbe:	7c 93       	st	X, r23
    2dc0:	13 97       	sbiw	r26, 0x03	; 3
        *value |= ((uint32_t) ((((uint32_t) apdu[2]) << 8) & 0x0000ff00));
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	58 2b       	or	r21, r24
    2dc6:	4d 93       	st	X+, r20
    2dc8:	5d 93       	st	X+, r21
    2dca:	6d 93       	st	X+, r22
    2dcc:	7c 93       	st	X, r23
    2dce:	13 97       	sbiw	r26, 0x03	; 3
        *value |= ((uint32_t) (((uint32_t) apdu[3]) & 0x000000ff));
    2dd0:	83 81       	ldd	r24, Z+3	; 0x03
    2dd2:	48 2b       	or	r20, r24
    2dd4:	4d 93       	st	X+, r20
    2dd6:	5d 93       	st	X+, r21
    2dd8:	6d 93       	st	X+, r22
    2dda:	7c 93       	st	X, r23
    2ddc:	13 97       	sbiw	r26, 0x03	; 3
    }

    return 4;
}
    2dde:	84 e0       	ldi	r24, 0x04	; 4
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	08 95       	ret

00002de4 <decode_real>:
/* from clause 20.2.6 Encoding of a Real Number Value */
/* returns the number of apdu bytes consumed */
int decode_real(
    uint8_t * apdu,
    float *real_value)
{
    2de4:	fc 01       	movw	r30, r24
    my_data.byte[1] = apdu[2];
    my_data.byte[2] = apdu[1];
    my_data.byte[3] = apdu[0];
#endif

    *real_value = my_data.real_value;
    2de6:	53 81       	ldd	r21, Z+3	; 0x03
    2de8:	42 81       	ldd	r20, Z+2	; 0x02
    2dea:	31 81       	ldd	r19, Z+1	; 0x01
    2dec:	20 81       	ld	r18, Z
    2dee:	85 2f       	mov	r24, r21
    2df0:	94 2f       	mov	r25, r20
    2df2:	a3 2f       	mov	r26, r19
    2df4:	b2 2f       	mov	r27, r18
    2df6:	fb 01       	movw	r30, r22
    2df8:	80 83       	st	Z, r24
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	a2 83       	std	Z+2, r26	; 0x02
    2dfe:	b3 83       	std	Z+3, r27	; 0x03

    return 4;
}
    2e00:	84 e0       	ldi	r24, 0x04	; 4
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	08 95       	ret

00002e06 <decode_real_safe>:
int decode_real_safe(
    uint8_t * apdu,
    uint32_t len_value,
    float *real_value)
{
    if (len_value != 4) {
    2e06:	44 30       	cpi	r20, 0x04	; 4
    2e08:	51 05       	cpc	r21, r1
    2e0a:	61 05       	cpc	r22, r1
    2e0c:	71 05       	cpc	r23, r1
    2e0e:	19 f4       	brne	.+6      	; 0x2e16 <decode_real_safe+0x10>
        *real_value = 0.0f;
        return (int) len_value;
    } else {
        return decode_real(apdu, real_value);
    2e10:	b9 01       	movw	r22, r18
    2e12:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <decode_real>
        *real_value = 0.0f;
    2e16:	f9 01       	movw	r30, r18
    2e18:	10 82       	st	Z, r1
    2e1a:	11 82       	std	Z+1, r1	; 0x01
    2e1c:	12 82       	std	Z+2, r1	; 0x02
    2e1e:	13 82       	std	Z+3, r1	; 0x03
    }
}
    2e20:	ca 01       	movw	r24, r20
    2e22:	08 95       	ret

00002e24 <encode_bacnet_real>:
/* from clause 20.2.6 Encoding of a Real Number Value */
/* returns the number of apdu bytes consumed */
int encode_bacnet_real(
    float value,
    uint8_t * apdu)
{
    2e24:	fa 01       	movw	r30, r20
    apdu[0] = my_data.byte[0];
    apdu[1] = my_data.byte[1];
    apdu[2] = my_data.byte[2];
    apdu[3] = my_data.byte[3];
#else
    apdu[0] = my_data.byte[3];
    2e26:	90 83       	st	Z, r25
    apdu[1] = my_data.byte[2];
    2e28:	81 83       	std	Z+1, r24	; 0x01
    apdu[2] = my_data.byte[1];
    2e2a:	72 83       	std	Z+2, r23	; 0x02
    apdu[3] = my_data.byte[0];
    2e2c:	63 83       	std	Z+3, r22	; 0x03
#endif

    return 4;
}
    2e2e:	84 e0       	ldi	r24, 0x04	; 4
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	08 95       	ret

00002e34 <bitstring_init>:
void bitstring_init(
    BACNET_BIT_STRING * bit_string)
{
    int i;

    bit_string->bits_used = 0;
    2e34:	fc 01       	movw	r30, r24
    2e36:	10 82       	st	Z, r1
    2e38:	21 e0       	ldi	r18, 0x01	; 1
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	e2 0f       	add	r30, r18
    2e40:	f3 1f       	adc	r31, r19
    for (i = 0; i < MAX_BITSTRING_BYTES; i++) {
        bit_string->value[i] = 0;
    2e42:	10 82       	st	Z, r1
    2e44:	2f 5f       	subi	r18, 0xFF	; 255
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i = 0; i < MAX_BITSTRING_BYTES; i++) {
    2e48:	20 31       	cpi	r18, 0x10	; 16
    2e4a:	31 05       	cpc	r19, r1
    2e4c:	b9 f7       	brne	.-18     	; 0x2e3c <bitstring_init+0x8>
    }
}
    2e4e:	08 95       	ret

00002e50 <bitstring_set_bit>:

void bitstring_set_bit(
    BACNET_BIT_STRING * bit_string,
    uint8_t bit_number,
    bool value)
{
    2e50:	fc 01       	movw	r30, r24
    uint8_t byte_number = bit_number / 8;
    2e52:	56 2f       	mov	r21, r22
    2e54:	56 95       	lsr	r21
    2e56:	56 95       	lsr	r21
    2e58:	56 95       	lsr	r21
    uint8_t bit_mask = 1;

    if (byte_number < MAX_BITSTRING_BYTES) {
    2e5a:	5f 30       	cpi	r21, 0x0F	; 15
    2e5c:	08 f5       	brcc	.+66     	; 0x2ea0 <bitstring_set_bit+0x50>
        /* set max bits used */
        if (bit_string->bits_used < (bit_number + 1)) {
    2e5e:	86 2f       	mov	r24, r22
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	20 81       	ld	r18, Z
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	82 17       	cp	r24, r18
    2e68:	93 07       	cpc	r25, r19
    2e6a:	14 f0       	brlt	.+4      	; 0x2e70 <bitstring_set_bit+0x20>
            bit_string->bits_used = bit_number + 1;
    2e6c:	6f 5f       	subi	r22, 0xFF	; 255
    2e6e:	60 83       	st	Z, r22
        }
        bit_mask = bit_mask << (bit_number - (byte_number * 8));
    2e70:	28 e0       	ldi	r18, 0x08	; 8
    2e72:	52 9f       	mul	r21, r18
    2e74:	80 19       	sub	r24, r0
    2e76:	91 09       	sbc	r25, r1
    2e78:	11 24       	eor	r1, r1
    2e7a:	21 e0       	ldi	r18, 0x01	; 1
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	08 2e       	mov	r0, r24
    2e80:	01 c0       	rjmp	.+2      	; 0x2e84 <bitstring_set_bit+0x34>
    2e82:	22 0f       	add	r18, r18
    2e84:	0a 94       	dec	r0
    2e86:	ea f7       	brpl	.-6      	; 0x2e82 <bitstring_set_bit+0x32>
    2e88:	e5 0f       	add	r30, r21
    2e8a:	f1 1d       	adc	r31, r1
        if (value) {
    2e8c:	44 23       	and	r20, r20
    2e8e:	21 f0       	breq	.+8      	; 0x2e98 <bitstring_set_bit+0x48>
            bit_string->value[byte_number] |= bit_mask;
    2e90:	81 81       	ldd	r24, Z+1	; 0x01
    2e92:	82 2b       	or	r24, r18
    2e94:	81 83       	std	Z+1, r24	; 0x01
    2e96:	08 95       	ret
        } else {
            bit_string->value[byte_number] &= (~(bit_mask));
    2e98:	20 95       	com	r18
    2e9a:	81 81       	ldd	r24, Z+1	; 0x01
    2e9c:	28 23       	and	r18, r24
    2e9e:	21 83       	std	Z+1, r18	; 0x01
    2ea0:	08 95       	ret

00002ea2 <bitstring_bits_used>:

uint8_t bitstring_bits_used(
    BACNET_BIT_STRING * bit_string)
{
    return bit_string->bits_used;
}
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	80 81       	ld	r24, Z
    2ea6:	08 95       	ret

00002ea8 <bitstring_bytes_used>:
{
    uint8_t len = 0;    /* return value */
    uint8_t used_bytes = 0;
    uint8_t last_bit = 0;

    if (bit_string->bits_used) {
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	80 81       	ld	r24, Z
    2eac:	88 23       	and	r24, r24
    2eae:	31 f0       	breq	.+12     	; 0x2ebc <bitstring_bytes_used+0x14>
        last_bit = bit_string->bits_used - 1;
    2eb0:	81 50       	subi	r24, 0x01	; 1
        used_bytes = last_bit / 8;
    2eb2:	86 95       	lsr	r24
    2eb4:	86 95       	lsr	r24
    2eb6:	86 95       	lsr	r24
        /* add one for the first byte */
        used_bytes++;
    2eb8:	8f 5f       	subi	r24, 0xFF	; 255
    2eba:	08 95       	ret
    uint8_t len = 0;    /* return value */
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
        len = used_bytes;
    }

    return len;
}
    2ebe:	08 95       	ret

00002ec0 <bitstring_octet>:
    BACNET_BIT_STRING * bit_string,
    uint8_t octet_index)
{
    uint8_t octet = 0;

    if (bit_string) {
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	39 f0       	breq	.+14     	; 0x2ed2 <bitstring_octet+0x12>
        if (octet_index < MAX_BITSTRING_BYTES) {
    2ec4:	6f 30       	cpi	r22, 0x0F	; 15
    2ec6:	28 f4       	brcc	.+10     	; 0x2ed2 <bitstring_octet+0x12>
            octet = bit_string->value[octet_index];
    2ec8:	fc 01       	movw	r30, r24
    2eca:	e6 0f       	add	r30, r22
    2ecc:	f1 1d       	adc	r31, r1
    2ece:	81 81       	ldd	r24, Z+1	; 0x01
    2ed0:	08 95       	ret
    uint8_t octet = 0;
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return octet;
}
    2ed4:	08 95       	ret

00002ed6 <characterstring_init>:
bool characterstring_init(
    BACNET_CHARACTER_STRING * char_string,
    uint8_t encoding,
    const char *value,
    size_t length)
{
    2ed6:	fc 01       	movw	r30, r24
    bool status = false;        /* return value */
    size_t i;   /* counter */

    if (char_string) {
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	11 f4       	brne	.+4      	; 0x2ee0 <characterstring_init+0xa>
    bool status = false;        /* return value */
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	08 95       	ret
        char_string->length = 0;
    2ee0:	11 82       	std	Z+1, r1	; 0x01
    2ee2:	10 82       	st	Z, r1
        char_string->encoding = encoding;
    2ee4:	62 83       	std	Z+2, r22	; 0x02
        /* save a byte at the end for NULL -
           note: assumes printable characters */
        if (length <= CHARACTER_STRING_CAPACITY) {
    2ee6:	2e 35       	cpi	r18, 0x5E	; 94
    2ee8:	31 05       	cpc	r19, r1
    2eea:	c0 f7       	brcc	.-16     	; 0x2edc <characterstring_init+0x6>
            if (value) {
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	41 15       	cp	r20, r1
    2ef2:	51 05       	cpc	r21, r1
    2ef4:	a1 f4       	brne	.+40     	; 0x2f1e <characterstring_init+0x48>
    2ef6:	df 01       	movw	r26, r30
    2ef8:	a8 0f       	add	r26, r24
    2efa:	b9 1f       	adc	r27, r25
                        char_string->value[i] = 0;
                    }
                }
            } else {
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
                    char_string->value[i] = 0;
    2efc:	13 96       	adiw	r26, 0x03	; 3
    2efe:	1c 92       	st	X, r1
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
    2f00:	01 96       	adiw	r24, 0x01	; 1
    2f02:	8e 35       	cpi	r24, 0x5E	; 94
    2f04:	91 05       	cpc	r25, r1
    2f06:	b9 f7       	brne	.-18     	; 0x2ef6 <characterstring_init+0x20>
    bool status = false;        /* return value */
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	08 95       	ret
    2f0c:	df 01       	movw	r26, r30
    2f0e:	a8 0f       	add	r26, r24
    2f10:	b9 1f       	adc	r27, r25
                        char_string->value[i] = 0;
    2f12:	13 96       	adiw	r26, 0x03	; 3
    2f14:	1c 92       	st	X, r1
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	8e 35       	cpi	r24, 0x5E	; 94
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	a9 f3       	breq	.-22     	; 0x2f08 <characterstring_init+0x32>
                    if (i < length) {
    2f1e:	82 17       	cp	r24, r18
    2f20:	93 07       	cpc	r25, r19
    2f22:	a0 f7       	brcc	.-24     	; 0x2f0c <characterstring_init+0x36>
    2f24:	da 01       	movw	r26, r20
    2f26:	a8 0f       	add	r26, r24
    2f28:	b9 1f       	adc	r27, r25
                        char_string->value[char_string->length] = value[i];
    2f2a:	6c 91       	ld	r22, X
    2f2c:	a0 81       	ld	r26, Z
    2f2e:	b1 81       	ldd	r27, Z+1	; 0x01
    2f30:	ae 0f       	add	r26, r30
    2f32:	bf 1f       	adc	r27, r31
    2f34:	13 96       	adiw	r26, 0x03	; 3
    2f36:	6c 93       	st	X, r22
                        char_string->length++;
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	6f 5f       	subi	r22, 0xFF	; 255
    2f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f40:	71 83       	std	Z+1, r23	; 0x01
    2f42:	60 83       	st	Z, r22
    2f44:	e8 cf       	rjmp	.-48     	; 0x2f16 <characterstring_init+0x40>

00002f46 <characterstring_init_ansi>:
}

bool characterstring_init_ansi(
    BACNET_CHARACTER_STRING * char_string,
    const char *value)
{
    2f46:	ab 01       	movw	r20, r22
    return characterstring_init(char_string, CHARACTER_ANSI_X34, value,
    2f48:	61 15       	cp	r22, r1
    2f4a:	71 05       	cpc	r23, r1
    2f4c:	51 f0       	breq	.+20     	; 0x2f62 <characterstring_init_ansi+0x1c>
    2f4e:	fb 01       	movw	r30, r22
    2f50:	01 90       	ld	r0, Z+
    2f52:	00 20       	and	r0, r0
    2f54:	e9 f7       	brne	.-6      	; 0x2f50 <characterstring_init_ansi+0xa>
    2f56:	9f 01       	movw	r18, r30
    2f58:	21 50       	subi	r18, 0x01	; 1
    2f5a:	31 09       	sbc	r19, r1
    2f5c:	26 1b       	sub	r18, r22
    2f5e:	37 0b       	sbc	r19, r23
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <characterstring_init_ansi+0x20>
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <characterstring_init>

00002f6c <characterstring_ansi_copy>:

bool characterstring_ansi_copy(
    char *dest,
    size_t dest_max_len,
    BACNET_CHARACTER_STRING * src)
{
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	fa 01       	movw	r30, r20
    size_t i;   /* counter */

    if (dest && src && (src->encoding == CHARACTER_ANSI_X34) &&
    2f72:	00 97       	sbiw	r24, 0x00	; 0
    2f74:	11 f1       	breq	.+68     	; 0x2fba <characterstring_ansi_copy+0x4e>
    2f76:	30 97       	sbiw	r30, 0x00	; 0
    2f78:	01 f1       	breq	.+64     	; 0x2fba <characterstring_ansi_copy+0x4e>
    2f7a:	22 81       	ldd	r18, Z+2	; 0x02
    2f7c:	21 11       	cpse	r18, r1
    2f7e:	1d c0       	rjmp	.+58     	; 0x2fba <characterstring_ansi_copy+0x4e>
    2f80:	20 81       	ld	r18, Z
    2f82:	31 81       	ldd	r19, Z+1	; 0x01
    2f84:	26 17       	cp	r18, r22
    2f86:	37 07       	cpc	r19, r23
    2f88:	c0 f4       	brcc	.+48     	; 0x2fba <characterstring_ansi_copy+0x4e>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
        (src->length < dest_max_len)) {
        for (i = 0; i < dest_max_len; i++) {
    2f90:	26 17       	cp	r18, r22
    2f92:	37 07       	cpc	r19, r23
    2f94:	81 f0       	breq	.+32     	; 0x2fb6 <characterstring_ansi_copy+0x4a>
            if (i < src->length) {
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	28 17       	cp	r18, r24
    2f9c:	39 07       	cpc	r19, r25
    2f9e:	30 f4       	brcc	.+12     	; 0x2fac <characterstring_ansi_copy+0x40>
    2fa0:	ef 01       	movw	r28, r30
    2fa2:	c2 0f       	add	r28, r18
    2fa4:	d3 1f       	adc	r29, r19
                dest[i] = src->value[i];
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	8c 93       	st	X, r24
    2faa:	01 c0       	rjmp	.+2      	; 0x2fae <characterstring_ansi_copy+0x42>
            } else {
                dest[i] = 0;
    2fac:	1c 92       	st	X, r1
        for (i = 0; i < dest_max_len; i++) {
    2fae:	2f 5f       	subi	r18, 0xFF	; 255
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	11 96       	adiw	r26, 0x01	; 1
    2fb4:	ed cf       	rjmp	.-38     	; 0x2f90 <characterstring_ansi_copy+0x24>
            }
        }
        return true;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <characterstring_ansi_copy+0x50>
    }

    return false;
    2fba:	80 e0       	ldi	r24, 0x00	; 0
}
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	08 95       	ret

00002fc2 <characterstring_value>:
char *characterstring_value(
    BACNET_CHARACTER_STRING * char_string)
{
    char *value = NULL;

    if (char_string) {
    2fc2:	00 97       	sbiw	r24, 0x00	; 0
    2fc4:	11 f0       	breq	.+4      	; 0x2fca <characterstring_value+0x8>
        value = char_string->value;
    2fc6:	03 96       	adiw	r24, 0x03	; 3
    2fc8:	08 95       	ret
    char *value = NULL;
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    }

    return value;
}
    2fce:	08 95       	ret

00002fd0 <characterstring_length>:
size_t characterstring_length(
    BACNET_CHARACTER_STRING * char_string)
{
    size_t length = 0;

    if (char_string) {
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	21 f0       	breq	.+8      	; 0x2fdc <characterstring_length+0xc>
        /* FIXME: validate length is within bounds? */
        length = char_string->length;
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	80 81       	ld	r24, Z
    2fd8:	91 81       	ldd	r25, Z+1	; 0x01
    2fda:	08 95       	ret
    size_t length = 0;
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    }

    return length;
}
    2fe0:	08 95       	ret

00002fe2 <characterstring_encoding>:
uint8_t characterstring_encoding(
    BACNET_CHARACTER_STRING * char_string)
{
    uint8_t encoding = 0;

    if (char_string) {
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	19 f0       	breq	.+6      	; 0x2fec <characterstring_encoding+0xa>
        encoding = char_string->encoding;
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	08 95       	ret
    uint8_t encoding = 0;
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    }

    return encoding;
}
    2fee:	08 95       	ret

00002ff0 <iam_encode_apdu>:
    uint8_t * apdu,
    uint32_t device_id,
    unsigned max_apdu,
    int segmentation,
    uint16_t vendor_id)
{
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	ec 01       	movw	r28, r24
    3006:	69 01       	movw	r12, r18
    int len = 0;        /* length of each encoding */
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	71 f1       	breq	.+92     	; 0x3068 <iam_encode_apdu+0x78>
        apdu[0] = PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST;
    300c:	80 e1       	ldi	r24, 0x10	; 16
    300e:	88 83       	st	Y, r24
        apdu[1] = SERVICE_UNCONFIRMED_I_AM;     /* service choice */
    3010:	19 82       	std	Y+1, r1	; 0x01
        apdu_len = 2;
        len =
    3012:	9a 01       	movw	r18, r20
    3014:	ab 01       	movw	r20, r22
    3016:	68 e0       	ldi	r22, 0x08	; 8
    3018:	70 e0       	ldi	r23, 0x00	; 0
    301a:	ce 01       	movw	r24, r28
    301c:	02 96       	adiw	r24, 0x02	; 2
    301e:	0e 94 2a 14 	call	0x2854	; 0x2854 <encode_application_object_id>
            encode_application_object_id(&apdu[apdu_len], OBJECT_DEVICE,
            device_id);
        apdu_len += len;
    3022:	02 96       	adiw	r24, 0x02	; 2
    3024:	5c 01       	movw	r10, r24
        len = encode_application_unsigned(&apdu[apdu_len], max_apdu);
    3026:	a6 01       	movw	r20, r12
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	ce 01       	movw	r24, r28
    302e:	8a 0d       	add	r24, r10
    3030:	9b 1d       	adc	r25, r11
    3032:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <encode_application_unsigned>
        apdu_len += len;
    3036:	a8 0e       	add	r10, r24
    3038:	b9 1e       	adc	r11, r25
        len =
            encode_application_enumerated(&apdu[apdu_len],
    303a:	a8 01       	movw	r20, r16
    303c:	66 27       	eor	r22, r22
    303e:	57 fd       	sbrc	r21, 7
    3040:	60 95       	com	r22
    3042:	76 2f       	mov	r23, r22
        len =
    3044:	ce 01       	movw	r24, r28
    3046:	8a 0d       	add	r24, r10
    3048:	9b 1d       	adc	r25, r11
    304a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <encode_application_enumerated>
            (uint32_t) segmentation);
        apdu_len += len;
    304e:	a8 0e       	add	r10, r24
    3050:	b9 1e       	adc	r11, r25
        len = encode_application_unsigned(&apdu[apdu_len], vendor_id);
    3052:	a7 01       	movw	r20, r14
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	70 e0       	ldi	r23, 0x00	; 0
    3058:	ce 01       	movw	r24, r28
    305a:	8a 0d       	add	r24, r10
    305c:	9b 1d       	adc	r25, r11
    305e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <encode_application_unsigned>
        apdu_len += len;
    3062:	8a 0d       	add	r24, r10
    3064:	9b 1d       	adc	r25, r11
    3066:	02 c0       	rjmp	.+4      	; 0x306c <iam_encode_apdu+0x7c>
    int apdu_len = 0;   /* total length of the apdu, return value */
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	1f 91       	pop	r17
    3072:	0f 91       	pop	r16
    3074:	ff 90       	pop	r15
    3076:	ef 90       	pop	r14
    3078:	df 90       	pop	r13
    307a:	cf 90       	pop	r12
    307c:	bf 90       	pop	r11
    307e:	af 90       	pop	r10
    3080:	08 95       	ret

00003082 <rp_decode_service_request>:
/* decode the service request only */
int rp_decode_service_request(
    uint8_t * apdu,
    unsigned apdu_len,
    BACNET_READ_PROPERTY_DATA * rpdata)
{
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	2f 97       	sbiw	r28, 0x0f	; 15
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	7c 01       	movw	r14, r24
    30a8:	6b 01       	movw	r12, r22
    30aa:	8a 01       	movw	r16, r20
    unsigned len = 0;
    uint8_t tag_number = 0;
    30ac:	1f 86       	std	Y+15, r1	; 0x0f
    uint32_t len_value_type = 0;
    30ae:	19 86       	std	Y+9, r1	; 0x09
    30b0:	1a 86       	std	Y+10, r1	; 0x0a
    30b2:	1b 86       	std	Y+11, r1	; 0x0b
    30b4:	1c 86       	std	Y+12, r1	; 0x0c
    uint16_t type = 0;  /* for decoding */
    30b6:	1e 86       	std	Y+14, r1	; 0x0e
    30b8:	1d 86       	std	Y+13, r1	; 0x0d
    uint32_t property = 0;      /* for decoding */
    30ba:	1d 82       	std	Y+5, r1	; 0x05
    30bc:	1e 82       	std	Y+6, r1	; 0x06
    30be:	1f 82       	std	Y+7, r1	; 0x07
    30c0:	18 86       	std	Y+8, r1	; 0x08
    uint32_t array_value = 0;   /* for decoding */
    30c2:	19 82       	std	Y+1, r1	; 0x01
    30c4:	1a 82       	std	Y+2, r1	; 0x02
    30c6:	1b 82       	std	Y+3, r1	; 0x03
    30c8:	1c 82       	std	Y+4, r1	; 0x04

    /* check for value pointers */
    if (rpdata) {
    30ca:	41 15       	cp	r20, r1
    30cc:	51 05       	cpc	r21, r1
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <rp_decode_service_request+0x50>
    30d0:	89 c0       	rjmp	.+274    	; 0x31e4 <rp_decode_service_request+0x162>
        /* Must have at least 2 tags, an object id and a property identifier
         * of at least 1 byte in length to have any chance of parsing */
        if (apdu_len < 7) {
    30d2:	67 30       	cpi	r22, 0x07	; 7
    30d4:	71 05       	cpc	r23, r1
    30d6:	18 f4       	brcc	.+6      	; 0x30de <rp_decode_service_request+0x5c>
            rpdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
    30d8:	8f e3       	ldi	r24, 0x3F	; 63
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	7f c0       	rjmp	.+254    	; 0x31dc <rp_decode_service_request+0x15a>
            return BACNET_STATUS_REJECT;
        }

        /* Tag 0: Object ID          */
        if (!decode_is_context_tag(&apdu[len++], 0)) {
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	c7 01       	movw	r24, r14
    30e2:	0e 94 c2 12 	call	0x2584	; 0x2584 <decode_is_context_tag>
    30e6:	88 23       	and	r24, r24
    30e8:	09 f4       	brne	.+2      	; 0x30ec <rp_decode_service_request+0x6a>
    30ea:	6c c0       	rjmp	.+216    	; 0x31c4 <rp_decode_service_request+0x142>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len += decode_object_id(&apdu[len], &type, &rpdata->object_instance);
    30ec:	a8 01       	movw	r20, r16
    30ee:	4e 5f       	subi	r20, 0xFE	; 254
    30f0:	5f 4f       	sbci	r21, 0xFF	; 255
    30f2:	be 01       	movw	r22, r28
    30f4:	63 5f       	subi	r22, 0xF3	; 243
    30f6:	7f 4f       	sbci	r23, 0xFF	; 255
    30f8:	c7 01       	movw	r24, r14
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	0e 94 97 13 	call	0x272e	; 0x272e <decode_object_id>
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	5c 01       	movw	r10, r24
        rpdata->object_type = (BACNET_OBJECT_TYPE) type;
    3104:	8d 85       	ldd	r24, Y+13	; 0x0d
    3106:	9e 85       	ldd	r25, Y+14	; 0x0e
    3108:	f8 01       	movw	r30, r16
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
        /* Tag 1: Property ID */
        len +=
            decode_tag_number_and_value(&apdu[len], &tag_number,
    310e:	ae 01       	movw	r20, r28
    3110:	47 5f       	subi	r20, 0xF7	; 247
    3112:	5f 4f       	sbci	r21, 0xFF	; 255
    3114:	be 01       	movw	r22, r28
    3116:	61 5f       	subi	r22, 0xF1	; 241
    3118:	7f 4f       	sbci	r23, 0xFF	; 255
    311a:	c7 01       	movw	r24, r14
    311c:	8a 0d       	add	r24, r10
    311e:	9b 1d       	adc	r25, r11
    3120:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
        len +=
    3124:	a8 0e       	add	r10, r24
    3126:	b9 1e       	adc	r11, r25
            &len_value_type);
        if (tag_number != 1) {
    3128:	8f 85       	ldd	r24, Y+15	; 0x0f
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	09 f0       	breq	.+2      	; 0x3130 <rp_decode_service_request+0xae>
    312e:	4a c0       	rjmp	.+148    	; 0x31c4 <rp_decode_service_request+0x142>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len += decode_enumerated(&apdu[len], len_value_type, &property);
    3130:	49 85       	ldd	r20, Y+9	; 0x09
    3132:	5a 85       	ldd	r21, Y+10	; 0x0a
    3134:	6b 85       	ldd	r22, Y+11	; 0x0b
    3136:	7c 85       	ldd	r23, Y+12	; 0x0c
    3138:	9e 01       	movw	r18, r28
    313a:	2b 5f       	subi	r18, 0xFB	; 251
    313c:	3f 4f       	sbci	r19, 0xFF	; 255
    313e:	c7 01       	movw	r24, r14
    3140:	8a 0d       	add	r24, r10
    3142:	9b 1d       	adc	r25, r11
    3144:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <decode_enumerated>
    3148:	a8 0e       	add	r10, r24
    314a:	b9 1e       	adc	r11, r25
        rpdata->object_property = (BACNET_PROPERTY_ID) property;
    314c:	8d 81       	ldd	r24, Y+5	; 0x05
    314e:	9e 81       	ldd	r25, Y+6	; 0x06
    3150:	af 81       	ldd	r26, Y+7	; 0x07
    3152:	b8 85       	ldd	r27, Y+8	; 0x08
    3154:	f8 01       	movw	r30, r16
    3156:	86 83       	std	Z+6, r24	; 0x06
    3158:	97 83       	std	Z+7, r25	; 0x07
    315a:	a0 87       	std	Z+8, r26	; 0x08
    315c:	b1 87       	std	Z+9, r27	; 0x09
        /* Tag 2: Optional Array Index */
        if (len < apdu_len) {
    315e:	ac 14       	cp	r10, r12
    3160:	bd 04       	cpc	r11, r13
    3162:	98 f5       	brcc	.+102    	; 0x31ca <rp_decode_service_request+0x148>
            len +=
                decode_tag_number_and_value(&apdu[len], &tag_number,
    3164:	ae 01       	movw	r20, r28
    3166:	47 5f       	subi	r20, 0xF7	; 247
    3168:	5f 4f       	sbci	r21, 0xFF	; 255
    316a:	be 01       	movw	r22, r28
    316c:	61 5f       	subi	r22, 0xF1	; 241
    316e:	7f 4f       	sbci	r23, 0xFF	; 255
    3170:	c7 01       	movw	r24, r14
    3172:	8a 0d       	add	r24, r10
    3174:	9b 1d       	adc	r25, r11
    3176:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
            len +=
    317a:	a8 0e       	add	r10, r24
    317c:	b9 1e       	adc	r11, r25
                &len_value_type);
            if ((tag_number == 2) && (len < apdu_len)) {
    317e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3180:	82 30       	cpi	r24, 0x02	; 2
    3182:	01 f5       	brne	.+64     	; 0x31c4 <rp_decode_service_request+0x142>
    3184:	ac 14       	cp	r10, r12
    3186:	bd 04       	cpc	r11, r13
    3188:	e8 f4       	brcc	.+58     	; 0x31c4 <rp_decode_service_request+0x142>
                len +=
                    decode_unsigned(&apdu[len], len_value_type, &array_value);
    318a:	49 85       	ldd	r20, Y+9	; 0x09
    318c:	5a 85       	ldd	r21, Y+10	; 0x0a
    318e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3190:	7c 85       	ldd	r23, Y+12	; 0x0c
    3192:	9e 01       	movw	r18, r28
    3194:	2f 5f       	subi	r18, 0xFF	; 255
    3196:	3f 4f       	sbci	r19, 0xFF	; 255
    3198:	c7 01       	movw	r24, r14
    319a:	8a 0d       	add	r24, r10
    319c:	9b 1d       	adc	r25, r11
    319e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <decode_unsigned>
                len +=
    31a2:	a8 0e       	add	r10, r24
    31a4:	b9 1e       	adc	r11, r25
                rpdata->array_index = array_value;
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	ab 81       	ldd	r26, Y+3	; 0x03
    31ac:	bc 81       	ldd	r27, Y+4	; 0x04
    31ae:	f8 01       	movw	r30, r16
    31b0:	82 87       	std	Z+10, r24	; 0x0a
    31b2:	93 87       	std	Z+11, r25	; 0x0b
    31b4:	a4 87       	std	Z+12, r26	; 0x0c
    31b6:	b5 87       	std	Z+13, r27	; 0x0d
            }
        } else
            rpdata->array_index = BACNET_ARRAY_ALL;
    }

    if (len < apdu_len) {
    31b8:	ac 14       	cp	r10, r12
    31ba:	bd 04       	cpc	r11, r13
    31bc:	c0 f4       	brcc	.+48     	; 0x31ee <rp_decode_service_request+0x16c>
        /* If something left over now, we have an invalid request */
        if (rpdata) {
            rpdata->error_code = ERROR_CODE_REJECT_TOO_MANY_ARGUMENTS;
    31be:	81 e4       	ldi	r24, 0x41	; 65
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0c c0       	rjmp	.+24     	; 0x31dc <rp_decode_service_request+0x15a>
                rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    31c4:	8e e3       	ldi	r24, 0x3E	; 62
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	09 c0       	rjmp	.+18     	; 0x31dc <rp_decode_service_request+0x15a>
            rpdata->array_index = BACNET_ARRAY_ALL;
    31ca:	8f ef       	ldi	r24, 0xFF	; 255
    31cc:	9f ef       	ldi	r25, 0xFF	; 255
    31ce:	dc 01       	movw	r26, r24
    31d0:	f8 01       	movw	r30, r16
    31d2:	82 87       	std	Z+10, r24	; 0x0a
    31d4:	93 87       	std	Z+11, r25	; 0x0b
    31d6:	a4 87       	std	Z+12, r26	; 0x0c
    31d8:	b5 87       	std	Z+13, r27	; 0x0d
    31da:	09 c0       	rjmp	.+18     	; 0x31ee <rp_decode_service_request+0x16c>
            rpdata->error_code = ERROR_CODE_REJECT_TOO_MANY_ARGUMENTS;
    31dc:	f8 01       	movw	r30, r16
    31de:	95 8b       	std	Z+21, r25	; 0x15
    31e0:	84 8b       	std	Z+20, r24	; 0x14
    31e2:	07 c0       	rjmp	.+14     	; 0x31f2 <rp_decode_service_request+0x170>
    if (len < apdu_len) {
    31e4:	61 15       	cp	r22, r1
    31e6:	71 05       	cpc	r23, r1
    31e8:	21 f4       	brne	.+8      	; 0x31f2 <rp_decode_service_request+0x170>
    unsigned len = 0;
    31ea:	a1 2c       	mov	r10, r1
    31ec:	b1 2c       	mov	r11, r1
        }
        return BACNET_STATUS_REJECT;
    }

    return (int) len;
    31ee:	c5 01       	movw	r24, r10
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <rp_decode_service_request+0x174>
        return BACNET_STATUS_REJECT;
    31f2:	8d ef       	ldi	r24, 0xFD	; 253
    31f4:	9f ef       	ldi	r25, 0xFF	; 255
}
    31f6:	2f 96       	adiw	r28, 0x0f	; 15
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	08 95       	ret

00003218 <rp_ack_encode_apdu_init>:
/* alternate method to encode the ack without extra buffer */
int rp_ack_encode_apdu_init(
    uint8_t * apdu,
    uint8_t invoke_id,
    BACNET_READ_PROPERTY_DATA * rpdata)
{
    3218:	ef 92       	push	r14
    321a:	ff 92       	push	r15
    321c:	0f 93       	push	r16
    321e:	1f 93       	push	r17
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	ec 01       	movw	r28, r24
    3226:	7a 01       	movw	r14, r20
    int len = 0;        /* length of each encoding */
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	e9 f1       	breq	.+122    	; 0x32a6 <rp_ack_encode_apdu_init+0x8e>
        apdu[0] = PDU_TYPE_COMPLEX_ACK; /* complex ACK service */
    322c:	80 e3       	ldi	r24, 0x30	; 48
    322e:	88 83       	st	Y, r24
        apdu[1] = invoke_id;    /* original invoke id from request */
    3230:	69 83       	std	Y+1, r22	; 0x01
        apdu[2] = SERVICE_CONFIRMED_READ_PROPERTY;      /* service choice */
    3232:	8c e0       	ldi	r24, 0x0C	; 12
    3234:	8a 83       	std	Y+2, r24	; 0x02
        apdu_len = 3;

        /* service ack follows */
        len =
    3236:	fa 01       	movw	r30, r20
    3238:	02 81       	ldd	r16, Z+2	; 0x02
    323a:	13 81       	ldd	r17, Z+3	; 0x03
    323c:	24 81       	ldd	r18, Z+4	; 0x04
    323e:	35 81       	ldd	r19, Z+5	; 0x05
    3240:	40 81       	ld	r20, Z
    3242:	51 81       	ldd	r21, Z+1	; 0x01
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	ce 01       	movw	r24, r28
    3248:	03 96       	adiw	r24, 0x03	; 3
    324a:	0e 94 ff 13 	call	0x27fe	; 0x27fe <encode_context_object_id>
            encode_context_object_id(&apdu[apdu_len], 0, rpdata->object_type,
            rpdata->object_instance);
        apdu_len += len;
    324e:	8c 01       	movw	r16, r24
    3250:	0d 5f       	subi	r16, 0xFD	; 253
    3252:	1f 4f       	sbci	r17, 0xFF	; 255
        len =
    3254:	f7 01       	movw	r30, r14
    3256:	26 81       	ldd	r18, Z+6	; 0x06
    3258:	37 81       	ldd	r19, Z+7	; 0x07
    325a:	40 85       	ldd	r20, Z+8	; 0x08
    325c:	51 85       	ldd	r21, Z+9	; 0x09
    325e:	61 e0       	ldi	r22, 0x01	; 1
    3260:	ce 01       	movw	r24, r28
    3262:	80 0f       	add	r24, r16
    3264:	91 1f       	adc	r25, r17
    3266:	0e 94 12 16 	call	0x2c24	; 0x2c24 <encode_context_enumerated>
            encode_context_enumerated(&apdu[apdu_len], 1,
            rpdata->object_property);
        apdu_len += len;
    326a:	08 0f       	add	r16, r24
    326c:	19 1f       	adc	r17, r25
        /* context 2 array index is optional */
        if (rpdata->array_index != BACNET_ARRAY_ALL) {
    326e:	f7 01       	movw	r30, r14
    3270:	22 85       	ldd	r18, Z+10	; 0x0a
    3272:	33 85       	ldd	r19, Z+11	; 0x0b
    3274:	44 85       	ldd	r20, Z+12	; 0x0c
    3276:	55 85       	ldd	r21, Z+13	; 0x0d
    3278:	2f 3f       	cpi	r18, 0xFF	; 255
    327a:	ff ef       	ldi	r31, 0xFF	; 255
    327c:	3f 07       	cpc	r19, r31
    327e:	4f 07       	cpc	r20, r31
    3280:	5f 07       	cpc	r21, r31
    3282:	41 f0       	breq	.+16     	; 0x3294 <rp_ack_encode_apdu_init+0x7c>
            len =
    3284:	62 e0       	ldi	r22, 0x02	; 2
    3286:	ce 01       	movw	r24, r28
    3288:	80 0f       	add	r24, r16
    328a:	91 1f       	adc	r25, r17
    328c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <encode_context_unsigned>
                encode_context_unsigned(&apdu[apdu_len], 2,
                rpdata->array_index);
            apdu_len += len;
    3290:	08 0f       	add	r16, r24
    3292:	19 1f       	adc	r17, r25
        }
        len = encode_opening_tag(&apdu[apdu_len], 3);
    3294:	63 e0       	ldi	r22, 0x03	; 3
    3296:	ce 01       	movw	r24, r28
    3298:	80 0f       	add	r24, r16
    329a:	91 1f       	adc	r25, r17
    329c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <encode_opening_tag>
        apdu_len += len;
    32a0:	80 0f       	add	r24, r16
    32a2:	91 1f       	adc	r25, r17
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <rp_ack_encode_apdu_init+0x92>
    int apdu_len = 0;   /* total length of the apdu, return value */
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	1f 91       	pop	r17
    32b0:	0f 91       	pop	r16
    32b2:	ff 90       	pop	r15
    32b4:	ef 90       	pop	r14
    32b6:	08 95       	ret

000032b8 <rp_ack_encode_apdu_object_property_end>:
int rp_ack_encode_apdu_object_property_end(
    uint8_t * apdu)
{
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	19 f0       	breq	.+6      	; 0x32c2 <rp_ack_encode_apdu_object_property_end+0xa>
        apdu_len = encode_closing_tag(&apdu[0], 3);
    32bc:	63 e0       	ldi	r22, 0x03	; 3
    32be:	0c 94 0f 12 	jmp	0x241e	; 0x241e <encode_closing_tag>
    }

    return apdu_len;
}
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	08 95       	ret

000032c8 <wp_decode_service_request>:
   using unique values less than zero */
int wp_decode_service_request(
    uint8_t * apdu,
    unsigned apdu_len,
    BACNET_WRITE_PROPERTY_DATA * wpdata)
{
    32c8:	8f 92       	push	r8
    32ca:	9f 92       	push	r9
    32cc:	af 92       	push	r10
    32ce:	bf 92       	push	r11
    32d0:	cf 92       	push	r12
    32d2:	df 92       	push	r13
    32d4:	ef 92       	push	r14
    32d6:	ff 92       	push	r15
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	2f 97       	sbiw	r28, 0x0f	; 15
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	8c 01       	movw	r16, r24
    32f2:	6b 01       	movw	r12, r22
    32f4:	7a 01       	movw	r14, r20
    int len = 0;
    int tag_len = 0;
    uint8_t tag_number = 0;
    32f6:	1f 86       	std	Y+15, r1	; 0x0f
    uint32_t len_value_type = 0;
    32f8:	19 86       	std	Y+9, r1	; 0x09
    32fa:	1a 86       	std	Y+10, r1	; 0x0a
    32fc:	1b 86       	std	Y+11, r1	; 0x0b
    32fe:	1c 86       	std	Y+12, r1	; 0x0c
    uint16_t type = 0;  /* for decoding */
    3300:	1e 86       	std	Y+14, r1	; 0x0e
    3302:	1d 86       	std	Y+13, r1	; 0x0d
    uint32_t property = 0;      /* for decoding */
    3304:	1d 82       	std	Y+5, r1	; 0x05
    3306:	1e 82       	std	Y+6, r1	; 0x06
    3308:	1f 82       	std	Y+7, r1	; 0x07
    330a:	18 86       	std	Y+8, r1	; 0x08
    uint32_t unsigned_value = 0;
    330c:	19 82       	std	Y+1, r1	; 0x01
    330e:	1a 82       	std	Y+2, r1	; 0x02
    3310:	1b 82       	std	Y+3, r1	; 0x03
    3312:	1c 82       	std	Y+4, r1	; 0x04
    int i = 0;  /* loop counter */

    /* check for value pointers */
    if (apdu_len && wpdata) {
    3314:	61 15       	cp	r22, r1
    3316:	71 05       	cpc	r23, r1
    3318:	09 f4       	brne	.+2      	; 0x331c <wp_decode_service_request+0x54>
    331a:	dd c0       	rjmp	.+442    	; 0x34d6 <wp_decode_service_request+0x20e>
    331c:	41 15       	cp	r20, r1
    331e:	51 05       	cpc	r21, r1
    3320:	09 f4       	brne	.+2      	; 0x3324 <wp_decode_service_request+0x5c>
    3322:	d9 c0       	rjmp	.+434    	; 0x34d6 <wp_decode_service_request+0x20e>
        /* Tag 0: Object ID          */
        if (!decode_is_context_tag(&apdu[len++], 0))
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	0e 94 c2 12 	call	0x2584	; 0x2584 <decode_is_context_tag>
    332a:	81 11       	cpse	r24, r1
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <wp_decode_service_request+0x6a>
            return -1;
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	da c0       	rjmp	.+436    	; 0x34e6 <wp_decode_service_request+0x21e>
        len += decode_object_id(&apdu[len], &type, &wpdata->object_instance);
    3332:	a7 01       	movw	r20, r14
    3334:	4e 5f       	subi	r20, 0xFE	; 254
    3336:	5f 4f       	sbci	r21, 0xFF	; 255
    3338:	be 01       	movw	r22, r28
    333a:	63 5f       	subi	r22, 0xF3	; 243
    333c:	7f 4f       	sbci	r23, 0xFF	; 255
    333e:	c8 01       	movw	r24, r16
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	0e 94 97 13 	call	0x272e	; 0x272e <decode_object_id>
    3346:	01 96       	adiw	r24, 0x01	; 1
    3348:	5c 01       	movw	r10, r24
        wpdata->object_type = (BACNET_OBJECT_TYPE) type;
    334a:	8d 85       	ldd	r24, Y+13	; 0x0d
    334c:	9e 85       	ldd	r25, Y+14	; 0x0e
    334e:	f7 01       	movw	r30, r14
    3350:	91 83       	std	Z+1, r25	; 0x01
    3352:	80 83       	st	Z, r24
        /* Tag 1: Property ID */
        len +=
            decode_tag_number_and_value(&apdu[len], &tag_number,
    3354:	ae 01       	movw	r20, r28
    3356:	47 5f       	subi	r20, 0xF7	; 247
    3358:	5f 4f       	sbci	r21, 0xFF	; 255
    335a:	be 01       	movw	r22, r28
    335c:	61 5f       	subi	r22, 0xF1	; 241
    335e:	7f 4f       	sbci	r23, 0xFF	; 255
    3360:	c8 01       	movw	r24, r16
    3362:	8a 0d       	add	r24, r10
    3364:	9b 1d       	adc	r25, r11
    3366:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
        len +=
    336a:	a8 0e       	add	r10, r24
    336c:	b9 1e       	adc	r11, r25
            &len_value_type);
        if (tag_number != 1)
    336e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3370:	81 30       	cpi	r24, 0x01	; 1
    3372:	e9 f6       	brne	.-70     	; 0x332e <wp_decode_service_request+0x66>
            return -1;
        len += decode_enumerated(&apdu[len], len_value_type, &property);
    3374:	49 85       	ldd	r20, Y+9	; 0x09
    3376:	5a 85       	ldd	r21, Y+10	; 0x0a
    3378:	6b 85       	ldd	r22, Y+11	; 0x0b
    337a:	7c 85       	ldd	r23, Y+12	; 0x0c
    337c:	9e 01       	movw	r18, r28
    337e:	2b 5f       	subi	r18, 0xFB	; 251
    3380:	3f 4f       	sbci	r19, 0xFF	; 255
    3382:	c8 01       	movw	r24, r16
    3384:	8a 0d       	add	r24, r10
    3386:	9b 1d       	adc	r25, r11
    3388:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <decode_enumerated>
    338c:	a8 0e       	add	r10, r24
    338e:	b9 1e       	adc	r11, r25
        wpdata->object_property = (BACNET_PROPERTY_ID) property;
    3390:	8d 81       	ldd	r24, Y+5	; 0x05
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	af 81       	ldd	r26, Y+7	; 0x07
    3396:	b8 85       	ldd	r27, Y+8	; 0x08
    3398:	f7 01       	movw	r30, r14
    339a:	86 83       	std	Z+6, r24	; 0x06
    339c:	97 83       	std	Z+7, r25	; 0x07
    339e:	a0 87       	std	Z+8, r26	; 0x08
    33a0:	b1 87       	std	Z+9, r27	; 0x09
        /* Tag 2: Optional Array Index */
        /* note: decode without incrementing len so we can check for opening tag */
        tag_len =
    33a2:	ae 01       	movw	r20, r28
    33a4:	47 5f       	subi	r20, 0xF7	; 247
    33a6:	5f 4f       	sbci	r21, 0xFF	; 255
    33a8:	be 01       	movw	r22, r28
    33aa:	61 5f       	subi	r22, 0xF1	; 241
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255
    33ae:	c8 01       	movw	r24, r16
    33b0:	8a 0d       	add	r24, r10
    33b2:	9b 1d       	adc	r25, r11
    33b4:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
            decode_tag_number_and_value(&apdu[len], &tag_number,
            &len_value_type);
        if (tag_number == 2) {
    33b8:	2f 85       	ldd	r18, Y+15	; 0x0f
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	a9 f4       	brne	.+42     	; 0x33e8 <wp_decode_service_request+0x120>
            len += tag_len;
    33be:	a8 0e       	add	r10, r24
    33c0:	b9 1e       	adc	r11, r25
            len +=
                decode_unsigned(&apdu[len], len_value_type, &unsigned_value);
    33c2:	49 85       	ldd	r20, Y+9	; 0x09
    33c4:	5a 85       	ldd	r21, Y+10	; 0x0a
    33c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ca:	9e 01       	movw	r18, r28
    33cc:	2f 5f       	subi	r18, 0xFF	; 255
    33ce:	3f 4f       	sbci	r19, 0xFF	; 255
    33d0:	c8 01       	movw	r24, r16
    33d2:	8a 0d       	add	r24, r10
    33d4:	9b 1d       	adc	r25, r11
    33d6:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <decode_unsigned>
            len +=
    33da:	a8 0e       	add	r10, r24
    33dc:	b9 1e       	adc	r11, r25
            wpdata->array_index = unsigned_value;
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	9a 81       	ldd	r25, Y+2	; 0x02
    33e2:	ab 81       	ldd	r26, Y+3	; 0x03
    33e4:	bc 81       	ldd	r27, Y+4	; 0x04
    33e6:	03 c0       	rjmp	.+6      	; 0x33ee <wp_decode_service_request+0x126>
        } else
            wpdata->array_index = BACNET_ARRAY_ALL;
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	9f ef       	ldi	r25, 0xFF	; 255
    33ec:	dc 01       	movw	r26, r24
    33ee:	f7 01       	movw	r30, r14
    33f0:	82 87       	std	Z+10, r24	; 0x0a
    33f2:	93 87       	std	Z+11, r25	; 0x0b
    33f4:	a4 87       	std	Z+12, r26	; 0x0c
    33f6:	b5 87       	std	Z+13, r27	; 0x0d
        /* Tag 3: opening context tag */
        if (!decode_is_opening_tag_number(&apdu[len], 3))
    33f8:	48 01       	movw	r8, r16
    33fa:	8a 0c       	add	r8, r10
    33fc:	9b 1c       	adc	r9, r11
    33fe:	63 e0       	ldi	r22, 0x03	; 3
    3400:	c4 01       	movw	r24, r8
    3402:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <decode_is_opening_tag_number>
    3406:	88 23       	and	r24, r24
    3408:	09 f4       	brne	.+2      	; 0x340c <wp_decode_service_request+0x144>
    340a:	91 cf       	rjmp	.-222    	; 0x332e <wp_decode_service_request+0x66>
            return -1;
        /* determine the length of the data blob */
        wpdata->application_data_len =
            bacapp_data_len(&apdu[len], apdu_len - len,
    340c:	2d 81       	ldd	r18, Y+5	; 0x05
    340e:	3e 81       	ldd	r19, Y+6	; 0x06
    3410:	4f 81       	ldd	r20, Y+7	; 0x07
    3412:	58 85       	ldd	r21, Y+8	; 0x08
    3414:	b6 01       	movw	r22, r12
    3416:	6a 19       	sub	r22, r10
    3418:	7b 09       	sbc	r23, r11
    341a:	c4 01       	movw	r24, r8
    341c:	0e 94 66 1d 	call	0x3acc	; 0x3acc <bacapp_data_len>
        wpdata->application_data_len =
    3420:	f7 01       	movw	r30, r14
    3422:	ee 58       	subi	r30, 0x8E	; 142
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
            (BACNET_PROPERTY_ID) property);
        /* a tag number of 3 is not extended so only one octet */
        len++;
    342a:	ff ef       	ldi	r31, 0xFF	; 255
    342c:	af 1a       	sub	r10, r31
    342e:	bf 0a       	sbc	r11, r31
        /* copy the data from the APDU */
        for (i = 0; i < wpdata->application_data_len; i++) {
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	28 17       	cp	r18, r24
    3436:	39 07       	cpc	r19, r25
    3438:	5c f4       	brge	.+22     	; 0x3450 <wp_decode_service_request+0x188>
    343a:	f4 01       	movw	r30, r8
    343c:	e2 0f       	add	r30, r18
    343e:	f3 1f       	adc	r31, r19
            wpdata->application_data[i] = apdu[len + i];
    3440:	41 81       	ldd	r20, Z+1	; 0x01
    3442:	f7 01       	movw	r30, r14
    3444:	e2 0f       	add	r30, r18
    3446:	f3 1f       	adc	r31, r19
    3448:	46 87       	std	Z+14, r20	; 0x0e
        for (i = 0; i < wpdata->application_data_len; i++) {
    344a:	2f 5f       	subi	r18, 0xFF	; 255
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	f2 cf       	rjmp	.-28     	; 0x3434 <wp_decode_service_request+0x16c>
        }
        /* add on the data length */
        len += wpdata->application_data_len;
    3450:	a8 0e       	add	r10, r24
    3452:	b9 1e       	adc	r11, r25
        if (!decode_is_closing_tag_number(&apdu[len], 3))
    3454:	63 e0       	ldi	r22, 0x03	; 3
    3456:	c8 01       	movw	r24, r16
    3458:	8a 0d       	add	r24, r10
    345a:	9b 1d       	adc	r25, r11
    345c:	0e 94 03 13 	call	0x2606	; 0x2606 <decode_is_closing_tag_number>
    3460:	88 23       	and	r24, r24
    3462:	e1 f1       	breq	.+120    	; 0x34dc <wp_decode_service_request+0x214>
            return -2;
        /* a tag number of 3 is not extended so only one octet */
        len++;
    3464:	2f ef       	ldi	r18, 0xFF	; 255
    3466:	a2 1a       	sub	r10, r18
    3468:	b2 0a       	sbc	r11, r18
        /* Tag 4: optional Priority - assumed MAX if not explicitly set */
        wpdata->priority = BACNET_MAX_PRIORITY;
    346a:	84 e7       	ldi	r24, 0x74	; 116
    346c:	e8 0e       	add	r14, r24
    346e:	f1 1c       	adc	r15, r1
    3470:	80 e1       	ldi	r24, 0x10	; 16
    3472:	f7 01       	movw	r30, r14
    3474:	80 83       	st	Z, r24
        if ((unsigned) len < apdu_len) {
    3476:	ac 14       	cp	r10, r12
    3478:	bd 04       	cpc	r11, r13
    347a:	90 f5       	brcc	.+100    	; 0x34e0 <wp_decode_service_request+0x218>
            tag_len =
    347c:	ae 01       	movw	r20, r28
    347e:	47 5f       	subi	r20, 0xF7	; 247
    3480:	5f 4f       	sbci	r21, 0xFF	; 255
    3482:	be 01       	movw	r22, r28
    3484:	61 5f       	subi	r22, 0xF1	; 241
    3486:	7f 4f       	sbci	r23, 0xFF	; 255
    3488:	c8 01       	movw	r24, r16
    348a:	8a 0d       	add	r24, r10
    348c:	9b 1d       	adc	r25, r11
    348e:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
                decode_tag_number_and_value(&apdu[len], &tag_number,
                &len_value_type);
            if (tag_number == 4) {
    3492:	2f 85       	ldd	r18, Y+15	; 0x0f
    3494:	24 30       	cpi	r18, 0x04	; 4
    3496:	21 f5       	brne	.+72     	; 0x34e0 <wp_decode_service_request+0x218>
                len += tag_len;
    3498:	8a 0d       	add	r24, r10
    349a:	9b 1d       	adc	r25, r11
                len =
    349c:	49 85       	ldd	r20, Y+9	; 0x09
    349e:	5a 85       	ldd	r21, Y+10	; 0x0a
    34a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34a4:	9e 01       	movw	r18, r28
    34a6:	2f 5f       	subi	r18, 0xFF	; 255
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	80 0f       	add	r24, r16
    34ac:	91 1f       	adc	r25, r17
    34ae:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <decode_unsigned>
                    decode_unsigned(&apdu[len], len_value_type,
                    &unsigned_value);
                if ((unsigned_value >= BACNET_MIN_PRIORITY)
                    && (unsigned_value <= BACNET_MAX_PRIORITY)) {
    34b2:	09 81       	ldd	r16, Y+1	; 0x01
    34b4:	1a 81       	ldd	r17, Y+2	; 0x02
    34b6:	2b 81       	ldd	r18, Y+3	; 0x03
    34b8:	3c 81       	ldd	r19, Y+4	; 0x04
    34ba:	b9 01       	movw	r22, r18
    34bc:	a8 01       	movw	r20, r16
    34be:	41 50       	subi	r20, 0x01	; 1
    34c0:	51 09       	sbc	r21, r1
    34c2:	61 09       	sbc	r22, r1
    34c4:	71 09       	sbc	r23, r1
                if ((unsigned_value >= BACNET_MIN_PRIORITY)
    34c6:	40 31       	cpi	r20, 0x10	; 16
    34c8:	51 05       	cpc	r21, r1
    34ca:	61 05       	cpc	r22, r1
    34cc:	71 05       	cpc	r23, r1
    34ce:	50 f4       	brcc	.+20     	; 0x34e4 <wp_decode_service_request+0x21c>
                    wpdata->priority = (uint8_t) unsigned_value;
    34d0:	f7 01       	movw	r30, r14
    34d2:	00 83       	st	Z, r16
    34d4:	09 c0       	rjmp	.+18     	; 0x34e8 <wp_decode_service_request+0x220>
    int len = 0;
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	06 c0       	rjmp	.+12     	; 0x34e8 <wp_decode_service_request+0x220>
            return -2;
    34dc:	8e ef       	ldi	r24, 0xFE	; 254
    34de:	03 c0       	rjmp	.+6      	; 0x34e6 <wp_decode_service_request+0x21e>
        len++;
    34e0:	c5 01       	movw	r24, r10
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <wp_decode_service_request+0x220>
                } else
                    return -5;
    34e4:	8b ef       	ldi	r24, 0xFB	; 251
    34e6:	9f ef       	ldi	r25, 0xFF	; 255
            }
        }
    }

    return len;
}
    34e8:	2f 96       	adiw	r28, 0x0f	; 15
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	bf 90       	pop	r11
    3506:	af 90       	pop	r10
    3508:	9f 90       	pop	r9
    350a:	8f 90       	pop	r8
    350c:	08 95       	ret

0000350e <whois_decode_service_request>:
int whois_decode_service_request(
    uint8_t * apdu,
    unsigned apdu_len,
    int32_t * pLow_limit,
    int32_t * pHigh_limit)
{
    350e:	8f 92       	push	r8
    3510:	9f 92       	push	r9
    3512:	af 92       	push	r10
    3514:	bf 92       	push	r11
    3516:	cf 92       	push	r12
    3518:	df 92       	push	r13
    351a:	ef 92       	push	r14
    351c:	ff 92       	push	r15
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
    352a:	29 97       	sbiw	r28, 0x09	; 9
    352c:	0f b6       	in	r0, 0x3f	; 63
    352e:	f8 94       	cli
    3530:	de bf       	out	0x3e, r29	; 62
    3532:	0f be       	out	0x3f, r0	; 63
    3534:	cd bf       	out	0x3d, r28	; 61
    3536:	6c 01       	movw	r12, r24
    3538:	5b 01       	movw	r10, r22
    353a:	7a 01       	movw	r14, r20
    353c:	89 01       	movw	r16, r18
    unsigned int len = 0;
    uint8_t tag_number = 0;
    353e:	19 86       	std	Y+9, r1	; 0x09
    uint32_t len_value = 0;
    3540:	1d 82       	std	Y+5, r1	; 0x05
    3542:	1e 82       	std	Y+6, r1	; 0x06
    3544:	1f 82       	std	Y+7, r1	; 0x07
    3546:	18 86       	std	Y+8, r1	; 0x08
    uint32_t decoded_value = 0;
    3548:	19 82       	std	Y+1, r1	; 0x01
    354a:	1a 82       	std	Y+2, r1	; 0x02
    354c:	1b 82       	std	Y+3, r1	; 0x03
    354e:	1c 82       	std	Y+4, r1	; 0x04

    /* optional limits - must be used as a pair */
    if (apdu_len) {
    3550:	61 15       	cp	r22, r1
    3552:	71 05       	cpc	r23, r1
    3554:	09 f4       	brne	.+2      	; 0x3558 <whois_decode_service_request+0x4a>
    3556:	68 c0       	rjmp	.+208    	; 0x3628 <whois_decode_service_request+0x11a>
        len +=
            decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
    3558:	ae 01       	movw	r20, r28
    355a:	4b 5f       	subi	r20, 0xFB	; 251
    355c:	5f 4f       	sbci	r21, 0xFF	; 255
    355e:	be 01       	movw	r22, r28
    3560:	67 5f       	subi	r22, 0xF7	; 247
    3562:	7f 4f       	sbci	r23, 0xFF	; 255
    3564:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
    3568:	4c 01       	movw	r8, r24
        if (tag_number != 0) {
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	88 23       	and	r24, r24
    356e:	19 f0       	breq	.+6      	; 0x3576 <whois_decode_service_request+0x68>
            return BACNET_STATUS_ERROR;
    3570:	8f ef       	ldi	r24, 0xFF	; 255
    3572:	9f ef       	ldi	r25, 0xFF	; 255
    3574:	72 c0       	rjmp	.+228    	; 0x365a <whois_decode_service_request+0x14c>
        }
        if (apdu_len > (unsigned)len) {
    3576:	8a 14       	cp	r8, r10
    3578:	9b 04       	cpc	r9, r11
    357a:	d0 f7       	brcc	.-12     	; 0x3570 <whois_decode_service_request+0x62>
            len += decode_unsigned(&apdu[len], len_value, &decoded_value);
    357c:	4d 81       	ldd	r20, Y+5	; 0x05
    357e:	5e 81       	ldd	r21, Y+6	; 0x06
    3580:	6f 81       	ldd	r22, Y+7	; 0x07
    3582:	78 85       	ldd	r23, Y+8	; 0x08
    3584:	9e 01       	movw	r18, r28
    3586:	2f 5f       	subi	r18, 0xFF	; 255
    3588:	3f 4f       	sbci	r19, 0xFF	; 255
    358a:	c6 01       	movw	r24, r12
    358c:	88 0d       	add	r24, r8
    358e:	99 1d       	adc	r25, r9
    3590:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <decode_unsigned>
    3594:	88 0e       	add	r8, r24
    3596:	99 1e       	adc	r9, r25
            if (decoded_value <= BACNET_MAX_INSTANCE) {
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	ab 81       	ldd	r26, Y+3	; 0x03
    359e:	bc 81       	ldd	r27, Y+4	; 0x04
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	20 e4       	ldi	r18, 0x40	; 64
    35a4:	a2 07       	cpc	r26, r18
    35a6:	b1 05       	cpc	r27, r1
    35a8:	40 f4       	brcc	.+16     	; 0x35ba <whois_decode_service_request+0xac>
                if (pLow_limit) {
    35aa:	e1 14       	cp	r14, r1
    35ac:	f1 04       	cpc	r15, r1
    35ae:	29 f0       	breq	.+10     	; 0x35ba <whois_decode_service_request+0xac>
                    *pLow_limit = decoded_value;
    35b0:	f7 01       	movw	r30, r14
    35b2:	80 83       	st	Z, r24
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	a2 83       	std	Z+2, r26	; 0x02
    35b8:	b3 83       	std	Z+3, r27	; 0x03
                }
            }
            if (apdu_len > (unsigned)len) {
    35ba:	8a 14       	cp	r8, r10
    35bc:	9b 04       	cpc	r9, r11
    35be:	c0 f6       	brcc	.-80     	; 0x3570 <whois_decode_service_request+0x62>
                len +=
                    decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
    35c0:	ae 01       	movw	r20, r28
    35c2:	4b 5f       	subi	r20, 0xFB	; 251
    35c4:	5f 4f       	sbci	r21, 0xFF	; 255
    35c6:	be 01       	movw	r22, r28
    35c8:	67 5f       	subi	r22, 0xF7	; 247
    35ca:	7f 4f       	sbci	r23, 0xFF	; 255
    35cc:	c6 01       	movw	r24, r12
    35ce:	88 0d       	add	r24, r8
    35d0:	99 1d       	adc	r25, r9
    35d2:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
                len +=
    35d6:	88 0e       	add	r8, r24
    35d8:	99 1e       	adc	r9, r25
                if (tag_number != 1) {
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	81 30       	cpi	r24, 0x01	; 1
    35de:	41 f6       	brne	.-112    	; 0x3570 <whois_decode_service_request+0x62>
                    return BACNET_STATUS_ERROR;
                }
                if (apdu_len > (unsigned)len) {
    35e0:	8a 14       	cp	r8, r10
    35e2:	9b 04       	cpc	r9, r11
    35e4:	28 f6       	brcc	.-118    	; 0x3570 <whois_decode_service_request+0x62>
                    len += decode_unsigned(&apdu[len], len_value, &decoded_value);
    35e6:	4d 81       	ldd	r20, Y+5	; 0x05
    35e8:	5e 81       	ldd	r21, Y+6	; 0x06
    35ea:	6f 81       	ldd	r22, Y+7	; 0x07
    35ec:	78 85       	ldd	r23, Y+8	; 0x08
    35ee:	9e 01       	movw	r18, r28
    35f0:	2f 5f       	subi	r18, 0xFF	; 255
    35f2:	3f 4f       	sbci	r19, 0xFF	; 255
    35f4:	c6 01       	movw	r24, r12
    35f6:	88 0d       	add	r24, r8
    35f8:	99 1d       	adc	r25, r9
    35fa:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <decode_unsigned>
    35fe:	88 0e       	add	r8, r24
    3600:	99 1e       	adc	r9, r25
                    if (decoded_value <= BACNET_MAX_INSTANCE) {
    3602:	49 81       	ldd	r20, Y+1	; 0x01
    3604:	5a 81       	ldd	r21, Y+2	; 0x02
    3606:	6b 81       	ldd	r22, Y+3	; 0x03
    3608:	7c 81       	ldd	r23, Y+4	; 0x04
    360a:	41 15       	cp	r20, r1
    360c:	51 05       	cpc	r21, r1
    360e:	f0 e4       	ldi	r31, 0x40	; 64
    3610:	6f 07       	cpc	r22, r31
    3612:	71 05       	cpc	r23, r1
    3614:	08 f5       	brcc	.+66     	; 0x3658 <whois_decode_service_request+0x14a>
                        if (pHigh_limit) {
    3616:	01 15       	cp	r16, r1
    3618:	11 05       	cpc	r17, r1
    361a:	f1 f0       	breq	.+60     	; 0x3658 <whois_decode_service_request+0x14a>
                            *pHigh_limit = decoded_value;
    361c:	f8 01       	movw	r30, r16
    361e:	40 83       	st	Z, r20
    3620:	51 83       	std	Z+1, r21	; 0x01
    3622:	62 83       	std	Z+2, r22	; 0x02
    3624:	73 83       	std	Z+3, r23	; 0x03
    3626:	18 c0       	rjmp	.+48     	; 0x3658 <whois_decode_service_request+0x14a>
            }
        } else {
            return BACNET_STATUS_ERROR;
        }
    } else {
        if (pLow_limit) {
    3628:	41 15       	cp	r20, r1
    362a:	51 05       	cpc	r21, r1
    362c:	41 f0       	breq	.+16     	; 0x363e <whois_decode_service_request+0x130>
            *pLow_limit = -1;
    362e:	8f ef       	ldi	r24, 0xFF	; 255
    3630:	9f ef       	ldi	r25, 0xFF	; 255
    3632:	dc 01       	movw	r26, r24
    3634:	fa 01       	movw	r30, r20
    3636:	80 83       	st	Z, r24
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	a2 83       	std	Z+2, r26	; 0x02
    363c:	b3 83       	std	Z+3, r27	; 0x03
        }
        if (pHigh_limit) {
    363e:	01 15       	cp	r16, r1
    3640:	11 05       	cpc	r17, r1
    3642:	41 f0       	breq	.+16     	; 0x3654 <whois_decode_service_request+0x146>
            *pHigh_limit = -1;
    3644:	8f ef       	ldi	r24, 0xFF	; 255
    3646:	9f ef       	ldi	r25, 0xFF	; 255
    3648:	dc 01       	movw	r26, r24
    364a:	f8 01       	movw	r30, r16
    364c:	80 83       	st	Z, r24
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	a2 83       	std	Z+2, r26	; 0x02
    3652:	b3 83       	std	Z+3, r27	; 0x03
        }
        len = 0;
    3654:	81 2c       	mov	r8, r1
    3656:	91 2c       	mov	r9, r1
    }

    return (int)len;
    3658:	c4 01       	movw	r24, r8
}
    365a:	29 96       	adiw	r28, 0x09	; 9
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	ff 90       	pop	r15
    3670:	ef 90       	pop	r14
    3672:	df 90       	pop	r13
    3674:	cf 90       	pop	r12
    3676:	bf 90       	pop	r11
    3678:	af 90       	pop	r10
    367a:	9f 90       	pop	r9
    367c:	8f 90       	pop	r8
    367e:	08 95       	ret

00003680 <abort_encode_apdu>:
int abort_encode_apdu(
    uint8_t * apdu,
    uint8_t invoke_id,
    uint8_t abort_reason,
    bool server)
{
    3680:	fc 01       	movw	r30, r24
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    3682:	00 97       	sbiw	r24, 0x00	; 0
    3684:	59 f0       	breq	.+22     	; 0x369c <abort_encode_apdu+0x1c>
        if (server)
    3686:	22 23       	and	r18, r18
    3688:	11 f0       	breq	.+4      	; 0x368e <abort_encode_apdu+0xe>
            apdu[0] = PDU_TYPE_ABORT | 1;
    368a:	81 e7       	ldi	r24, 0x71	; 113
    368c:	01 c0       	rjmp	.+2      	; 0x3690 <abort_encode_apdu+0x10>
        else
            apdu[0] = PDU_TYPE_ABORT;
    368e:	80 e7       	ldi	r24, 0x70	; 112
    3690:	80 83       	st	Z, r24
        apdu[1] = invoke_id;
    3692:	61 83       	std	Z+1, r22	; 0x01
        apdu[2] = abort_reason;
    3694:	42 83       	std	Z+2, r20	; 0x02
        apdu_len = 3;
    3696:	83 e0       	ldi	r24, 0x03	; 3
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	08 95       	ret
    int apdu_len = 0;   /* total length of the apdu, return value */
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    36a0:	08 95       	ret

000036a2 <reject_encode_apdu>:
/* encode service */
int reject_encode_apdu(
    uint8_t * apdu,
    uint8_t invoke_id,
    uint8_t reject_reason)
{
    36a2:	fc 01       	movw	r30, r24
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	39 f0       	breq	.+14     	; 0x36b6 <reject_encode_apdu+0x14>
        apdu[0] = PDU_TYPE_REJECT;
    36a8:	80 e6       	ldi	r24, 0x60	; 96
    36aa:	80 83       	st	Z, r24
        apdu[1] = invoke_id;
    36ac:	61 83       	std	Z+1, r22	; 0x01
        apdu[2] = reject_reason;
    36ae:	42 83       	std	Z+2, r20	; 0x02
        apdu_len = 3;
    36b0:	83 e0       	ldi	r24, 0x03	; 3
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	08 95       	ret
    int apdu_len = 0;   /* total length of the apdu, return value */
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    36ba:	08 95       	ret

000036bc <bacerror_encode_apdu>:
    uint8_t * apdu,
    uint8_t invoke_id,
    BACNET_CONFIRMED_SERVICE service,
    BACNET_ERROR_CLASS error_class,
    BACNET_ERROR_CODE error_code)
{
    36bc:	ef 92       	push	r14
    36be:	ff 92       	push	r15
    36c0:	0f 93       	push	r16
    36c2:	1f 93       	push	r17
    36c4:	cf 93       	push	r28
    36c6:	df 93       	push	r29
    36c8:	ec 01       	movw	r28, r24
    int apdu_len = 0;   /* total length of the apdu, return value */

    if (apdu) {
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	c1 f0       	breq	.+48     	; 0x36fe <bacerror_encode_apdu+0x42>
        apdu[0] = PDU_TYPE_ERROR;
    36ce:	90 e5       	ldi	r25, 0x50	; 80
    36d0:	98 83       	st	Y, r25
        apdu[1] = invoke_id;
    36d2:	69 83       	std	Y+1, r22	; 0x01
        apdu[2] = service;
    36d4:	4a 83       	std	Y+2, r20	; 0x02
        apdu_len = 3;
        /* service parameters */
        apdu_len +=
            encode_application_enumerated(&apdu[apdu_len], error_class);
    36d6:	a9 01       	movw	r20, r18
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	ce 01       	movw	r24, r28
    36de:	03 96       	adiw	r24, 0x03	; 3
    36e0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <encode_application_enumerated>
        apdu_len +=
    36e4:	03 96       	adiw	r24, 0x03	; 3
    36e6:	7c 01       	movw	r14, r24
        apdu_len += encode_application_enumerated(&apdu[apdu_len], error_code);
    36e8:	a8 01       	movw	r20, r16
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	70 e0       	ldi	r23, 0x00	; 0
    36ee:	ce 01       	movw	r24, r28
    36f0:	8e 0d       	add	r24, r14
    36f2:	9f 1d       	adc	r25, r15
    36f4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <encode_application_enumerated>
    36f8:	8e 0d       	add	r24, r14
    36fa:	9f 1d       	adc	r25, r15
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <bacerror_encode_apdu+0x46>
    int apdu_len = 0;   /* total length of the apdu, return value */
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	90 e0       	ldi	r25, 0x00	; 0
    }

    return apdu_len;
}
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	08 95       	ret

00003710 <bacapp_decode_data>:
int bacapp_decode_data(
    uint8_t * apdu,
    uint8_t tag_data_type,
    uint32_t len_value_type,
    BACNET_APPLICATION_DATA_VALUE * value)
{
    3710:	df 92       	push	r13
    3712:	ef 92       	push	r14
    3714:	ff 92       	push	r15
    3716:	0f 93       	push	r16
    3718:	1f 93       	push	r17
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	00 d0       	rcall	.+0      	; 0x3720 <bacapp_decode_data+0x10>
    3720:	00 d0       	rcall	.+0      	; 0x3722 <bacapp_decode_data+0x12>
    3722:	00 d0       	rcall	.+0      	; 0x3724 <bacapp_decode_data+0x14>
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	d6 2e       	mov	r13, r22
    372a:	ba 01       	movw	r22, r20
    372c:	a9 01       	movw	r20, r18
    372e:	78 01       	movw	r14, r16
    int len = 0;

    if (apdu && value) {
    3730:	00 97       	sbiw	r24, 0x00	; 0
    3732:	09 f4       	brne	.+2      	; 0x3736 <bacapp_decode_data+0x26>
    3734:	4a c0       	rjmp	.+148    	; 0x37ca <bacapp_decode_data+0xba>
    3736:	01 15       	cp	r16, r1
    3738:	11 05       	cpc	r17, r1
    373a:	09 f4       	brne	.+2      	; 0x373e <bacapp_decode_data+0x2e>
    373c:	46 c0       	rjmp	.+140    	; 0x37ca <bacapp_decode_data+0xba>
        switch (tag_data_type) {
    373e:	27 e0       	ldi	r18, 0x07	; 7
    3740:	d2 16       	cp	r13, r18
    3742:	b1 f1       	breq	.+108    	; 0x37b0 <bacapp_decode_data+0xa0>
    3744:	2d 15       	cp	r18, r13
    3746:	60 f0       	brcs	.+24     	; 0x3760 <bacapp_decode_data+0x50>
    3748:	e2 e0       	ldi	r30, 0x02	; 2
    374a:	de 16       	cp	r13, r30
    374c:	59 f1       	breq	.+86     	; 0x37a4 <bacapp_decode_data+0x94>
    374e:	f4 e0       	ldi	r31, 0x04	; 4
    3750:	df 12       	cpse	r13, r31
    3752:	3b c0       	rjmp	.+118    	; 0x37ca <bacapp_decode_data+0xba>
                break;
#endif
#if defined (BACAPP_REAL)
            case BACNET_APPLICATION_TAG_REAL:
                len =
                    decode_real_safe(&apdu[0], len_value_type,
    3754:	98 01       	movw	r18, r16
    3756:	2d 5f       	subi	r18, 0xFD	; 253
    3758:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    375a:	0e 94 03 17 	call	0x2e06	; 0x2e06 <decode_real_safe>
                    &(value->type.Real));
                break;
    375e:	33 c0       	rjmp	.+102    	; 0x37c6 <bacapp_decode_data+0xb6>
        switch (tag_data_type) {
    3760:	29 e0       	ldi	r18, 0x09	; 9
    3762:	d2 16       	cp	r13, r18
    3764:	59 f1       	breq	.+86     	; 0x37bc <bacapp_decode_data+0xac>
    3766:	ec e0       	ldi	r30, 0x0C	; 12
    3768:	de 12       	cpse	r13, r30
    376a:	2f c0       	rjmp	.+94     	; 0x37ca <bacapp_decode_data+0xba>
                break;
#endif
#if defined (BACAPP_OBJECT_ID)
            case BACNET_APPLICATION_TAG_OBJECT_ID:
                {
                    uint16_t object_type = 0;
    376c:	1e 82       	std	Y+6, r1	; 0x06
    376e:	1d 82       	std	Y+5, r1	; 0x05
                    uint32_t instance = 0;
    3770:	19 82       	std	Y+1, r1	; 0x01
    3772:	1a 82       	std	Y+2, r1	; 0x02
    3774:	1b 82       	std	Y+3, r1	; 0x03
    3776:	1c 82       	std	Y+4, r1	; 0x04
                    len =
    3778:	8e 01       	movw	r16, r28
    377a:	0f 5f       	subi	r16, 0xFF	; 255
    377c:	1f 4f       	sbci	r17, 0xFF	; 255
    377e:	9e 01       	movw	r18, r28
    3780:	2b 5f       	subi	r18, 0xFB	; 251
    3782:	3f 4f       	sbci	r19, 0xFF	; 255
    3784:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <decode_object_id_safe>
                        decode_object_id_safe(&apdu[0], len_value_type,
                        &object_type, &instance);
                    value->type.Object_Id.type = object_type;
    3788:	2d 81       	ldd	r18, Y+5	; 0x05
    378a:	3e 81       	ldd	r19, Y+6	; 0x06
    378c:	f7 01       	movw	r30, r14
    378e:	34 83       	std	Z+4, r19	; 0x04
    3790:	23 83       	std	Z+3, r18	; 0x03
                    value->type.Object_Id.instance = instance;
    3792:	49 81       	ldd	r20, Y+1	; 0x01
    3794:	5a 81       	ldd	r21, Y+2	; 0x02
    3796:	6b 81       	ldd	r22, Y+3	; 0x03
    3798:	7c 81       	ldd	r23, Y+4	; 0x04
    379a:	45 83       	std	Z+5, r20	; 0x05
    379c:	56 83       	std	Z+6, r21	; 0x06
    379e:	67 83       	std	Z+7, r22	; 0x07
    37a0:	70 87       	std	Z+8, r23	; 0x08
                }
                break;
    37a2:	11 c0       	rjmp	.+34     	; 0x37c6 <bacapp_decode_data+0xb6>
                    decode_unsigned(&apdu[0], len_value_type,
    37a4:	98 01       	movw	r18, r16
    37a6:	2d 5f       	subi	r18, 0xFD	; 253
    37a8:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    37aa:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <decode_unsigned>
                break;
    37ae:	0b c0       	rjmp	.+22     	; 0x37c6 <bacapp_decode_data+0xb6>
                    decode_character_string(&apdu[0], len_value_type,
    37b0:	98 01       	movw	r18, r16
    37b2:	2d 5f       	subi	r18, 0xFD	; 253
    37b4:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    37b6:	0e 94 de 14 	call	0x29bc	; 0x29bc <decode_character_string>
                break;
    37ba:	05 c0       	rjmp	.+10     	; 0x37c6 <bacapp_decode_data+0xb6>
                    decode_enumerated(&apdu[0], len_value_type,
    37bc:	98 01       	movw	r18, r16
    37be:	2d 5f       	subi	r18, 0xFD	; 253
    37c0:	3f 4f       	sbci	r19, 0xFF	; 255
                len =
    37c2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <decode_enumerated>
            default:
                break;
        }
    }

    if ((len == 0) && (tag_data_type != BACNET_APPLICATION_TAG_NULL) &&
    37c6:	00 97       	sbiw	r24, 0x00	; 0
    37c8:	71 f4       	brne	.+28     	; 0x37e6 <bacapp_decode_data+0xd6>
    37ca:	f1 e0       	ldi	r31, 0x01	; 1
    37cc:	fd 15       	cp	r31, r13
    37ce:	48 f4       	brcc	.+18     	; 0x37e2 <bacapp_decode_data+0xd2>
        (tag_data_type != BACNET_APPLICATION_TAG_BOOLEAN) &&
    37d0:	26 e0       	ldi	r18, 0x06	; 6
    37d2:	d2 16       	cp	r13, r18
    37d4:	31 f0       	breq	.+12     	; 0x37e2 <bacapp_decode_data+0xd2>
        (tag_data_type != BACNET_APPLICATION_TAG_OCTET_STRING)) {
        /* indicate that we were not able to decode the value */
        if (value) {
    37d6:	e1 14       	cp	r14, r1
    37d8:	f1 04       	cpc	r15, r1
    37da:	19 f0       	breq	.+6      	; 0x37e2 <bacapp_decode_data+0xd2>
            value->tag = MAX_BACNET_APPLICATION_TAG;
    37dc:	80 e1       	ldi	r24, 0x10	; 16
    37de:	f7 01       	movw	r30, r14
    37e0:	82 83       	std	Z+2, r24	; 0x02
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
        }
    }
    return len;
}
    37e6:	26 96       	adiw	r28, 0x06	; 6
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	ff 90       	pop	r15
    37fc:	ef 90       	pop	r14
    37fe:	df 90       	pop	r13
    3800:	08 95       	ret

00003802 <bacapp_decode_application_data>:

int bacapp_decode_application_data(
    uint8_t * apdu,
    unsigned max_apdu_len,
    BACNET_APPLICATION_DATA_VALUE * value)
{
    3802:	af 92       	push	r10
    3804:	bf 92       	push	r11
    3806:	cf 92       	push	r12
    3808:	df 92       	push	r13
    380a:	ef 92       	push	r14
    380c:	ff 92       	push	r15
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	00 d0       	rcall	.+0      	; 0x3818 <bacapp_decode_application_data+0x16>
    3818:	00 d0       	rcall	.+0      	; 0x381a <bacapp_decode_application_data+0x18>
    381a:	1f 92       	push	r1
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	6c 01       	movw	r12, r24
    3822:	7a 01       	movw	r14, r20
    int len = 0;
    int tag_len = 0;
    int decode_len = 0;
    uint8_t tag_number = 0;
    3824:	1d 82       	std	Y+5, r1	; 0x05
    uint32_t len_value_type = 0;
    3826:	19 82       	std	Y+1, r1	; 0x01
    3828:	1a 82       	std	Y+2, r1	; 0x02
    382a:	1b 82       	std	Y+3, r1	; 0x03
    382c:	1c 82       	std	Y+4, r1	; 0x04

    /* FIXME: use max_apdu_len! */
    (void)max_apdu_len;
    if (apdu && value && !IS_CONTEXT_SPECIFIC(*apdu)) {
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	a1 f1       	breq	.+104    	; 0x389a <bacapp_decode_application_data+0x98>
    3832:	41 15       	cp	r20, r1
    3834:	51 05       	cpc	r21, r1
    3836:	89 f1       	breq	.+98     	; 0x389a <bacapp_decode_application_data+0x98>
    3838:	fc 01       	movw	r30, r24
    383a:	80 81       	ld	r24, Z
    383c:	83 fd       	sbrc	r24, 3
    383e:	2d c0       	rjmp	.+90     	; 0x389a <bacapp_decode_application_data+0x98>
        value->context_specific = false;
    3840:	fa 01       	movw	r30, r20
    3842:	10 82       	st	Z, r1
        tag_len =
    3844:	ae 01       	movw	r20, r28
    3846:	4f 5f       	subi	r20, 0xFF	; 255
    3848:	5f 4f       	sbci	r21, 0xFF	; 255
    384a:	be 01       	movw	r22, r28
    384c:	6b 5f       	subi	r22, 0xFB	; 251
    384e:	7f 4f       	sbci	r23, 0xFF	; 255
    3850:	c6 01       	movw	r24, r12
    3852:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
    3856:	5c 01       	movw	r10, r24
            decode_tag_number_and_value(&apdu[0], &tag_number,
            &len_value_type);
        if (tag_len) {
    3858:	00 97       	sbiw	r24, 0x00	; 0
    385a:	a1 f0       	breq	.+40     	; 0x3884 <bacapp_decode_application_data+0x82>
            len += tag_len;
            value->tag = tag_number;
    385c:	6d 81       	ldd	r22, Y+5	; 0x05
    385e:	f7 01       	movw	r30, r14
    3860:	62 83       	std	Z+2, r22	; 0x02
            decode_len =
    3862:	29 81       	ldd	r18, Y+1	; 0x01
    3864:	3a 81       	ldd	r19, Y+2	; 0x02
    3866:	4b 81       	ldd	r20, Y+3	; 0x03
    3868:	5c 81       	ldd	r21, Y+4	; 0x04
    386a:	87 01       	movw	r16, r14
    386c:	c6 01       	movw	r24, r12
    386e:	8a 0d       	add	r24, r10
    3870:	9b 1d       	adc	r25, r11
    3872:	0e 94 88 1b 	call	0x3710	; 0x3710 <bacapp_decode_data>
                bacapp_decode_data(&apdu[len], tag_number, len_value_type,
                value);
            if (value->tag != MAX_BACNET_APPLICATION_TAG) {
    3876:	f7 01       	movw	r30, r14
    3878:	22 81       	ldd	r18, Z+2	; 0x02
    387a:	20 31       	cpi	r18, 0x10	; 16
    387c:	31 f0       	breq	.+12     	; 0x388a <bacapp_decode_application_data+0x88>
                len += decode_len;
    387e:	8a 0d       	add	r24, r10
    3880:	9b 1d       	adc	r25, r11
    3882:	05 c0       	rjmp	.+10     	; 0x388e <bacapp_decode_application_data+0x8c>
    int len = 0;
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	02 c0       	rjmp	.+4      	; 0x388e <bacapp_decode_application_data+0x8c>
            } else {
                len = BACNET_STATUS_ERROR;
    388a:	8f ef       	ldi	r24, 0xFF	; 255
    388c:	9f ef       	ldi	r25, 0xFF	; 255
            }
        }
        value->next = NULL;
    388e:	f7 01       	movw	r30, r14
    3890:	ec 59       	subi	r30, 0x9C	; 156
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	11 82       	std	Z+1, r1	; 0x01
    3896:	10 82       	st	Z, r1
    3898:	02 c0       	rjmp	.+4      	; 0x389e <bacapp_decode_application_data+0x9c>
    int len = 0;
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	90 e0       	ldi	r25, 0x00	; 0
    }

    return len;
}
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	ff 90       	pop	r15
    38b2:	ef 90       	pop	r14
    38b4:	df 90       	pop	r13
    38b6:	cf 90       	pop	r12
    38b8:	bf 90       	pop	r11
    38ba:	af 90       	pop	r10
    38bc:	08 95       	ret

000038be <bacapp_decode_data_len>:
    uint8_t tag_data_type,
    uint32_t len_value_type)
{
    int len = 0;

    if (apdu) {
    38be:	89 2b       	or	r24, r25
    38c0:	29 f0       	breq	.+10     	; 0x38cc <bacapp_decode_data_len+0xe>
        switch (tag_data_type) {
    38c2:	62 50       	subi	r22, 0x02	; 2
    38c4:	6b 30       	cpi	r22, 0x0B	; 11
    38c6:	10 f4       	brcc	.+4      	; 0x38cc <bacapp_decode_data_len+0xe>
            case BACNET_APPLICATION_TAG_BIT_STRING:
            case BACNET_APPLICATION_TAG_ENUMERATED:
            case BACNET_APPLICATION_TAG_DATE:
            case BACNET_APPLICATION_TAG_TIME:
            case BACNET_APPLICATION_TAG_OBJECT_ID:
                len = (int) len_value_type;
    38c8:	c9 01       	movw	r24, r18
                break;
    38ca:	08 95       	ret
    int len = 0;
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	90 e0       	ldi	r25, 0x00	; 0
                break;
        }
    }

    return len;
}
    38d0:	08 95       	ret

000038d2 <bacapp_decode_application_data_len>:

int bacapp_decode_application_data_len(
    uint8_t * apdu,
    unsigned max_apdu_len)
{
    38d2:	ef 92       	push	r14
    38d4:	ff 92       	push	r15
    38d6:	0f 93       	push	r16
    38d8:	1f 93       	push	r17
    38da:	cf 93       	push	r28
    38dc:	df 93       	push	r29
    38de:	00 d0       	rcall	.+0      	; 0x38e0 <bacapp_decode_application_data_len+0xe>
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <bacapp_decode_application_data_len+0x10>
    38e2:	1f 92       	push	r1
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	8c 01       	movw	r16, r24
    int len = 0;
    int tag_len = 0;
    int decode_len = 0;
    uint8_t tag_number = 0;
    38ea:	1d 82       	std	Y+5, r1	; 0x05
    uint32_t len_value_type = 0;
    38ec:	19 82       	std	Y+1, r1	; 0x01
    38ee:	1a 82       	std	Y+2, r1	; 0x02
    38f0:	1b 82       	std	Y+3, r1	; 0x03
    38f2:	1c 82       	std	Y+4, r1	; 0x04

    /* FIXME: use max_apdu_len! */
    (void)max_apdu_len;
    if (apdu && !IS_CONTEXT_SPECIFIC(*apdu)) {
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	19 f4       	brne	.+6      	; 0x38fe <bacapp_decode_application_data_len+0x2c>
    int len = 0;
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	1c c0       	rjmp	.+56     	; 0x3936 <bacapp_decode_application_data_len+0x64>
    if (apdu && !IS_CONTEXT_SPECIFIC(*apdu)) {
    38fe:	fc 01       	movw	r30, r24
    3900:	80 81       	ld	r24, Z
    3902:	83 fd       	sbrc	r24, 3
    3904:	f9 cf       	rjmp	.-14     	; 0x38f8 <bacapp_decode_application_data_len+0x26>
        tag_len =
    3906:	ae 01       	movw	r20, r28
    3908:	4f 5f       	subi	r20, 0xFF	; 255
    390a:	5f 4f       	sbci	r21, 0xFF	; 255
    390c:	be 01       	movw	r22, r28
    390e:	6b 5f       	subi	r22, 0xFB	; 251
    3910:	7f 4f       	sbci	r23, 0xFF	; 255
    3912:	c8 01       	movw	r24, r16
    3914:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
    3918:	7c 01       	movw	r14, r24
            decode_tag_number_and_value(&apdu[0], &tag_number,
            &len_value_type);
        if (tag_len) {
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	69 f3       	breq	.-38     	; 0x38f8 <bacapp_decode_application_data_len+0x26>
            len += tag_len;
            decode_len =
    391e:	29 81       	ldd	r18, Y+1	; 0x01
    3920:	3a 81       	ldd	r19, Y+2	; 0x02
    3922:	4b 81       	ldd	r20, Y+3	; 0x03
    3924:	5c 81       	ldd	r21, Y+4	; 0x04
    3926:	6d 81       	ldd	r22, Y+5	; 0x05
    3928:	c8 01       	movw	r24, r16
    392a:	8e 0d       	add	r24, r14
    392c:	9f 1d       	adc	r25, r15
    392e:	0e 94 5f 1c 	call	0x38be	; 0x38be <bacapp_decode_data_len>
                bacapp_decode_data_len(&apdu[len], tag_number, len_value_type);
            len += decode_len;
    3932:	8e 0d       	add	r24, r14
    3934:	9f 1d       	adc	r25, r15
        }
    }

    return len;
}
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	08 95       	ret

0000394e <bacapp_context_tag_type>:
    BACNET_PROPERTY_ID property,
    uint8_t tag_number)
{
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;

    switch (property) {
    394e:	64 38       	cpi	r22, 0x84	; 132
    3950:	71 05       	cpc	r23, r1
    3952:	81 05       	cpc	r24, r1
    3954:	91 05       	cpc	r25, r1
    3956:	09 f4       	brne	.+2      	; 0x395a <bacapp_context_tag_type+0xc>
    3958:	47 c0       	rjmp	.+142    	; 0x39e8 <bacapp_context_tag_type+0x9a>
    395a:	c0 f4       	brcc	.+48     	; 0x398c <bacapp_context_tag_type+0x3e>
    395c:	66 32       	cpi	r22, 0x26	; 38
    395e:	71 05       	cpc	r23, r1
    3960:	81 05       	cpc	r24, r1
    3962:	91 05       	cpc	r25, r1
    3964:	e1 f1       	breq	.+120    	; 0x39de <bacapp_context_tag_type+0x90>
    3966:	30 f4       	brcc	.+12     	; 0x3974 <bacapp_context_tag_type+0x26>
    3968:	62 30       	cpi	r22, 0x02	; 2
    396a:	71 05       	cpc	r23, r1
    396c:	81 05       	cpc	r24, r1
    396e:	91 05       	cpc	r25, r1
    3970:	79 f1       	breq	.+94     	; 0x39d0 <bacapp_context_tag_type+0x82>
    3972:	57 c0       	rjmp	.+174    	; 0x3a22 <bacapp_context_tag_type+0xd4>
    3974:	65 33       	cpi	r22, 0x35	; 53
    3976:	71 05       	cpc	r23, r1
    3978:	81 05       	cpc	r24, r1
    397a:	91 05       	cpc	r25, r1
    397c:	09 f4       	brne	.+2      	; 0x3980 <bacapp_context_tag_type+0x32>
    397e:	40 c0       	rjmp	.+128    	; 0x3a00 <bacapp_context_tag_type+0xb2>
    3980:	66 36       	cpi	r22, 0x66	; 102
    3982:	71 05       	cpc	r23, r1
    3984:	81 05       	cpc	r24, r1
    3986:	91 05       	cpc	r25, r1
    3988:	d9 f1       	breq	.+118    	; 0x3a00 <bacapp_context_tag_type+0xb2>
    398a:	4b c0       	rjmp	.+150    	; 0x3a22 <bacapp_context_tag_type+0xd4>
    398c:	64 3d       	cpi	r22, 0xD4	; 212
    398e:	71 05       	cpc	r23, r1
    3990:	81 05       	cpc	r24, r1
    3992:	91 05       	cpc	r25, r1
    3994:	b1 f0       	breq	.+44     	; 0x39c2 <bacapp_context_tag_type+0x74>
    3996:	58 f4       	brcc	.+22     	; 0x39ae <bacapp_context_tag_type+0x60>
    3998:	68 39       	cpi	r22, 0x98	; 152
    399a:	71 05       	cpc	r23, r1
    399c:	81 05       	cpc	r24, r1
    399e:	91 05       	cpc	r25, r1
    39a0:	91 f1       	breq	.+100    	; 0x3a06 <bacapp_context_tag_type+0xb8>
    39a2:	63 3d       	cpi	r22, 0xD3	; 211
    39a4:	71 05       	cpc	r23, r1
    39a6:	81 05       	cpc	r24, r1
    39a8:	91 05       	cpc	r25, r1
    39aa:	39 f1       	breq	.+78     	; 0x39fa <bacapp_context_tag_type+0xac>
    39ac:	3a c0       	rjmp	.+116    	; 0x3a22 <bacapp_context_tag_type+0xd4>
    39ae:	66 3d       	cpi	r22, 0xD6	; 214
    39b0:	71 05       	cpc	r23, r1
    39b2:	81 05       	cpc	r24, r1
    39b4:	91 05       	cpc	r25, r1
    39b6:	29 f0       	breq	.+10     	; 0x39c2 <bacapp_context_tag_type+0x74>
    39b8:	6a 3d       	cpi	r22, 0xDA	; 218
    39ba:	71 05       	cpc	r23, r1
    39bc:	81 05       	cpc	r24, r1
    39be:	91 05       	cpc	r25, r1
    39c0:	81 f5       	brne	.+96     	; 0x3a22 <bacapp_context_tag_type+0xd4>
        case PROP_ACTUAL_SHED_LEVEL:
        case PROP_REQUESTED_SHED_LEVEL:
        case PROP_EXPECTED_SHED_LEVEL:
            switch (tag_number) {
    39c2:	42 30       	cpi	r20, 0x02	; 2
    39c4:	40 f1       	brcs	.+80     	; 0x3a16 <bacapp_context_tag_type+0xc8>
    39c6:	42 30       	cpi	r20, 0x02	; 2
    39c8:	61 f5       	brne	.+88     	; 0x3a22 <bacapp_context_tag_type+0xd4>
                case 0:
                case 1:
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
                    break;
                case 2:
                    tag = BACNET_APPLICATION_TAG_REAL;
    39ca:	84 e0       	ldi	r24, 0x04	; 4
    39cc:	90 e0       	ldi	r25, 0x00	; 0
                    break;
    39ce:	08 95       	ret
    39d0:	49 30       	cpi	r20, 0x09	; 9
    39d2:	38 f5       	brcc	.+78     	; 0x3a22 <bacapp_context_tag_type+0xd4>
    39d4:	e4 2f       	mov	r30, r20
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	ed 5e       	subi	r30, 0xED	; 237
    39da:	fd 4f       	sbci	r31, 0xFD	; 253
    39dc:	0b c0       	rjmp	.+22     	; 0x39f4 <bacapp_context_tag_type+0xa6>
                default:
                    break;
            }
            break;
        case PROP_EXCEPTION_SCHEDULE:
            switch (tag_number) {
    39de:	41 30       	cpi	r20, 0x01	; 1
    39e0:	e9 f0       	breq	.+58     	; 0x3a1c <bacapp_context_tag_type+0xce>
    39e2:	43 30       	cpi	r20, 0x03	; 3
    39e4:	c1 f0       	breq	.+48     	; 0x3a16 <bacapp_context_tag_type+0xc8>
    39e6:	1d c0       	rjmp	.+58     	; 0x3a22 <bacapp_context_tag_type+0xd4>
    39e8:	44 30       	cpi	r20, 0x04	; 4
    39ea:	d8 f4       	brcc	.+54     	; 0x3a22 <bacapp_context_tag_type+0xd4>
    39ec:	e4 2f       	mov	r30, r20
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	e1 5f       	subi	r30, 0xF1	; 241
    39f2:	fd 4f       	sbci	r31, 0xFD	; 253
    39f4:	80 81       	ld	r24, Z
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	08 95       	ret
                    break;
            }
            break;
        case PROP_SUBORDINATE_LIST:
            /* BACnetARRAY[N] of BACnetDeviceObjectReference */
            switch (tag_number) {
    39fa:	42 30       	cpi	r20, 0x02	; 2
    39fc:	78 f0       	brcs	.+30     	; 0x3a1c <bacapp_context_tag_type+0xce>
    39fe:	11 c0       	rjmp	.+34     	; 0x3a22 <bacapp_context_tag_type+0xd4>
            }
            break;

        case PROP_RECIPIENT_LIST:
            /* List of BACnetDestination */
            switch (tag_number) {
    3a00:	44 23       	and	r20, r20
    3a02:	61 f0       	breq	.+24     	; 0x3a1c <bacapp_context_tag_type+0xce>
    3a04:	0e c0       	rjmp	.+28     	; 0x3a22 <bacapp_context_tag_type+0xd4>
    3a06:	42 50       	subi	r20, 0x02	; 2
    3a08:	43 30       	cpi	r20, 0x03	; 3
    3a0a:	58 f4       	brcc	.+22     	; 0x3a22 <bacapp_context_tag_type+0xd4>
    3a0c:	e4 2f       	mov	r30, r20
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	e4 5f       	subi	r30, 0xF4	; 244
    3a12:	fd 4f       	sbci	r31, 0xFD	; 253
    3a14:	ef cf       	rjmp	.-34     	; 0x39f4 <bacapp_context_tag_type+0xa6>
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
    3a16:	82 e0       	ldi	r24, 0x02	; 2
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	08 95       	ret
                case 0:        /* Device Object ID */
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    3a1c:	8c e0       	ldi	r24, 0x0C	; 12
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	08 95       	ret
    3a22:	80 e1       	ldi	r24, 0x10	; 16
    3a24:	90 e0       	ldi	r25, 0x00	; 0
        default:
            break;
    }

    return tag;
}
    3a26:	08 95       	ret

00003a28 <bacapp_decode_context_data_len>:

int bacapp_decode_context_data_len(
    uint8_t * apdu,
    unsigned max_apdu_len,
    BACNET_PROPERTY_ID property)
{
    3a28:	af 92       	push	r10
    3a2a:	bf 92       	push	r11
    3a2c:	cf 92       	push	r12
    3a2e:	df 92       	push	r13
    3a30:	ef 92       	push	r14
    3a32:	ff 92       	push	r15
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <bacapp_decode_context_data_len+0x16>
    3a3e:	00 d0       	rcall	.+0      	; 0x3a40 <bacapp_decode_context_data_len+0x18>
    3a40:	1f 92       	push	r1
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	5c 01       	movw	r10, r24
    3a48:	69 01       	movw	r12, r18
    3a4a:	7a 01       	movw	r14, r20
    int apdu_len = 0, len = 0;
    int tag_len = 0;
    uint8_t tag_number = 0;
    3a4c:	1d 82       	std	Y+5, r1	; 0x05
    uint32_t len_value_type = 0;
    3a4e:	19 82       	std	Y+1, r1	; 0x01
    3a50:	1a 82       	std	Y+2, r1	; 0x02
    3a52:	1b 82       	std	Y+3, r1	; 0x03
    3a54:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t tag = 0;

    /* FIXME: use max_apdu_len! */
    (void)max_apdu_len;
    if (apdu && IS_CONTEXT_SPECIFIC(*apdu)) {
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	19 f4       	brne	.+6      	; 0x3a60 <bacapp_decode_context_data_len+0x38>
    int apdu_len = 0, len = 0;
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	26 c0       	rjmp	.+76     	; 0x3aac <bacapp_decode_context_data_len+0x84>
    if (apdu && IS_CONTEXT_SPECIFIC(*apdu)) {
    3a60:	fc 01       	movw	r30, r24
    3a62:	80 81       	ld	r24, Z
    3a64:	83 ff       	sbrs	r24, 3
    3a66:	f9 cf       	rjmp	.-14     	; 0x3a5a <bacapp_decode_context_data_len+0x32>
        tag_len =
    3a68:	ae 01       	movw	r20, r28
    3a6a:	4f 5f       	subi	r20, 0xFF	; 255
    3a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a6e:	be 01       	movw	r22, r28
    3a70:	6b 5f       	subi	r22, 0xFB	; 251
    3a72:	7f 4f       	sbci	r23, 0xFF	; 255
    3a74:	c5 01       	movw	r24, r10
    3a76:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
    3a7a:	8c 01       	movw	r16, r24
            decode_tag_number_and_value(&apdu[0], &tag_number,
            &len_value_type);
        if (tag_len) {
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	69 f3       	breq	.-38     	; 0x3a5a <bacapp_decode_context_data_len+0x32>
            apdu_len = tag_len;
            tag = bacapp_context_tag_type(property, tag_number);
    3a80:	4d 81       	ldd	r20, Y+5	; 0x05
    3a82:	c7 01       	movw	r24, r14
    3a84:	b6 01       	movw	r22, r12
    3a86:	0e 94 a7 1c 	call	0x394e	; 0x394e <bacapp_context_tag_type>
            if (tag < MAX_BACNET_APPLICATION_TAG) {
    3a8a:	80 31       	cpi	r24, 0x10	; 16
    3a8c:	58 f4       	brcc	.+22     	; 0x3aa4 <bacapp_decode_context_data_len+0x7c>
                len =
    3a8e:	29 81       	ldd	r18, Y+1	; 0x01
    3a90:	3a 81       	ldd	r19, Y+2	; 0x02
    3a92:	4b 81       	ldd	r20, Y+3	; 0x03
    3a94:	5c 81       	ldd	r21, Y+4	; 0x04
    3a96:	68 2f       	mov	r22, r24
    3a98:	c5 01       	movw	r24, r10
    3a9a:	80 0f       	add	r24, r16
    3a9c:	91 1f       	adc	r25, r17
    3a9e:	0e 94 5f 1c 	call	0x38be	; 0x38be <bacapp_decode_data_len>
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <bacapp_decode_context_data_len+0x80>
                    bacapp_decode_data_len(&apdu[apdu_len], tag,
                    len_value_type);
                apdu_len += len;
            } else {
                apdu_len += len_value_type;
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa8:	80 0f       	add	r24, r16
    3aaa:	91 1f       	adc	r25, r17
            }
        }
    }

    return apdu_len;
}
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	df 91       	pop	r29
    3ab8:	cf 91       	pop	r28
    3aba:	1f 91       	pop	r17
    3abc:	0f 91       	pop	r16
    3abe:	ff 90       	pop	r15
    3ac0:	ef 90       	pop	r14
    3ac2:	df 90       	pop	r13
    3ac4:	cf 90       	pop	r12
    3ac6:	bf 90       	pop	r11
    3ac8:	af 90       	pop	r10
    3aca:	08 95       	ret

00003acc <bacapp_data_len>:
   such as the value received in a WriteProperty request */
int bacapp_data_len(
    uint8_t * apdu,
    unsigned max_apdu_len,
    BACNET_PROPERTY_ID property)
{
    3acc:	4f 92       	push	r4
    3ace:	5f 92       	push	r5
    3ad0:	6f 92       	push	r6
    3ad2:	7f 92       	push	r7
    3ad4:	8f 92       	push	r8
    3ad6:	9f 92       	push	r9
    3ad8:	af 92       	push	r10
    3ada:	bf 92       	push	r11
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	00 d0       	rcall	.+0      	; 0x3aee <bacapp_data_len+0x22>
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <bacapp_data_len+0x24>
    3af0:	1f 92       	push	r1
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	6c 01       	movw	r12, r24
    3af8:	5b 01       	movw	r10, r22
    3afa:	29 01       	movw	r4, r18
    3afc:	3a 01       	movw	r6, r20
    int len = 0;
    int total_len = 0;
    int apdu_len = 0;
    uint8_t tag_number = 0;
    3afe:	1d 82       	std	Y+5, r1	; 0x05
    uint8_t opening_tag_number = 0;
    uint8_t opening_tag_number_counter = 0;
    uint32_t value = 0;
    3b00:	19 82       	std	Y+1, r1	; 0x01
    3b02:	1a 82       	std	Y+2, r1	; 0x02
    3b04:	1b 82       	std	Y+3, r1	; 0x03
    3b06:	1c 82       	std	Y+4, r1	; 0x04

    if (IS_OPENING_TAG(apdu[0])) {
    3b08:	fc 01       	movw	r30, r24
    3b0a:	80 81       	ld	r24, Z
    3b0c:	87 70       	andi	r24, 0x07	; 7
    3b0e:	86 30       	cpi	r24, 0x06	; 6
    3b10:	09 f0       	breq	.+2      	; 0x3b14 <bacapp_data_len+0x48>
    3b12:	4f c0       	rjmp	.+158    	; 0x3bb2 <bacapp_data_len+0xe6>
        len =
    3b14:	ae 01       	movw	r20, r28
    3b16:	4f 5f       	subi	r20, 0xFF	; 255
    3b18:	5f 4f       	sbci	r21, 0xFF	; 255
    3b1a:	be 01       	movw	r22, r28
    3b1c:	6b 5f       	subi	r22, 0xFB	; 251
    3b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b20:	c6 01       	movw	r24, r12
    3b22:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
    3b26:	7c 01       	movw	r14, r24
            decode_tag_number_and_value(&apdu[apdu_len], &tag_number, &value);
        apdu_len += len;
        opening_tag_number = tag_number;
    3b28:	8d 80       	ldd	r8, Y+5	; 0x05
        opening_tag_number_counter = 1;
    3b2a:	99 24       	eor	r9, r9
    3b2c:	93 94       	inc	r9
    int total_len = 0;
    3b2e:	00 e0       	ldi	r16, 0x00	; 0
    3b30:	10 e0       	ldi	r17, 0x00	; 0
        while (opening_tag_number_counter) {
            if (IS_OPENING_TAG(apdu[apdu_len])) {
    3b32:	c6 01       	movw	r24, r12
    3b34:	8e 0d       	add	r24, r14
    3b36:	9f 1d       	adc	r25, r15
    3b38:	fc 01       	movw	r30, r24
    3b3a:	20 81       	ld	r18, Z
    3b3c:	32 2f       	mov	r19, r18
    3b3e:	37 70       	andi	r19, 0x07	; 7
    3b40:	36 30       	cpi	r19, 0x06	; 6
    3b42:	69 f4       	brne	.+26     	; 0x3b5e <bacapp_data_len+0x92>
                len =
    3b44:	ae 01       	movw	r20, r28
    3b46:	4f 5f       	subi	r20, 0xFF	; 255
    3b48:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4a:	be 01       	movw	r22, r28
    3b4c:	6b 5f       	subi	r22, 0xFB	; 251
    3b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b50:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
                    decode_tag_number_and_value(&apdu[apdu_len], &tag_number,
                    &value);
                if (tag_number == opening_tag_number)
    3b54:	2d 81       	ldd	r18, Y+5	; 0x05
    3b56:	28 11       	cpse	r18, r8
    3b58:	1d c0       	rjmp	.+58     	; 0x3b94 <bacapp_data_len+0xc8>
                    opening_tag_number_counter++;
    3b5a:	93 94       	inc	r9
    3b5c:	1b c0       	rjmp	.+54     	; 0x3b94 <bacapp_data_len+0xc8>
            } else if (IS_CLOSING_TAG(apdu[apdu_len])) {
    3b5e:	37 30       	cpi	r19, 0x07	; 7
    3b60:	69 f4       	brne	.+26     	; 0x3b7c <bacapp_data_len+0xb0>
                len =
    3b62:	ae 01       	movw	r20, r28
    3b64:	4f 5f       	subi	r20, 0xFF	; 255
    3b66:	5f 4f       	sbci	r21, 0xFF	; 255
    3b68:	be 01       	movw	r22, r28
    3b6a:	6b 5f       	subi	r22, 0xFB	; 251
    3b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6e:	0e 94 41 12 	call	0x2482	; 0x2482 <decode_tag_number_and_value>
                    decode_tag_number_and_value(&apdu[apdu_len], &tag_number,
                    &value);
                if (tag_number == opening_tag_number)
    3b72:	2d 81       	ldd	r18, Y+5	; 0x05
    3b74:	28 11       	cpse	r18, r8
    3b76:	0e c0       	rjmp	.+28     	; 0x3b94 <bacapp_data_len+0xc8>
                    opening_tag_number_counter--;
    3b78:	9a 94       	dec	r9
    3b7a:	0c c0       	rjmp	.+24     	; 0x3b94 <bacapp_data_len+0xc8>
    3b7c:	b5 01       	movw	r22, r10
    3b7e:	6e 19       	sub	r22, r14
    3b80:	7f 09       	sbc	r23, r15
            } else if (IS_CONTEXT_SPECIFIC(apdu[apdu_len])) {
    3b82:	23 ff       	sbrs	r18, 3
    3b84:	05 c0       	rjmp	.+10     	; 0x3b90 <bacapp_data_len+0xc4>
                /* context-specific tagged data */
                len =
    3b86:	a3 01       	movw	r20, r6
    3b88:	92 01       	movw	r18, r4
    3b8a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <bacapp_decode_context_data_len>
    3b8e:	02 c0       	rjmp	.+4      	; 0x3b94 <bacapp_data_len+0xc8>
                    bacapp_decode_context_data_len(&apdu[apdu_len],
                    max_apdu_len - apdu_len, property);
            } else {
                /* application tagged data */
                len =
    3b90:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <bacapp_decode_application_data_len>
                    bacapp_decode_application_data_len(&apdu[apdu_len],
                    max_apdu_len - apdu_len);
            }
            apdu_len += len;
    3b94:	e8 0e       	add	r14, r24
    3b96:	f9 1e       	adc	r15, r25
            if (opening_tag_number_counter) {
    3b98:	99 20       	and	r9, r9
    3b9a:	29 f0       	breq	.+10     	; 0x3ba6 <bacapp_data_len+0xda>
                if (len > 0) {
    3b9c:	18 16       	cp	r1, r24
    3b9e:	19 06       	cpc	r1, r25
    3ba0:	5c f4       	brge	.+22     	; 0x3bb8 <bacapp_data_len+0xec>
                    total_len += len;
    3ba2:	08 0f       	add	r16, r24
    3ba4:	19 1f       	adc	r17, r25
                    /* error: len is not incrementing */
                    total_len = BACNET_STATUS_ERROR;
                    break;
                }
            }
            if ((unsigned) apdu_len > max_apdu_len) {
    3ba6:	ae 14       	cp	r10, r14
    3ba8:	bf 04       	cpc	r11, r15
    3baa:	30 f0       	brcs	.+12     	; 0x3bb8 <bacapp_data_len+0xec>
        while (opening_tag_number_counter) {
    3bac:	91 10       	cpse	r9, r1
    3bae:	c1 cf       	rjmp	.-126    	; 0x3b32 <bacapp_data_len+0x66>
    3bb0:	05 c0       	rjmp	.+10     	; 0x3bbc <bacapp_data_len+0xf0>
    int total_len = 0;
    3bb2:	00 e0       	ldi	r16, 0x00	; 0
    3bb4:	10 e0       	ldi	r17, 0x00	; 0
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <bacapp_data_len+0xf0>
                    total_len = BACNET_STATUS_ERROR;
    3bb8:	0f ef       	ldi	r16, 0xFF	; 255
    3bba:	1f ef       	ldi	r17, 0xFF	; 255
            }
        }
    }

    return total_len;
}
    3bbc:	c8 01       	movw	r24, r16
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	1f 91       	pop	r17
    3bce:	0f 91       	pop	r16
    3bd0:	ff 90       	pop	r15
    3bd2:	ef 90       	pop	r14
    3bd4:	df 90       	pop	r13
    3bd6:	cf 90       	pop	r12
    3bd8:	bf 90       	pop	r11
    3bda:	af 90       	pop	r10
    3bdc:	9f 90       	pop	r9
    3bde:	8f 90       	pop	r8
    3be0:	7f 90       	pop	r7
    3be2:	6f 90       	pop	r6
    3be4:	5f 90       	pop	r5
    3be6:	4f 90       	pop	r4
    3be8:	08 95       	ret

00003bea <SnMR_UDP>:
    3bea:	82 e0       	ldi	r24, 0x02	; 2
    3bec:	08 95       	ret

00003bee <SnSR_CLOSED>:
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	08 95       	ret

00003bf2 <CW5100Class_new>:
    3bf2:	8e ea       	ldi	r24, 0xAE	; 174
    3bf4:	93 e0       	ldi	r25, 0x03	; 3
    3bf6:	08 95       	ret

00003bf8 <init_func>:
    3bf8:	0e 94 2a 20 	call	0x4054	; 0x4054 <_ZN10W5100Class4initEv>
    3bfc:	08 95       	ret

00003bfe <setGatewayIp_func>:
    3bfe:	44 e0       	ldi	r20, 0x04	; 4
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_ZN10W5100Class5writeEjPKhj>
    3c0a:	08 95       	ret

00003c0c <setSubnetMask_func>:
    3c0c:	44 e0       	ldi	r20, 0x04	; 4
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	85 e0       	ldi	r24, 0x05	; 5
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_ZN10W5100Class5writeEjPKhj>
    3c18:	08 95       	ret

00003c1a <getSubnetMask_func>:
    3c1a:	44 e0       	ldi	r20, 0x04	; 4
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	85 e0       	ldi	r24, 0x05	; 5
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	0e 94 59 21 	call	0x42b2	; 0x42b2 <_ZN10W5100Class4readEjPhj>
    3c26:	08 95       	ret

00003c28 <setMACAddress_func>:
    3c28:	46 e0       	ldi	r20, 0x06	; 6
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	89 e0       	ldi	r24, 0x09	; 9
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_ZN10W5100Class5writeEjPKhj>
    3c34:	08 95       	ret

00003c36 <setIPAddress_func>:
    3c36:	44 e0       	ldi	r20, 0x04	; 4
    3c38:	50 e0       	ldi	r21, 0x00	; 0
    3c3a:	8f e0       	ldi	r24, 0x0F	; 15
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_ZN10W5100Class5writeEjPKhj>
    3c42:	08 95       	ret

00003c44 <getIPAddress_func>:
    3c44:	44 e0       	ldi	r20, 0x04	; 4
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	8f e0       	ldi	r24, 0x0F	; 15
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <_ZN10W5100Class4readEjPhj>
    3c50:	08 95       	ret

00003c52 <getRXReceivedSize_func>:
    3c52:	0e 94 3e 21 	call	0x427c	; 0x427c <_ZN10W5100Class17getRXReceivedSizeEh>
    3c56:	08 95       	ret

00003c58 <readSnSR_func>:
    3c58:	96 2f       	mov	r25, r22
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	8d 5f       	subi	r24, 0xFD	; 253
    3c5e:	9b 4f       	sbci	r25, 0xFB	; 251
    3c60:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN10W5100Class4readEj>
    3c64:	08 95       	ret

00003c66 <socket_func>:
    3c66:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <_Z6sockethhjh>
    3c6a:	08 95       	ret

00003c6c <listen_func>:
    3c6c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_Z6listenh>
    3c70:	08 95       	ret

00003c72 <sendto_func>:
    3c72:	0f 93       	push	r16
    3c74:	1f 93       	push	r17
    3c76:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <_Z6sendtohPKhjPhj>
    3c7a:	1f 91       	pop	r17
    3c7c:	0f 91       	pop	r16
    3c7e:	08 95       	ret

00003c80 <recvfrom_func>:
    3c80:	0f 93       	push	r16
    3c82:	1f 93       	push	r17
    3c84:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_Z8recvfromhPhjS_Pj>
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	08 95       	ret

00003c8e <_ZN10W5100Class11writeSnDIPREhPh>:
    3c8e:	38 2f       	mov	r19, r24
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	44 e0       	ldi	r20, 0x04	; 4
    3c94:	50 e0       	ldi	r21, 0x00	; 0
    3c96:	c9 01       	movw	r24, r18
    3c98:	84 5f       	subi	r24, 0xF4	; 244
    3c9a:	9b 4f       	sbci	r25, 0xFB	; 251
    3c9c:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_ZN10W5100Class5writeEjPKhj>
    3ca0:	08 95       	ret

00003ca2 <_ZN10W5100Class6readSnEhj>:
    3ca2:	28 2f       	mov	r18, r24
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	2c 5f       	subi	r18, 0xFC	; 252
    3ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    3caa:	92 2f       	mov	r25, r18
    3cac:	88 27       	eor	r24, r24
    3cae:	86 0f       	add	r24, r22
    3cb0:	97 1f       	adc	r25, r23
    3cb2:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN10W5100Class4readEj>
    3cb6:	08 95       	ret

00003cb8 <_ZN10W5100Class8readSnIREh>:
    3cb8:	62 e0       	ldi	r22, 0x02	; 2
    3cba:	70 e0       	ldi	r23, 0x00	; 0
    3cbc:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    3cc0:	08 95       	ret

00003cc2 <_ZN10W5100Class7writeSnEhjh>:
    3cc2:	fb 01       	movw	r30, r22
    3cc4:	28 2f       	mov	r18, r24
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	2c 5f       	subi	r18, 0xFC	; 252
    3cca:	3f 4f       	sbci	r19, 0xFF	; 255
    3ccc:	92 2f       	mov	r25, r18
    3cce:	88 27       	eor	r24, r24
    3cd0:	64 2f       	mov	r22, r20
    3cd2:	8e 0f       	add	r24, r30
    3cd4:	9f 1f       	adc	r25, r31
    3cd6:	0e 94 0a 20 	call	0x4014	; 0x4014 <_ZN10W5100Class5writeEjh>
    3cda:	08 95       	ret

00003cdc <_ZN10W5100Class9writeSnIREhh>:
    3cdc:	46 2f       	mov	r20, r22
    3cde:	62 e0       	ldi	r22, 0x02	; 2
    3ce0:	70 e0       	ldi	r23, 0x00	; 0
    3ce2:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3ce6:	08 95       	ret

00003ce8 <_ZN10W5100Class12writeSnDPORTEhj>:
    3ce8:	cf 93       	push	r28
    3cea:	df 93       	push	r29
    3cec:	c8 2f       	mov	r28, r24
    3cee:	d6 2f       	mov	r29, r22
    3cf0:	47 2f       	mov	r20, r23
    3cf2:	60 e1       	ldi	r22, 0x10	; 16
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3cfa:	4d 2f       	mov	r20, r29
    3cfc:	61 e1       	ldi	r22, 0x11	; 17
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	8c 2f       	mov	r24, r28
    3d02:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

00003d0c <_ZN10W5100Class12writeSnRX_RDEhj>:
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	c8 2f       	mov	r28, r24
    3d12:	d6 2f       	mov	r29, r22
    3d14:	47 2f       	mov	r20, r23
    3d16:	68 e2       	ldi	r22, 0x28	; 40
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3d1e:	4d 2f       	mov	r20, r29
    3d20:	69 e2       	ldi	r22, 0x29	; 41
    3d22:	70 e0       	ldi	r23, 0x00	; 0
    3d24:	8c 2f       	mov	r24, r28
    3d26:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3d2a:	df 91       	pop	r29
    3d2c:	cf 91       	pop	r28
    3d2e:	08 95       	ret

00003d30 <_ZN10W5100Class11writeSnPORTEhj>:
    3d30:	cf 93       	push	r28
    3d32:	df 93       	push	r29
    3d34:	c8 2f       	mov	r28, r24
    3d36:	d6 2f       	mov	r29, r22
    3d38:	47 2f       	mov	r20, r23
    3d3a:	64 e0       	ldi	r22, 0x04	; 4
    3d3c:	70 e0       	ldi	r23, 0x00	; 0
    3d3e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3d42:	4d 2f       	mov	r20, r29
    3d44:	65 e0       	ldi	r22, 0x05	; 5
    3d46:	70 e0       	ldi	r23, 0x00	; 0
    3d48:	8c 2f       	mov	r24, r28
    3d4a:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	08 95       	ret

00003d54 <_Z5closeh>:
    3d54:	cf 93       	push	r28
    3d56:	c8 2f       	mov	r28, r24
    3d58:	40 e1       	ldi	r20, 0x10	; 16
    3d5a:	50 e0       	ldi	r21, 0x00	; 0
    3d5c:	68 2f       	mov	r22, r24
    3d5e:	8e ea       	ldi	r24, 0xAE	; 174
    3d60:	93 e0       	ldi	r25, 0x03	; 3
    3d62:	0e 94 b6 21 	call	0x436c	; 0x436c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    3d66:	6f ef       	ldi	r22, 0xFF	; 255
    3d68:	8c 2f       	mov	r24, r28
    3d6a:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <_ZN10W5100Class9writeSnIREhh>
    3d6e:	cf 91       	pop	r28
    3d70:	08 95       	ret

00003d72 <_Z6sockethhjh>:
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	1f 93       	push	r17
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	00 d0       	rcall	.+0      	; 0x3d7e <_Z6sockethhjh+0xc>
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	18 2f       	mov	r17, r24
    3d84:	7a 01       	movw	r14, r20
    3d86:	86 2f       	mov	r24, r22
    3d88:	81 50       	subi	r24, 0x01	; 1
    3d8a:	85 30       	cpi	r24, 0x05	; 5
    3d8c:	48 f5       	brcc	.+82     	; 0x3de0 <_Z6sockethhjh+0x6e>
    3d8e:	81 2f       	mov	r24, r17
    3d90:	2a 83       	std	Y+2, r18	; 0x02
    3d92:	69 83       	std	Y+1, r22	; 0x01
    3d94:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_Z5closeh>
    3d98:	2a 81       	ldd	r18, Y+2	; 0x02
    3d9a:	69 81       	ldd	r22, Y+1	; 0x01
    3d9c:	42 2f       	mov	r20, r18
    3d9e:	46 2b       	or	r20, r22
    3da0:	60 e0       	ldi	r22, 0x00	; 0
    3da2:	70 e0       	ldi	r23, 0x00	; 0
    3da4:	81 2f       	mov	r24, r17
    3da6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    3daa:	e1 14       	cp	r14, r1
    3dac:	f1 04       	cpc	r15, r1
    3dae:	11 f0       	breq	.+4      	; 0x3db4 <_Z6sockethhjh+0x42>
    3db0:	b7 01       	movw	r22, r14
    3db2:	0a c0       	rjmp	.+20     	; 0x3dc8 <_Z6sockethhjh+0x56>
    3db4:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <_ZL10local_port>
    3db8:	70 91 ad 03 	lds	r23, 0x03AD	; 0x8003ad <_ZL10local_port+0x1>
    3dbc:	6f 5f       	subi	r22, 0xFF	; 255
    3dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc0:	70 93 ad 03 	sts	0x03AD, r23	; 0x8003ad <_ZL10local_port+0x1>
    3dc4:	60 93 ac 03 	sts	0x03AC, r22	; 0x8003ac <_ZL10local_port>
    3dc8:	81 2f       	mov	r24, r17
    3dca:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN10W5100Class11writeSnPORTEhj>
    3dce:	41 e0       	ldi	r20, 0x01	; 1
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	61 2f       	mov	r22, r17
    3dd4:	8e ea       	ldi	r24, 0xAE	; 174
    3dd6:	93 e0       	ldi	r25, 0x03	; 3
    3dd8:	0e 94 b6 21 	call	0x436c	; 0x436c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	01 c0       	rjmp	.+2      	; 0x3de2 <_Z6sockethhjh+0x70>
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	df 91       	pop	r29
    3de8:	cf 91       	pop	r28
    3dea:	1f 91       	pop	r17
    3dec:	ff 90       	pop	r15
    3dee:	ef 90       	pop	r14
    3df0:	08 95       	ret

00003df2 <_Z6listenh>:
    3df2:	cf 93       	push	r28
    3df4:	c8 2f       	mov	r28, r24
    3df6:	63 e0       	ldi	r22, 0x03	; 3
    3df8:	70 e0       	ldi	r23, 0x00	; 0
    3dfa:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    3dfe:	83 31       	cpi	r24, 0x13	; 19
    3e00:	49 f4       	brne	.+18     	; 0x3e14 <_Z6listenh+0x22>
    3e02:	42 e0       	ldi	r20, 0x02	; 2
    3e04:	50 e0       	ldi	r21, 0x00	; 0
    3e06:	6c 2f       	mov	r22, r28
    3e08:	8e ea       	ldi	r24, 0xAE	; 174
    3e0a:	93 e0       	ldi	r25, 0x03	; 3
    3e0c:	0e 94 b6 21 	call	0x436c	; 0x436c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	01 c0       	rjmp	.+2      	; 0x3e16 <_Z6listenh+0x24>
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

00003e1a <_Z6sendtohPKhjPhj>:
    3e1a:	a0 e0       	ldi	r26, 0x00	; 0
    3e1c:	b0 e0       	ldi	r27, 0x00	; 0
    3e1e:	e3 e1       	ldi	r30, 0x13	; 19
    3e20:	ff e1       	ldi	r31, 0x1F	; 31
    3e22:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <__prologue_saves__+0x16>
    3e26:	d8 2e       	mov	r13, r24
    3e28:	7b 01       	movw	r14, r22
    3e2a:	f9 01       	movw	r30, r18
    3e2c:	80 81       	ld	r24, Z
    3e2e:	81 11       	cpse	r24, r1
    3e30:	09 c0       	rjmp	.+18     	; 0x3e44 <_Z6sendtohPKhjPhj+0x2a>
    3e32:	81 81       	ldd	r24, Z+1	; 0x01
    3e34:	81 11       	cpse	r24, r1
    3e36:	06 c0       	rjmp	.+12     	; 0x3e44 <_Z6sendtohPKhjPhj+0x2a>
    3e38:	82 81       	ldd	r24, Z+2	; 0x02
    3e3a:	81 11       	cpse	r24, r1
    3e3c:	03 c0       	rjmp	.+6      	; 0x3e44 <_Z6sendtohPKhjPhj+0x2a>
    3e3e:	83 81       	ldd	r24, Z+3	; 0x03
    3e40:	88 23       	and	r24, r24
    3e42:	b9 f1       	breq	.+110    	; 0x3eb2 <_Z6sendtohPKhjPhj+0x98>
    3e44:	01 15       	cp	r16, r1
    3e46:	11 05       	cpc	r17, r1
    3e48:	a1 f1       	breq	.+104    	; 0x3eb2 <_Z6sendtohPKhjPhj+0x98>
    3e4a:	ea 01       	movw	r28, r20
    3e4c:	41 30       	cpi	r20, 0x01	; 1
    3e4e:	88 e0       	ldi	r24, 0x08	; 8
    3e50:	58 07       	cpc	r21, r24
    3e52:	10 f0       	brcs	.+4      	; 0x3e58 <_Z6sendtohPKhjPhj+0x3e>
    3e54:	c0 e0       	ldi	r28, 0x00	; 0
    3e56:	d8 e0       	ldi	r29, 0x08	; 8
    3e58:	20 97       	sbiw	r28, 0x00	; 0
    3e5a:	69 f1       	breq	.+90     	; 0x3eb6 <_Z6sendtohPKhjPhj+0x9c>
    3e5c:	bf 01       	movw	r22, r30
    3e5e:	8d 2d       	mov	r24, r13
    3e60:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <_ZN10W5100Class11writeSnDIPREhPh>
    3e64:	b8 01       	movw	r22, r16
    3e66:	8d 2d       	mov	r24, r13
    3e68:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <_ZN10W5100Class12writeSnDPORTEhj>
    3e6c:	9e 01       	movw	r18, r28
    3e6e:	a7 01       	movw	r20, r14
    3e70:	6d 2d       	mov	r22, r13
    3e72:	8e ea       	ldi	r24, 0xAE	; 174
    3e74:	93 e0       	ldi	r25, 0x03	; 3
    3e76:	0e 94 1f 21 	call	0x423e	; 0x423e <_ZN10W5100Class20send_data_processingEhPKhj>
    3e7a:	40 e2       	ldi	r20, 0x20	; 32
    3e7c:	50 e0       	ldi	r21, 0x00	; 0
    3e7e:	6d 2d       	mov	r22, r13
    3e80:	8e ea       	ldi	r24, 0xAE	; 174
    3e82:	93 e0       	ldi	r25, 0x03	; 3
    3e84:	0e 94 b6 21 	call	0x436c	; 0x436c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    3e88:	0a c0       	rjmp	.+20     	; 0x3e9e <_Z6sendtohPKhjPhj+0x84>
    3e8a:	8d 2d       	mov	r24, r13
    3e8c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN10W5100Class8readSnIREh>
    3e90:	83 ff       	sbrs	r24, 3
    3e92:	05 c0       	rjmp	.+10     	; 0x3e9e <_Z6sendtohPKhjPhj+0x84>
    3e94:	68 e1       	ldi	r22, 0x18	; 24
    3e96:	8d 2d       	mov	r24, r13
    3e98:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <_ZN10W5100Class9writeSnIREhh>
    3e9c:	0a c0       	rjmp	.+20     	; 0x3eb2 <_Z6sendtohPKhjPhj+0x98>
    3e9e:	8d 2d       	mov	r24, r13
    3ea0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN10W5100Class8readSnIREh>
    3ea4:	84 ff       	sbrs	r24, 4
    3ea6:	f1 cf       	rjmp	.-30     	; 0x3e8a <_Z6sendtohPKhjPhj+0x70>
    3ea8:	60 e1       	ldi	r22, 0x10	; 16
    3eaa:	8d 2d       	mov	r24, r13
    3eac:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <_ZN10W5100Class9writeSnIREhh>
    3eb0:	02 c0       	rjmp	.+4      	; 0x3eb6 <_Z6sendtohPKhjPhj+0x9c>
    3eb2:	c0 e0       	ldi	r28, 0x00	; 0
    3eb4:	d0 e0       	ldi	r29, 0x00	; 0
    3eb6:	ce 01       	movw	r24, r28
    3eb8:	cd b7       	in	r28, 0x3d	; 61
    3eba:	de b7       	in	r29, 0x3e	; 62
    3ebc:	e7 e0       	ldi	r30, 0x07	; 7
    3ebe:	0c 94 79 23 	jmp	0x46f2	; 0x46f2 <__epilogue_restores__+0x16>

00003ec2 <_Z8recvfromhPhjS_Pj>:
    3ec2:	a8 e0       	ldi	r26, 0x08	; 8
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	e7 e6       	ldi	r30, 0x67	; 103
    3ec8:	ff e1       	ldi	r31, 0x1F	; 31
    3eca:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__+0xa>
    3ece:	78 2e       	mov	r7, r24
    3ed0:	5b 01       	movw	r10, r22
    3ed2:	79 01       	movw	r14, r18
    3ed4:	48 01       	movw	r8, r16
    3ed6:	45 2b       	or	r20, r21
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <_Z8recvfromhPhjS_Pj+0x1a>
    3eda:	8b c0       	rjmp	.+278    	; 0x3ff2 <_Z8recvfromhPhjS_Pj+0x130>
    3edc:	68 e2       	ldi	r22, 0x28	; 40
    3ede:	70 e0       	ldi	r23, 0x00	; 0
    3ee0:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    3ee4:	18 2f       	mov	r17, r24
    3ee6:	69 e2       	ldi	r22, 0x29	; 41
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	87 2d       	mov	r24, r7
    3eec:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    3ef0:	d1 2e       	mov	r13, r17
    3ef2:	c1 2c       	mov	r12, r1
    3ef4:	c8 2a       	or	r12, r24
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	87 2d       	mov	r24, r7
    3efc:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    3f00:	87 70       	andi	r24, 0x07	; 7
    3f02:	83 30       	cpi	r24, 0x03	; 3
    3f04:	49 f1       	breq	.+82     	; 0x3f58 <_Z8recvfromhPhjS_Pj+0x96>
    3f06:	84 30       	cpi	r24, 0x04	; 4
    3f08:	09 f4       	brne	.+2      	; 0x3f0c <_Z8recvfromhPhjS_Pj+0x4a>
    3f0a:	43 c0       	rjmp	.+134    	; 0x3f92 <_Z8recvfromhPhjS_Pj+0xd0>
    3f0c:	82 30       	cpi	r24, 0x02	; 2
    3f0e:	09 f0       	breq	.+2      	; 0x3f12 <_Z8recvfromhPhjS_Pj+0x50>
    3f10:	66 c0       	rjmp	.+204    	; 0x3fde <_Z8recvfromhPhjS_Pj+0x11c>
    3f12:	08 e0       	ldi	r16, 0x08	; 8
    3f14:	10 e0       	ldi	r17, 0x00	; 0
    3f16:	9e 01       	movw	r18, r28
    3f18:	2f 5f       	subi	r18, 0xFF	; 255
    3f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1c:	a6 01       	movw	r20, r12
    3f1e:	67 2d       	mov	r22, r7
    3f20:	8e ea       	ldi	r24, 0xAE	; 174
    3f22:	93 e0       	ldi	r25, 0x03	; 3
    3f24:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN10W5100Class9read_dataEhPVhS1_j>
    3f28:	28 e0       	ldi	r18, 0x08	; 8
    3f2a:	c2 0e       	add	r12, r18
    3f2c:	d1 1c       	adc	r13, r1
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	f7 01       	movw	r30, r14
    3f32:	80 83       	st	Z, r24
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	81 83       	std	Z+1, r24	; 0x01
    3f38:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3a:	82 83       	std	Z+2, r24	; 0x02
    3f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f3e:	83 83       	std	Z+3, r24	; 0x03
    3f40:	9d 81       	ldd	r25, Y+5	; 0x05
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	2e 81       	ldd	r18, Y+6	; 0x06
    3f46:	82 0f       	add	r24, r18
    3f48:	91 1d       	adc	r25, r1
    3f4a:	f4 01       	movw	r30, r8
    3f4c:	91 83       	std	Z+1, r25	; 0x01
    3f4e:	80 83       	st	Z, r24
    3f50:	ff 80       	ldd	r15, Y+7	; 0x07
    3f52:	e1 2c       	mov	r14, r1
    3f54:	88 85       	ldd	r24, Y+8	; 0x08
    3f56:	1a c0       	rjmp	.+52     	; 0x3f8c <_Z8recvfromhPhjS_Pj+0xca>
    3f58:	06 e0       	ldi	r16, 0x06	; 6
    3f5a:	10 e0       	ldi	r17, 0x00	; 0
    3f5c:	9e 01       	movw	r18, r28
    3f5e:	2f 5f       	subi	r18, 0xFF	; 255
    3f60:	3f 4f       	sbci	r19, 0xFF	; 255
    3f62:	a6 01       	movw	r20, r12
    3f64:	67 2d       	mov	r22, r7
    3f66:	8e ea       	ldi	r24, 0xAE	; 174
    3f68:	93 e0       	ldi	r25, 0x03	; 3
    3f6a:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN10W5100Class9read_dataEhPVhS1_j>
    3f6e:	f6 e0       	ldi	r31, 0x06	; 6
    3f70:	cf 0e       	add	r12, r31
    3f72:	d1 1c       	adc	r13, r1
    3f74:	89 81       	ldd	r24, Y+1	; 0x01
    3f76:	f7 01       	movw	r30, r14
    3f78:	80 83       	st	Z, r24
    3f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7c:	81 83       	std	Z+1, r24	; 0x01
    3f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f80:	82 83       	std	Z+2, r24	; 0x02
    3f82:	8c 81       	ldd	r24, Y+4	; 0x04
    3f84:	83 83       	std	Z+3, r24	; 0x03
    3f86:	fd 80       	ldd	r15, Y+5	; 0x05
    3f88:	e1 2c       	mov	r14, r1
    3f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f8c:	e8 0e       	add	r14, r24
    3f8e:	f1 1c       	adc	r15, r1
    3f90:	17 c0       	rjmp	.+46     	; 0x3fc0 <_Z8recvfromhPhjS_Pj+0xfe>
    3f92:	02 e0       	ldi	r16, 0x02	; 2
    3f94:	10 e0       	ldi	r17, 0x00	; 0
    3f96:	9e 01       	movw	r18, r28
    3f98:	2f 5f       	subi	r18, 0xFF	; 255
    3f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9c:	a6 01       	movw	r20, r12
    3f9e:	67 2d       	mov	r22, r7
    3fa0:	8e ea       	ldi	r24, 0xAE	; 174
    3fa2:	93 e0       	ldi	r25, 0x03	; 3
    3fa4:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN10W5100Class9read_dataEhPVhS1_j>
    3fa8:	f2 e0       	ldi	r31, 0x02	; 2
    3faa:	cf 0e       	add	r12, r31
    3fac:	d1 1c       	adc	r13, r1
    3fae:	99 81       	ldd	r25, Y+1	; 0x01
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	ea 80       	ldd	r14, Y+2	; 0x02
    3fb4:	f1 2c       	mov	r15, r1
    3fb6:	22 e0       	ldi	r18, 0x02	; 2
    3fb8:	e2 1a       	sub	r14, r18
    3fba:	f1 08       	sbc	r15, r1
    3fbc:	e8 0e       	add	r14, r24
    3fbe:	f9 1e       	adc	r15, r25
    3fc0:	87 01       	movw	r16, r14
    3fc2:	95 01       	movw	r18, r10
    3fc4:	a6 01       	movw	r20, r12
    3fc6:	67 2d       	mov	r22, r7
    3fc8:	8e ea       	ldi	r24, 0xAE	; 174
    3fca:	93 e0       	ldi	r25, 0x03	; 3
    3fcc:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN10W5100Class9read_dataEhPVhS1_j>
    3fd0:	b6 01       	movw	r22, r12
    3fd2:	6e 0d       	add	r22, r14
    3fd4:	7f 1d       	adc	r23, r15
    3fd6:	87 2d       	mov	r24, r7
    3fd8:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <_ZN10W5100Class12writeSnRX_RDEhj>
    3fdc:	02 c0       	rjmp	.+4      	; 0x3fe2 <_Z8recvfromhPhjS_Pj+0x120>
    3fde:	e1 2c       	mov	r14, r1
    3fe0:	f1 2c       	mov	r15, r1
    3fe2:	40 e4       	ldi	r20, 0x40	; 64
    3fe4:	50 e0       	ldi	r21, 0x00	; 0
    3fe6:	67 2d       	mov	r22, r7
    3fe8:	8e ea       	ldi	r24, 0xAE	; 174
    3fea:	93 e0       	ldi	r25, 0x03	; 3
    3fec:	0e 94 b6 21 	call	0x436c	; 0x436c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <_Z8recvfromhPhjS_Pj+0x134>
    3ff2:	e1 2c       	mov	r14, r1
    3ff4:	f1 2c       	mov	r15, r1
    3ff6:	c7 01       	movw	r24, r14
    3ff8:	28 96       	adiw	r28, 0x08	; 8
    3ffa:	ed e0       	ldi	r30, 0x0D	; 13
    3ffc:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__+0xa>

00004000 <_ZN8SPIClass8transferEh>:
    4000:	8e bd       	out	0x2e, r24	; 46
    4002:	0d b4       	in	r0, 0x2d	; 45
    4004:	07 fe       	sbrs	r0, 7
    4006:	fd cf       	rjmp	.-6      	; 0x4002 <_ZN8SPIClass8transferEh+0x2>
    4008:	8e b5       	in	r24, 0x2e	; 46
    400a:	08 95       	ret

0000400c <_ZN10W5100Class5setSSEv>:
    400c:	2a 98       	cbi	0x05, 2	; 5
    400e:	08 95       	ret

00004010 <_ZN10W5100Class7resetSSEv>:
    4010:	2a 9a       	sbi	0x05, 2	; 5
    4012:	08 95       	ret

00004014 <_ZN10W5100Class5writeEjh>:
    4014:	a2 e0       	ldi	r26, 0x02	; 2
    4016:	b0 e0       	ldi	r27, 0x00	; 0
    4018:	e0 e1       	ldi	r30, 0x10	; 16
    401a:	f0 e2       	ldi	r31, 0x20	; 32
    401c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__prologue_saves__+0x1e>
    4020:	18 2f       	mov	r17, r24
    4022:	6a 83       	std	Y+2, r22	; 0x02
    4024:	99 83       	std	Y+1, r25	; 0x01
    4026:	0e 94 06 20 	call	0x400c	; 0x400c <_ZN10W5100Class5setSSEv>
    402a:	80 ef       	ldi	r24, 0xF0	; 240
    402c:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    4030:	99 81       	ldd	r25, Y+1	; 0x01
    4032:	89 2f       	mov	r24, r25
    4034:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    4038:	81 2f       	mov	r24, r17
    403a:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    403e:	6a 81       	ldd	r22, Y+2	; 0x02
    4040:	86 2f       	mov	r24, r22
    4042:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    4046:	0e 94 08 20 	call	0x4010	; 0x4010 <_ZN10W5100Class7resetSSEv>
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	22 96       	adiw	r28, 0x02	; 2
    404e:	e3 e0       	ldi	r30, 0x03	; 3
    4050:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__epilogue_restores__+0x1e>

00004054 <_ZN10W5100Class4initEv>:
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	ec 01       	movw	r28, r24
    405a:	6c e2       	ldi	r22, 0x2C	; 44
    405c:	71 e0       	ldi	r23, 0x01	; 1
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	0e 94 b8 22 	call	0x4570	; 0x4570 <delay>
    4066:	0e 94 c6 21 	call	0x438c	; 0x438c <_ZN8SPIClass5beginEv>
    406a:	22 9a       	sbi	0x04, 2	; 4
    406c:	60 e8       	ldi	r22, 0x80	; 128
    406e:	80 e0       	ldi	r24, 0x00	; 0
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	0e 94 0a 20 	call	0x4014	; 0x4014 <_ZN10W5100Class5writeEjh>
    4076:	65 e5       	ldi	r22, 0x55	; 85
    4078:	8b e1       	ldi	r24, 0x1B	; 27
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 0a 20 	call	0x4014	; 0x4014 <_ZN10W5100Class5writeEjh>
    4080:	65 e5       	ldi	r22, 0x55	; 85
    4082:	8a e1       	ldi	r24, 0x1A	; 26
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 0a 20 	call	0x4014	; 0x4014 <_ZN10W5100Class5writeEjh>
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	90 e4       	ldi	r25, 0x40	; 64
    408e:	99 83       	std	Y+1, r25	; 0x01
    4090:	88 83       	st	Y, r24
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	90 e6       	ldi	r25, 0x60	; 96
    4096:	99 87       	std	Y+9, r25	; 0x09
    4098:	88 87       	std	Y+8, r24	; 0x08
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	98 e4       	ldi	r25, 0x48	; 72
    409e:	9b 83       	std	Y+3, r25	; 0x03
    40a0:	8a 83       	std	Y+2, r24	; 0x02
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	98 e6       	ldi	r25, 0x68	; 104
    40a6:	9b 87       	std	Y+11, r25	; 0x0b
    40a8:	8a 87       	std	Y+10, r24	; 0x0a
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	90 e5       	ldi	r25, 0x50	; 80
    40ae:	9d 83       	std	Y+5, r25	; 0x05
    40b0:	8c 83       	std	Y+4, r24	; 0x04
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	90 e7       	ldi	r25, 0x70	; 112
    40b6:	9d 87       	std	Y+13, r25	; 0x0d
    40b8:	8c 87       	std	Y+12, r24	; 0x0c
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	98 e5       	ldi	r25, 0x58	; 88
    40be:	9f 83       	std	Y+7, r25	; 0x07
    40c0:	8e 83       	std	Y+6, r24	; 0x06
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	98 e7       	ldi	r25, 0x78	; 120
    40c6:	9f 87       	std	Y+15, r25	; 0x0f
    40c8:	8e 87       	std	Y+14, r24	; 0x0e
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	08 95       	ret

000040d0 <_ZN10W5100Class5writeEjPKhj>:
    40d0:	a0 e0       	ldi	r26, 0x00	; 0
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	ee e6       	ldi	r30, 0x6E	; 110
    40d6:	f0 e2       	ldi	r31, 0x20	; 32
    40d8:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <__prologue_saves__+0x14>
    40dc:	ec 01       	movw	r28, r24
    40de:	7a 01       	movw	r14, r20
    40e0:	8b 01       	movw	r16, r22
    40e2:	6a 01       	movw	r12, r20
    40e4:	c8 0e       	add	r12, r24
    40e6:	d9 1e       	adc	r13, r25
    40e8:	13 c0       	rjmp	.+38     	; 0x4110 <_ZN10W5100Class5writeEjPKhj+0x40>
    40ea:	0e 94 06 20 	call	0x400c	; 0x400c <_ZN10W5100Class5setSSEv>
    40ee:	80 ef       	ldi	r24, 0xF0	; 240
    40f0:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    40f4:	8d 2f       	mov	r24, r29
    40f6:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    40fa:	8c 2f       	mov	r24, r28
    40fc:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    4100:	21 96       	adiw	r28, 0x01	; 1
    4102:	f8 01       	movw	r30, r16
    4104:	81 91       	ld	r24, Z+
    4106:	8f 01       	movw	r16, r30
    4108:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    410c:	0e 94 08 20 	call	0x4010	; 0x4010 <_ZN10W5100Class7resetSSEv>
    4110:	cc 15       	cp	r28, r12
    4112:	dd 05       	cpc	r29, r13
    4114:	51 f7       	brne	.-44     	; 0x40ea <_ZN10W5100Class5writeEjPKhj+0x1a>
    4116:	c7 01       	movw	r24, r14
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
    411c:	e8 e0       	ldi	r30, 0x08	; 8
    411e:	0c 94 78 23 	jmp	0x46f0	; 0x46f0 <__epilogue_restores__+0x14>

00004122 <_ZN10W5100Class4readEj>:
    4122:	a1 e0       	ldi	r26, 0x01	; 1
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	e7 e9       	ldi	r30, 0x97	; 151
    4128:	f0 e2       	ldi	r31, 0x20	; 32
    412a:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__prologue_saves__+0x1e>
    412e:	18 2f       	mov	r17, r24
    4130:	99 83       	std	Y+1, r25	; 0x01
    4132:	0e 94 06 20 	call	0x400c	; 0x400c <_ZN10W5100Class5setSSEv>
    4136:	8f e0       	ldi	r24, 0x0F	; 15
    4138:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    413c:	99 81       	ldd	r25, Y+1	; 0x01
    413e:	89 2f       	mov	r24, r25
    4140:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    4144:	81 2f       	mov	r24, r17
    4146:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    4150:	89 83       	std	Y+1, r24	; 0x01
    4152:	0e 94 08 20 	call	0x4010	; 0x4010 <_ZN10W5100Class7resetSSEv>
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	21 96       	adiw	r28, 0x01	; 1
    415a:	e3 e0       	ldi	r30, 0x03	; 3
    415c:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__epilogue_restores__+0x1e>

00004160 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
    4160:	6f 92       	push	r6
    4162:	7f 92       	push	r7
    4164:	9f 92       	push	r9
    4166:	af 92       	push	r10
    4168:	bf 92       	push	r11
    416a:	cf 92       	push	r12
    416c:	df 92       	push	r13
    416e:	ef 92       	push	r14
    4170:	ff 92       	push	r15
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	cf 93       	push	r28
    4178:	df 93       	push	r29
    417a:	1f 92       	push	r1
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	f8 2e       	mov	r15, r24
    4182:	96 2e       	mov	r9, r22
    4184:	3a 01       	movw	r6, r20
    4186:	59 01       	movw	r10, r18
    4188:	64 e2       	ldi	r22, 0x24	; 36
    418a:	70 e0       	ldi	r23, 0x00	; 0
    418c:	89 2d       	mov	r24, r9
    418e:	99 83       	std	Y+1, r25	; 0x01
    4190:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    4194:	e8 2e       	mov	r14, r24
    4196:	65 e2       	ldi	r22, 0x25	; 37
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	89 2d       	mov	r24, r9
    419c:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    41a0:	de 2c       	mov	r13, r14
    41a2:	c1 2c       	mov	r12, r1
    41a4:	c8 2a       	or	r12, r24
    41a6:	c6 0c       	add	r12, r6
    41a8:	d7 1c       	adc	r13, r7
    41aa:	96 01       	movw	r18, r12
    41ac:	37 70       	andi	r19, 0x07	; 7
    41ae:	6f 2c       	mov	r6, r15
    41b0:	99 81       	ldd	r25, Y+1	; 0x01
    41b2:	79 2e       	mov	r7, r25
    41b4:	69 0c       	add	r6, r9
    41b6:	71 1c       	adc	r7, r1
    41b8:	69 0c       	add	r6, r9
    41ba:	71 1c       	adc	r7, r1
    41bc:	d3 01       	movw	r26, r6
    41be:	ed 91       	ld	r30, X+
    41c0:	fc 91       	ld	r31, X
    41c2:	e2 0f       	add	r30, r18
    41c4:	f3 1f       	adc	r31, r19
    41c6:	c9 01       	movw	r24, r18
    41c8:	80 0f       	add	r24, r16
    41ca:	91 1f       	adc	r25, r17
    41cc:	81 30       	cpi	r24, 0x01	; 1
    41ce:	98 40       	sbci	r25, 0x08	; 8
    41d0:	a0 f0       	brcs	.+40     	; 0x41fa <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0x9a>
    41d2:	e1 2c       	mov	r14, r1
    41d4:	48 e0       	ldi	r20, 0x08	; 8
    41d6:	f4 2e       	mov	r15, r20
    41d8:	e2 1a       	sub	r14, r18
    41da:	f3 0a       	sbc	r15, r19
    41dc:	a7 01       	movw	r20, r14
    41de:	b5 01       	movw	r22, r10
    41e0:	cf 01       	movw	r24, r30
    41e2:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_ZN10W5100Class5writeEjPKhj>
    41e6:	a8 01       	movw	r20, r16
    41e8:	4e 19       	sub	r20, r14
    41ea:	5f 09       	sbc	r21, r15
    41ec:	b5 01       	movw	r22, r10
    41ee:	6e 0d       	add	r22, r14
    41f0:	7f 1d       	adc	r23, r15
    41f2:	f3 01       	movw	r30, r6
    41f4:	80 81       	ld	r24, Z
    41f6:	91 81       	ldd	r25, Z+1	; 0x01
    41f8:	03 c0       	rjmp	.+6      	; 0x4200 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xa0>
    41fa:	a8 01       	movw	r20, r16
    41fc:	b5 01       	movw	r22, r10
    41fe:	cf 01       	movw	r24, r30
    4200:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_ZN10W5100Class5writeEjPKhj>
    4204:	0c 0d       	add	r16, r12
    4206:	1d 1d       	adc	r17, r13
    4208:	41 2f       	mov	r20, r17
    420a:	64 e2       	ldi	r22, 0x24	; 36
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	89 2d       	mov	r24, r9
    4210:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    4214:	40 2f       	mov	r20, r16
    4216:	65 e2       	ldi	r22, 0x25	; 37
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	89 2d       	mov	r24, r9
    421c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    4220:	0f 90       	pop	r0
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	1f 91       	pop	r17
    4228:	0f 91       	pop	r16
    422a:	ff 90       	pop	r15
    422c:	ef 90       	pop	r14
    422e:	df 90       	pop	r13
    4230:	cf 90       	pop	r12
    4232:	bf 90       	pop	r11
    4234:	af 90       	pop	r10
    4236:	9f 90       	pop	r9
    4238:	7f 90       	pop	r7
    423a:	6f 90       	pop	r6
    423c:	08 95       	ret

0000423e <_ZN10W5100Class20send_data_processingEhPKhj>:
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	89 01       	movw	r16, r18
    4244:	9a 01       	movw	r18, r20
    4246:	40 e0       	ldi	r20, 0x00	; 0
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	0e 94 b0 20 	call	0x4160	; 0x4160 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
    424e:	1f 91       	pop	r17
    4250:	0f 91       	pop	r16
    4252:	08 95       	ret

00004254 <_ZN10W5100Class12readSnRX_RSREh>:
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	c8 2f       	mov	r28, r24
    425a:	66 e2       	ldi	r22, 0x26	; 38
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    4262:	d8 2f       	mov	r29, r24
    4264:	67 e2       	ldi	r22, 0x27	; 39
    4266:	70 e0       	ldi	r23, 0x00	; 0
    4268:	8c 2f       	mov	r24, r28
    426a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    426e:	3d 2f       	mov	r19, r29
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	28 2b       	or	r18, r24
    4274:	c9 01       	movw	r24, r18
    4276:	df 91       	pop	r29
    4278:	cf 91       	pop	r28
    427a:	08 95       	ret

0000427c <_ZN10W5100Class17getRXReceivedSizeEh>:
    427c:	ff 92       	push	r15
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	f6 2e       	mov	r15, r22
    4288:	c0 e0       	ldi	r28, 0x00	; 0
    428a:	d0 e0       	ldi	r29, 0x00	; 0
    428c:	8f 2d       	mov	r24, r15
    428e:	0e 94 2a 21 	call	0x4254	; 0x4254 <_ZN10W5100Class12readSnRX_RSREh>
    4292:	8c 01       	movw	r16, r24
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	21 f0       	breq	.+8      	; 0x42a0 <_ZN10W5100Class17getRXReceivedSizeEh+0x24>
    4298:	8f 2d       	mov	r24, r15
    429a:	0e 94 2a 21 	call	0x4254	; 0x4254 <_ZN10W5100Class12readSnRX_RSREh>
    429e:	ec 01       	movw	r28, r24
    42a0:	c0 17       	cp	r28, r16
    42a2:	d1 07       	cpc	r29, r17
    42a4:	99 f7       	brne	.-26     	; 0x428c <_ZN10W5100Class17getRXReceivedSizeEh+0x10>
    42a6:	ce 01       	movw	r24, r28
    42a8:	cd b7       	in	r28, 0x3d	; 61
    42aa:	de b7       	in	r29, 0x3e	; 62
    42ac:	e5 e0       	ldi	r30, 0x05	; 5
    42ae:	0c 94 7b 23 	jmp	0x46f6	; 0x46f6 <__epilogue_restores__+0x1a>

000042b2 <_ZN10W5100Class4readEjPhj>:
    42b2:	a0 e0       	ldi	r26, 0x00	; 0
    42b4:	b0 e0       	ldi	r27, 0x00	; 0
    42b6:	ef e5       	ldi	r30, 0x5F	; 95
    42b8:	f1 e2       	ldi	r31, 0x21	; 33
    42ba:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <__prologue_saves__+0x14>
    42be:	ec 01       	movw	r28, r24
    42c0:	7a 01       	movw	r14, r20
    42c2:	8b 01       	movw	r16, r22
    42c4:	6a 01       	movw	r12, r20
    42c6:	c8 0e       	add	r12, r24
    42c8:	d9 1e       	adc	r13, r25
    42ca:	14 c0       	rjmp	.+40     	; 0x42f4 <_ZN10W5100Class4readEjPhj+0x42>
    42cc:	0e 94 06 20 	call	0x400c	; 0x400c <_ZN10W5100Class5setSSEv>
    42d0:	8f e0       	ldi	r24, 0x0F	; 15
    42d2:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    42d6:	8d 2f       	mov	r24, r29
    42d8:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    42dc:	8c 2f       	mov	r24, r28
    42de:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    42e2:	21 96       	adiw	r28, 0x01	; 1
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN8SPIClass8transferEh>
    42ea:	f8 01       	movw	r30, r16
    42ec:	81 93       	st	Z+, r24
    42ee:	8f 01       	movw	r16, r30
    42f0:	0e 94 08 20 	call	0x4010	; 0x4010 <_ZN10W5100Class7resetSSEv>
    42f4:	cc 15       	cp	r28, r12
    42f6:	dd 05       	cpc	r29, r13
    42f8:	49 f7       	brne	.-46     	; 0x42cc <_ZN10W5100Class4readEjPhj+0x1a>
    42fa:	c7 01       	movw	r24, r14
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	e8 e0       	ldi	r30, 0x08	; 8
    4302:	0c 94 78 23 	jmp	0x46f0	; 0x46f0 <__epilogue_restores__+0x14>

00004306 <_ZN10W5100Class9read_dataEhPVhS1_j>:
    4306:	a0 e0       	ldi	r26, 0x00	; 0
    4308:	b0 e0       	ldi	r27, 0x00	; 0
    430a:	e9 e8       	ldi	r30, 0x89	; 137
    430c:	f1 e2       	ldi	r31, 0x21	; 33
    430e:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <__prologue_saves__+0x14>
    4312:	69 01       	movw	r12, r18
    4314:	57 70       	andi	r21, 0x07	; 7
    4316:	ec 01       	movw	r28, r24
    4318:	c6 0f       	add	r28, r22
    431a:	d1 1d       	adc	r29, r1
    431c:	c6 0f       	add	r28, r22
    431e:	d1 1d       	adc	r29, r1
    4320:	28 96       	adiw	r28, 0x08	; 8
    4322:	88 81       	ld	r24, Y
    4324:	99 81       	ldd	r25, Y+1	; 0x01
    4326:	84 0f       	add	r24, r20
    4328:	95 1f       	adc	r25, r21
    432a:	98 01       	movw	r18, r16
    432c:	24 0f       	add	r18, r20
    432e:	35 1f       	adc	r19, r21
    4330:	21 30       	cpi	r18, 0x01	; 1
    4332:	38 40       	sbci	r19, 0x08	; 8
    4334:	90 f0       	brcs	.+36     	; 0x435a <_ZN10W5100Class9read_dataEhPVhS1_j+0x54>
    4336:	e1 2c       	mov	r14, r1
    4338:	68 e0       	ldi	r22, 0x08	; 8
    433a:	f6 2e       	mov	r15, r22
    433c:	e4 1a       	sub	r14, r20
    433e:	f5 0a       	sbc	r15, r21
    4340:	a7 01       	movw	r20, r14
    4342:	b6 01       	movw	r22, r12
    4344:	0e 94 59 21 	call	0x42b2	; 0x42b2 <_ZN10W5100Class4readEjPhj>
    4348:	a8 01       	movw	r20, r16
    434a:	4e 19       	sub	r20, r14
    434c:	5f 09       	sbc	r21, r15
    434e:	b6 01       	movw	r22, r12
    4350:	6e 0d       	add	r22, r14
    4352:	7f 1d       	adc	r23, r15
    4354:	88 81       	ld	r24, Y
    4356:	99 81       	ldd	r25, Y+1	; 0x01
    4358:	02 c0       	rjmp	.+4      	; 0x435e <_ZN10W5100Class9read_dataEhPVhS1_j+0x58>
    435a:	a8 01       	movw	r20, r16
    435c:	b6 01       	movw	r22, r12
    435e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <_ZN10W5100Class4readEjPhj>
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    4366:	e8 e0       	ldi	r30, 0x08	; 8
    4368:	0c 94 78 23 	jmp	0x46f0	; 0x46f0 <__epilogue_restores__+0x14>

0000436c <_ZN10W5100Class9execCmdSnEh7SockCMD>:
    436c:	cf 93       	push	r28
    436e:	c6 2f       	mov	r28, r22
    4370:	61 e0       	ldi	r22, 0x01	; 1
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	8c 2f       	mov	r24, r28
    4376:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN10W5100Class7writeSnEhjh>
    437a:	61 e0       	ldi	r22, 0x01	; 1
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	8c 2f       	mov	r24, r28
    4380:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN10W5100Class6readSnEhj>
    4384:	81 11       	cpse	r24, r1
    4386:	f9 cf       	rjmp	.-14     	; 0x437a <_ZN10W5100Class9execCmdSnEh7SockCMD+0xe>
    4388:	cf 91       	pop	r28
    438a:	08 95       	ret

0000438c <_ZN8SPIClass5beginEv>:
    438c:	61 e0       	ldi	r22, 0x01	; 1
    438e:	8a e0       	ldi	r24, 0x0A	; 10
    4390:	0e 94 1c 22 	call	0x4438	; 0x4438 <digitalWrite>
    4394:	61 e0       	ldi	r22, 0x01	; 1
    4396:	8a e0       	ldi	r24, 0x0A	; 10
    4398:	0e 94 dd 21 	call	0x43ba	; 0x43ba <pinMode>
    439c:	8c b5       	in	r24, 0x2c	; 44
    439e:	80 61       	ori	r24, 0x10	; 16
    43a0:	8c bd       	out	0x2c, r24	; 44
    43a2:	8c b5       	in	r24, 0x2c	; 44
    43a4:	80 64       	ori	r24, 0x40	; 64
    43a6:	8c bd       	out	0x2c, r24	; 44
    43a8:	61 e0       	ldi	r22, 0x01	; 1
    43aa:	8d e0       	ldi	r24, 0x0D	; 13
    43ac:	0e 94 dd 21 	call	0x43ba	; 0x43ba <pinMode>
    43b0:	61 e0       	ldi	r22, 0x01	; 1
    43b2:	8b e0       	ldi	r24, 0x0B	; 11
    43b4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <pinMode>
    43b8:	08 95       	ret

000043ba <pinMode>:
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	48 2f       	mov	r20, r24
    43c0:	50 e0       	ldi	r21, 0x00	; 0
    43c2:	ca 01       	movw	r24, r20
    43c4:	82 55       	subi	r24, 0x52	; 82
    43c6:	9f 4f       	sbci	r25, 0xFF	; 255
    43c8:	fc 01       	movw	r30, r24
    43ca:	34 91       	lpm	r19, Z
    43cc:	46 56       	subi	r20, 0x66	; 102
    43ce:	5f 4f       	sbci	r21, 0xFF	; 255
    43d0:	fa 01       	movw	r30, r20
    43d2:	84 91       	lpm	r24, Z
    43d4:	88 23       	and	r24, r24
    43d6:	69 f1       	breq	.+90     	; 0x4432 <pinMode+0x78>
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	88 0f       	add	r24, r24
    43dc:	99 1f       	adc	r25, r25
    43de:	fc 01       	movw	r30, r24
    43e0:	e4 58       	subi	r30, 0x84	; 132
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	a5 91       	lpm	r26, Z+
    43e6:	b4 91       	lpm	r27, Z
    43e8:	fc 01       	movw	r30, r24
    43ea:	ea 57       	subi	r30, 0x7A	; 122
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	c5 91       	lpm	r28, Z+
    43f0:	d4 91       	lpm	r29, Z
    43f2:	66 23       	and	r22, r22
    43f4:	51 f4       	brne	.+20     	; 0x440a <pinMode+0x50>
    43f6:	2f b7       	in	r18, 0x3f	; 63
    43f8:	f8 94       	cli
    43fa:	8c 91       	ld	r24, X
    43fc:	93 2f       	mov	r25, r19
    43fe:	90 95       	com	r25
    4400:	89 23       	and	r24, r25
    4402:	8c 93       	st	X, r24
    4404:	88 81       	ld	r24, Y
    4406:	89 23       	and	r24, r25
    4408:	0b c0       	rjmp	.+22     	; 0x4420 <pinMode+0x66>
    440a:	62 30       	cpi	r22, 0x02	; 2
    440c:	61 f4       	brne	.+24     	; 0x4426 <pinMode+0x6c>
    440e:	2f b7       	in	r18, 0x3f	; 63
    4410:	f8 94       	cli
    4412:	8c 91       	ld	r24, X
    4414:	93 2f       	mov	r25, r19
    4416:	90 95       	com	r25
    4418:	89 23       	and	r24, r25
    441a:	8c 93       	st	X, r24
    441c:	88 81       	ld	r24, Y
    441e:	83 2b       	or	r24, r19
    4420:	88 83       	st	Y, r24
    4422:	2f bf       	out	0x3f, r18	; 63
    4424:	06 c0       	rjmp	.+12     	; 0x4432 <pinMode+0x78>
    4426:	9f b7       	in	r25, 0x3f	; 63
    4428:	f8 94       	cli
    442a:	8c 91       	ld	r24, X
    442c:	83 2b       	or	r24, r19
    442e:	8c 93       	st	X, r24
    4430:	9f bf       	out	0x3f, r25	; 63
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	08 95       	ret

00004438 <digitalWrite>:
    4438:	48 2f       	mov	r20, r24
    443a:	50 e0       	ldi	r21, 0x00	; 0
    443c:	ca 01       	movw	r24, r20
    443e:	8e 53       	subi	r24, 0x3E	; 62
    4440:	9f 4f       	sbci	r25, 0xFF	; 255
    4442:	fc 01       	movw	r30, r24
    4444:	24 91       	lpm	r18, Z
    4446:	ca 01       	movw	r24, r20
    4448:	82 55       	subi	r24, 0x52	; 82
    444a:	9f 4f       	sbci	r25, 0xFF	; 255
    444c:	fc 01       	movw	r30, r24
    444e:	94 91       	lpm	r25, Z
    4450:	46 56       	subi	r20, 0x66	; 102
    4452:	5f 4f       	sbci	r21, 0xFF	; 255
    4454:	fa 01       	movw	r30, r20
    4456:	34 91       	lpm	r19, Z
    4458:	33 23       	and	r19, r19
    445a:	09 f4       	brne	.+2      	; 0x445e <digitalWrite+0x26>
    445c:	40 c0       	rjmp	.+128    	; 0x44de <digitalWrite+0xa6>
    445e:	22 23       	and	r18, r18
    4460:	51 f1       	breq	.+84     	; 0x44b6 <digitalWrite+0x7e>
    4462:	23 30       	cpi	r18, 0x03	; 3
    4464:	71 f0       	breq	.+28     	; 0x4482 <digitalWrite+0x4a>
    4466:	24 30       	cpi	r18, 0x04	; 4
    4468:	28 f4       	brcc	.+10     	; 0x4474 <digitalWrite+0x3c>
    446a:	21 30       	cpi	r18, 0x01	; 1
    446c:	a1 f0       	breq	.+40     	; 0x4496 <digitalWrite+0x5e>
    446e:	22 30       	cpi	r18, 0x02	; 2
    4470:	11 f5       	brne	.+68     	; 0x44b6 <digitalWrite+0x7e>
    4472:	14 c0       	rjmp	.+40     	; 0x449c <digitalWrite+0x64>
    4474:	26 30       	cpi	r18, 0x06	; 6
    4476:	b1 f0       	breq	.+44     	; 0x44a4 <digitalWrite+0x6c>
    4478:	27 30       	cpi	r18, 0x07	; 7
    447a:	c1 f0       	breq	.+48     	; 0x44ac <digitalWrite+0x74>
    447c:	24 30       	cpi	r18, 0x04	; 4
    447e:	d9 f4       	brne	.+54     	; 0x44b6 <digitalWrite+0x7e>
    4480:	04 c0       	rjmp	.+8      	; 0x448a <digitalWrite+0x52>
    4482:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_load_end+0x7fb328>
    4486:	8f 77       	andi	r24, 0x7F	; 127
    4488:	03 c0       	rjmp	.+6      	; 0x4490 <digitalWrite+0x58>
    448a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_load_end+0x7fb328>
    448e:	8f 7d       	andi	r24, 0xDF	; 223
    4490:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_load_end+0x7fb328>
    4494:	10 c0       	rjmp	.+32     	; 0x44b6 <digitalWrite+0x7e>
    4496:	84 b5       	in	r24, 0x24	; 36
    4498:	8f 77       	andi	r24, 0x7F	; 127
    449a:	02 c0       	rjmp	.+4      	; 0x44a0 <digitalWrite+0x68>
    449c:	84 b5       	in	r24, 0x24	; 36
    449e:	8f 7d       	andi	r24, 0xDF	; 223
    44a0:	84 bd       	out	0x24, r24	; 36
    44a2:	09 c0       	rjmp	.+18     	; 0x44b6 <digitalWrite+0x7e>
    44a4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_load_end+0x7fb358>
    44a8:	8f 77       	andi	r24, 0x7F	; 127
    44aa:	03 c0       	rjmp	.+6      	; 0x44b2 <digitalWrite+0x7a>
    44ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_load_end+0x7fb358>
    44b0:	8f 7d       	andi	r24, 0xDF	; 223
    44b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_load_end+0x7fb358>
    44b6:	e3 2f       	mov	r30, r19
    44b8:	f0 e0       	ldi	r31, 0x00	; 0
    44ba:	ee 0f       	add	r30, r30
    44bc:	ff 1f       	adc	r31, r31
    44be:	ea 57       	subi	r30, 0x7A	; 122
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	a5 91       	lpm	r26, Z+
    44c4:	b4 91       	lpm	r27, Z
    44c6:	2f b7       	in	r18, 0x3f	; 63
    44c8:	f8 94       	cli
    44ca:	66 23       	and	r22, r22
    44cc:	21 f4       	brne	.+8      	; 0x44d6 <digitalWrite+0x9e>
    44ce:	8c 91       	ld	r24, X
    44d0:	90 95       	com	r25
    44d2:	89 23       	and	r24, r25
    44d4:	02 c0       	rjmp	.+4      	; 0x44da <digitalWrite+0xa2>
    44d6:	8c 91       	ld	r24, X
    44d8:	89 2b       	or	r24, r25
    44da:	8c 93       	st	X, r24
    44dc:	2f bf       	out	0x3f, r18	; 63
    44de:	08 95       	ret

000044e0 <__vector_16>:
    44e0:	1f 92       	push	r1
    44e2:	0f 92       	push	r0
    44e4:	0f b6       	in	r0, 0x3f	; 63
    44e6:	0f 92       	push	r0
    44e8:	11 24       	eor	r1, r1
    44ea:	2f 93       	push	r18
    44ec:	3f 93       	push	r19
    44ee:	8f 93       	push	r24
    44f0:	9f 93       	push	r25
    44f2:	af 93       	push	r26
    44f4:	bf 93       	push	r27
    44f6:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <timer0_millis>
    44fa:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <timer0_millis+0x1>
    44fe:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <timer0_millis+0x2>
    4502:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <timer0_millis+0x3>
    4506:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <timer0_fract>
    450a:	01 96       	adiw	r24, 0x01	; 1
    450c:	a1 1d       	adc	r26, r1
    450e:	b1 1d       	adc	r27, r1
    4510:	23 2f       	mov	r18, r19
    4512:	2d 5f       	subi	r18, 0xFD	; 253
    4514:	2d 37       	cpi	r18, 0x7D	; 125
    4516:	20 f0       	brcs	.+8      	; 0x4520 <__vector_16+0x40>
    4518:	2d 57       	subi	r18, 0x7D	; 125
    451a:	01 96       	adiw	r24, 0x01	; 1
    451c:	a1 1d       	adc	r26, r1
    451e:	b1 1d       	adc	r27, r1
    4520:	20 93 c6 03 	sts	0x03C6, r18	; 0x8003c6 <timer0_fract>
    4524:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <timer0_millis>
    4528:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <timer0_millis+0x1>
    452c:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <timer0_millis+0x2>
    4530:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <timer0_millis+0x3>
    4534:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <timer0_overflow_count>
    4538:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <timer0_overflow_count+0x1>
    453c:	a0 91 c0 03 	lds	r26, 0x03C0	; 0x8003c0 <timer0_overflow_count+0x2>
    4540:	b0 91 c1 03 	lds	r27, 0x03C1	; 0x8003c1 <timer0_overflow_count+0x3>
    4544:	01 96       	adiw	r24, 0x01	; 1
    4546:	a1 1d       	adc	r26, r1
    4548:	b1 1d       	adc	r27, r1
    454a:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <timer0_overflow_count>
    454e:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <timer0_overflow_count+0x1>
    4552:	a0 93 c0 03 	sts	0x03C0, r26	; 0x8003c0 <timer0_overflow_count+0x2>
    4556:	b0 93 c1 03 	sts	0x03C1, r27	; 0x8003c1 <timer0_overflow_count+0x3>
    455a:	bf 91       	pop	r27
    455c:	af 91       	pop	r26
    455e:	9f 91       	pop	r25
    4560:	8f 91       	pop	r24
    4562:	3f 91       	pop	r19
    4564:	2f 91       	pop	r18
    4566:	0f 90       	pop	r0
    4568:	0f be       	out	0x3f, r0	; 63
    456a:	0f 90       	pop	r0
    456c:	1f 90       	pop	r1
    456e:	18 95       	reti

00004570 <delay>:
    4570:	9b 01       	movw	r18, r22
    4572:	ac 01       	movw	r20, r24
    4574:	7f b7       	in	r23, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <timer0_overflow_count>
    457c:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <timer0_overflow_count+0x1>
    4580:	a0 91 c0 03 	lds	r26, 0x03C0	; 0x8003c0 <timer0_overflow_count+0x2>
    4584:	b0 91 c1 03 	lds	r27, 0x03C1	; 0x8003c1 <timer0_overflow_count+0x3>
    4588:	66 b5       	in	r22, 0x26	; 38
    458a:	a8 9b       	sbis	0x15, 0	; 21
    458c:	05 c0       	rjmp	.+10     	; 0x4598 <delay+0x28>
    458e:	6f 3f       	cpi	r22, 0xFF	; 255
    4590:	19 f0       	breq	.+6      	; 0x4598 <delay+0x28>
    4592:	01 96       	adiw	r24, 0x01	; 1
    4594:	a1 1d       	adc	r26, r1
    4596:	b1 1d       	adc	r27, r1
    4598:	7f bf       	out	0x3f, r23	; 63
    459a:	ba 2f       	mov	r27, r26
    459c:	a9 2f       	mov	r26, r25
    459e:	98 2f       	mov	r25, r24
    45a0:	88 27       	eor	r24, r24
    45a2:	86 0f       	add	r24, r22
    45a4:	91 1d       	adc	r25, r1
    45a6:	a1 1d       	adc	r26, r1
    45a8:	b1 1d       	adc	r27, r1
    45aa:	62 e0       	ldi	r22, 0x02	; 2
    45ac:	88 0f       	add	r24, r24
    45ae:	99 1f       	adc	r25, r25
    45b0:	aa 1f       	adc	r26, r26
    45b2:	bb 1f       	adc	r27, r27
    45b4:	6a 95       	dec	r22
    45b6:	d1 f7       	brne	.-12     	; 0x45ac <delay+0x3c>
    45b8:	bc 01       	movw	r22, r24
    45ba:	2d c0       	rjmp	.+90     	; 0x4616 <delay+0xa6>
    45bc:	ff b7       	in	r31, 0x3f	; 63
    45be:	f8 94       	cli
    45c0:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <timer0_overflow_count>
    45c4:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <timer0_overflow_count+0x1>
    45c8:	a0 91 c0 03 	lds	r26, 0x03C0	; 0x8003c0 <timer0_overflow_count+0x2>
    45cc:	b0 91 c1 03 	lds	r27, 0x03C1	; 0x8003c1 <timer0_overflow_count+0x3>
    45d0:	e6 b5       	in	r30, 0x26	; 38
    45d2:	a8 9b       	sbis	0x15, 0	; 21
    45d4:	05 c0       	rjmp	.+10     	; 0x45e0 <delay+0x70>
    45d6:	ef 3f       	cpi	r30, 0xFF	; 255
    45d8:	19 f0       	breq	.+6      	; 0x45e0 <delay+0x70>
    45da:	01 96       	adiw	r24, 0x01	; 1
    45dc:	a1 1d       	adc	r26, r1
    45de:	b1 1d       	adc	r27, r1
    45e0:	ff bf       	out	0x3f, r31	; 63
    45e2:	ba 2f       	mov	r27, r26
    45e4:	a9 2f       	mov	r26, r25
    45e6:	98 2f       	mov	r25, r24
    45e8:	88 27       	eor	r24, r24
    45ea:	8e 0f       	add	r24, r30
    45ec:	91 1d       	adc	r25, r1
    45ee:	a1 1d       	adc	r26, r1
    45f0:	b1 1d       	adc	r27, r1
    45f2:	e2 e0       	ldi	r30, 0x02	; 2
    45f4:	88 0f       	add	r24, r24
    45f6:	99 1f       	adc	r25, r25
    45f8:	aa 1f       	adc	r26, r26
    45fa:	bb 1f       	adc	r27, r27
    45fc:	ea 95       	dec	r30
    45fe:	d1 f7       	brne	.-12     	; 0x45f4 <delay+0x84>
    4600:	86 1b       	sub	r24, r22
    4602:	97 0b       	sbc	r25, r23
    4604:	88 5e       	subi	r24, 0xE8	; 232
    4606:	93 40       	sbci	r25, 0x03	; 3
    4608:	c8 f2       	brcs	.-78     	; 0x45bc <delay+0x4c>
    460a:	21 50       	subi	r18, 0x01	; 1
    460c:	30 40       	sbci	r19, 0x00	; 0
    460e:	40 40       	sbci	r20, 0x00	; 0
    4610:	50 40       	sbci	r21, 0x00	; 0
    4612:	68 51       	subi	r22, 0x18	; 24
    4614:	7c 4f       	sbci	r23, 0xFC	; 252
    4616:	21 15       	cp	r18, r1
    4618:	31 05       	cpc	r19, r1
    461a:	41 05       	cpc	r20, r1
    461c:	51 05       	cpc	r21, r1
    461e:	71 f6       	brne	.-100    	; 0x45bc <delay+0x4c>
    4620:	08 95       	ret

00004622 <init>:
    4622:	78 94       	sei
    4624:	84 b5       	in	r24, 0x24	; 36
    4626:	82 60       	ori	r24, 0x02	; 2
    4628:	84 bd       	out	0x24, r24	; 36
    462a:	84 b5       	in	r24, 0x24	; 36
    462c:	81 60       	ori	r24, 0x01	; 1
    462e:	84 bd       	out	0x24, r24	; 36
    4630:	85 b5       	in	r24, 0x25	; 37
    4632:	82 60       	ori	r24, 0x02	; 2
    4634:	85 bd       	out	0x25, r24	; 37
    4636:	85 b5       	in	r24, 0x25	; 37
    4638:	81 60       	ori	r24, 0x01	; 1
    463a:	85 bd       	out	0x25, r24	; 37
    463c:	ee e6       	ldi	r30, 0x6E	; 110
    463e:	f0 e0       	ldi	r31, 0x00	; 0
    4640:	80 81       	ld	r24, Z
    4642:	81 60       	ori	r24, 0x01	; 1
    4644:	80 83       	st	Z, r24
    4646:	e1 e8       	ldi	r30, 0x81	; 129
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	10 82       	st	Z, r1
    464c:	80 81       	ld	r24, Z
    464e:	82 60       	ori	r24, 0x02	; 2
    4650:	80 83       	st	Z, r24
    4652:	80 81       	ld	r24, Z
    4654:	81 60       	ori	r24, 0x01	; 1
    4656:	80 83       	st	Z, r24
    4658:	e0 e8       	ldi	r30, 0x80	; 128
    465a:	f0 e0       	ldi	r31, 0x00	; 0
    465c:	80 81       	ld	r24, Z
    465e:	81 60       	ori	r24, 0x01	; 1
    4660:	80 83       	st	Z, r24
    4662:	e1 eb       	ldi	r30, 0xB1	; 177
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	80 81       	ld	r24, Z
    4668:	84 60       	ori	r24, 0x04	; 4
    466a:	80 83       	st	Z, r24
    466c:	e0 eb       	ldi	r30, 0xB0	; 176
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	80 81       	ld	r24, Z
    4672:	81 60       	ori	r24, 0x01	; 1
    4674:	80 83       	st	Z, r24
    4676:	ea e7       	ldi	r30, 0x7A	; 122
    4678:	f0 e0       	ldi	r31, 0x00	; 0
    467a:	80 81       	ld	r24, Z
    467c:	84 60       	ori	r24, 0x04	; 4
    467e:	80 83       	st	Z, r24
    4680:	80 81       	ld	r24, Z
    4682:	82 60       	ori	r24, 0x02	; 2
    4684:	80 83       	st	Z, r24
    4686:	80 81       	ld	r24, Z
    4688:	81 60       	ori	r24, 0x01	; 1
    468a:	80 83       	st	Z, r24
    468c:	80 81       	ld	r24, Z
    468e:	80 68       	ori	r24, 0x80	; 128
    4690:	80 83       	st	Z, r24
    4692:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__data_load_end+0x7fb369>
    4696:	08 95       	ret

00004698 <__tablejump2__>:
    4698:	ee 0f       	add	r30, r30
    469a:	ff 1f       	adc	r31, r31

0000469c <__tablejump__>:
    469c:	05 90       	lpm	r0, Z+
    469e:	f4 91       	lpm	r31, Z
    46a0:	e0 2d       	mov	r30, r0
    46a2:	09 94       	ijmp

000046a4 <__prologue_saves__>:
    46a4:	2f 92       	push	r2
    46a6:	3f 92       	push	r3
    46a8:	4f 92       	push	r4
    46aa:	5f 92       	push	r5
    46ac:	6f 92       	push	r6
    46ae:	7f 92       	push	r7
    46b0:	8f 92       	push	r8
    46b2:	9f 92       	push	r9
    46b4:	af 92       	push	r10
    46b6:	bf 92       	push	r11
    46b8:	cf 92       	push	r12
    46ba:	df 92       	push	r13
    46bc:	ef 92       	push	r14
    46be:	ff 92       	push	r15
    46c0:	0f 93       	push	r16
    46c2:	1f 93       	push	r17
    46c4:	cf 93       	push	r28
    46c6:	df 93       	push	r29
    46c8:	cd b7       	in	r28, 0x3d	; 61
    46ca:	de b7       	in	r29, 0x3e	; 62
    46cc:	ca 1b       	sub	r28, r26
    46ce:	db 0b       	sbc	r29, r27
    46d0:	0f b6       	in	r0, 0x3f	; 63
    46d2:	f8 94       	cli
    46d4:	de bf       	out	0x3e, r29	; 62
    46d6:	0f be       	out	0x3f, r0	; 63
    46d8:	cd bf       	out	0x3d, r28	; 61
    46da:	09 94       	ijmp

000046dc <__epilogue_restores__>:
    46dc:	2a 88       	ldd	r2, Y+18	; 0x12
    46de:	39 88       	ldd	r3, Y+17	; 0x11
    46e0:	48 88       	ldd	r4, Y+16	; 0x10
    46e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    46e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    46e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    46e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    46ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    46ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    46ee:	b9 84       	ldd	r11, Y+9	; 0x09
    46f0:	c8 84       	ldd	r12, Y+8	; 0x08
    46f2:	df 80       	ldd	r13, Y+7	; 0x07
    46f4:	ee 80       	ldd	r14, Y+6	; 0x06
    46f6:	fd 80       	ldd	r15, Y+5	; 0x05
    46f8:	0c 81       	ldd	r16, Y+4	; 0x04
    46fa:	1b 81       	ldd	r17, Y+3	; 0x03
    46fc:	aa 81       	ldd	r26, Y+2	; 0x02
    46fe:	b9 81       	ldd	r27, Y+1	; 0x01
    4700:	ce 0f       	add	r28, r30
    4702:	d1 1d       	adc	r29, r1
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	ed 01       	movw	r28, r26
    4710:	08 95       	ret

00004712 <memcpy>:
    4712:	fb 01       	movw	r30, r22
    4714:	dc 01       	movw	r26, r24
    4716:	02 c0       	rjmp	.+4      	; 0x471c <memcpy+0xa>
    4718:	01 90       	ld	r0, Z+
    471a:	0d 92       	st	X+, r0
    471c:	41 50       	subi	r20, 0x01	; 1
    471e:	50 40       	sbci	r21, 0x00	; 0
    4720:	d8 f7       	brcc	.-10     	; 0x4718 <memcpy+0x6>
    4722:	08 95       	ret

00004724 <fprintf>:
    4724:	a0 e0       	ldi	r26, 0x00	; 0
    4726:	b0 e0       	ldi	r27, 0x00	; 0
    4728:	e8 e9       	ldi	r30, 0x98	; 152
    472a:	f3 e2       	ldi	r31, 0x23	; 35
    472c:	0c 94 62 23 	jmp	0x46c4	; 0x46c4 <__prologue_saves__+0x20>
    4730:	ae 01       	movw	r20, r28
    4732:	47 5f       	subi	r20, 0xF7	; 247
    4734:	5f 4f       	sbci	r21, 0xFF	; 255
    4736:	6f 81       	ldd	r22, Y+7	; 0x07
    4738:	78 85       	ldd	r23, Y+8	; 0x08
    473a:	8d 81       	ldd	r24, Y+5	; 0x05
    473c:	9e 81       	ldd	r25, Y+6	; 0x06
    473e:	0e 94 a4 23 	call	0x4748	; 0x4748 <vfprintf>
    4742:	e2 e0       	ldi	r30, 0x02	; 2
    4744:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <__epilogue_restores__+0x20>

00004748 <vfprintf>:
    4748:	ac e0       	ldi	r26, 0x0C	; 12
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	ea ea       	ldi	r30, 0xAA	; 170
    474e:	f3 e2       	ldi	r31, 0x23	; 35
    4750:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__prologue_saves__>
    4754:	7c 01       	movw	r14, r24
    4756:	6b 01       	movw	r12, r22
    4758:	8a 01       	movw	r16, r20
    475a:	fc 01       	movw	r30, r24
    475c:	17 82       	std	Z+7, r1	; 0x07
    475e:	16 82       	std	Z+6, r1	; 0x06
    4760:	83 81       	ldd	r24, Z+3	; 0x03
    4762:	81 ff       	sbrs	r24, 1
    4764:	bd c1       	rjmp	.+890    	; 0x4ae0 <vfprintf+0x398>
    4766:	ce 01       	movw	r24, r28
    4768:	01 96       	adiw	r24, 0x01	; 1
    476a:	4c 01       	movw	r8, r24
    476c:	f7 01       	movw	r30, r14
    476e:	93 81       	ldd	r25, Z+3	; 0x03
    4770:	f6 01       	movw	r30, r12
    4772:	93 fd       	sbrc	r25, 3
    4774:	85 91       	lpm	r24, Z+
    4776:	93 ff       	sbrs	r25, 3
    4778:	81 91       	ld	r24, Z+
    477a:	6f 01       	movw	r12, r30
    477c:	88 23       	and	r24, r24
    477e:	09 f4       	brne	.+2      	; 0x4782 <vfprintf+0x3a>
    4780:	ab c1       	rjmp	.+854    	; 0x4ad8 <vfprintf+0x390>
    4782:	85 32       	cpi	r24, 0x25	; 37
    4784:	39 f4       	brne	.+14     	; 0x4794 <vfprintf+0x4c>
    4786:	93 fd       	sbrc	r25, 3
    4788:	85 91       	lpm	r24, Z+
    478a:	93 ff       	sbrs	r25, 3
    478c:	81 91       	ld	r24, Z+
    478e:	6f 01       	movw	r12, r30
    4790:	85 32       	cpi	r24, 0x25	; 37
    4792:	29 f4       	brne	.+10     	; 0x479e <vfprintf+0x56>
    4794:	b7 01       	movw	r22, r14
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    479c:	e7 cf       	rjmp	.-50     	; 0x476c <vfprintf+0x24>
    479e:	51 2c       	mov	r5, r1
    47a0:	31 2c       	mov	r3, r1
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	20 32       	cpi	r18, 0x20	; 32
    47a6:	a0 f4       	brcc	.+40     	; 0x47d0 <vfprintf+0x88>
    47a8:	8b 32       	cpi	r24, 0x2B	; 43
    47aa:	69 f0       	breq	.+26     	; 0x47c6 <vfprintf+0x7e>
    47ac:	30 f4       	brcc	.+12     	; 0x47ba <vfprintf+0x72>
    47ae:	80 32       	cpi	r24, 0x20	; 32
    47b0:	59 f0       	breq	.+22     	; 0x47c8 <vfprintf+0x80>
    47b2:	83 32       	cpi	r24, 0x23	; 35
    47b4:	69 f4       	brne	.+26     	; 0x47d0 <vfprintf+0x88>
    47b6:	20 61       	ori	r18, 0x10	; 16
    47b8:	2c c0       	rjmp	.+88     	; 0x4812 <vfprintf+0xca>
    47ba:	8d 32       	cpi	r24, 0x2D	; 45
    47bc:	39 f0       	breq	.+14     	; 0x47cc <vfprintf+0x84>
    47be:	80 33       	cpi	r24, 0x30	; 48
    47c0:	39 f4       	brne	.+14     	; 0x47d0 <vfprintf+0x88>
    47c2:	21 60       	ori	r18, 0x01	; 1
    47c4:	26 c0       	rjmp	.+76     	; 0x4812 <vfprintf+0xca>
    47c6:	22 60       	ori	r18, 0x02	; 2
    47c8:	24 60       	ori	r18, 0x04	; 4
    47ca:	23 c0       	rjmp	.+70     	; 0x4812 <vfprintf+0xca>
    47cc:	28 60       	ori	r18, 0x08	; 8
    47ce:	21 c0       	rjmp	.+66     	; 0x4812 <vfprintf+0xca>
    47d0:	27 fd       	sbrc	r18, 7
    47d2:	27 c0       	rjmp	.+78     	; 0x4822 <vfprintf+0xda>
    47d4:	30 ed       	ldi	r19, 0xD0	; 208
    47d6:	38 0f       	add	r19, r24
    47d8:	3a 30       	cpi	r19, 0x0A	; 10
    47da:	78 f4       	brcc	.+30     	; 0x47fa <vfprintf+0xb2>
    47dc:	26 ff       	sbrs	r18, 6
    47de:	06 c0       	rjmp	.+12     	; 0x47ec <vfprintf+0xa4>
    47e0:	fa e0       	ldi	r31, 0x0A	; 10
    47e2:	5f 9e       	mul	r5, r31
    47e4:	30 0d       	add	r19, r0
    47e6:	11 24       	eor	r1, r1
    47e8:	53 2e       	mov	r5, r19
    47ea:	13 c0       	rjmp	.+38     	; 0x4812 <vfprintf+0xca>
    47ec:	8a e0       	ldi	r24, 0x0A	; 10
    47ee:	38 9e       	mul	r3, r24
    47f0:	30 0d       	add	r19, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	33 2e       	mov	r3, r19
    47f6:	20 62       	ori	r18, 0x20	; 32
    47f8:	0c c0       	rjmp	.+24     	; 0x4812 <vfprintf+0xca>
    47fa:	8e 32       	cpi	r24, 0x2E	; 46
    47fc:	21 f4       	brne	.+8      	; 0x4806 <vfprintf+0xbe>
    47fe:	26 fd       	sbrc	r18, 6
    4800:	6b c1       	rjmp	.+726    	; 0x4ad8 <vfprintf+0x390>
    4802:	20 64       	ori	r18, 0x40	; 64
    4804:	06 c0       	rjmp	.+12     	; 0x4812 <vfprintf+0xca>
    4806:	8c 36       	cpi	r24, 0x6C	; 108
    4808:	11 f4       	brne	.+4      	; 0x480e <vfprintf+0xc6>
    480a:	20 68       	ori	r18, 0x80	; 128
    480c:	02 c0       	rjmp	.+4      	; 0x4812 <vfprintf+0xca>
    480e:	88 36       	cpi	r24, 0x68	; 104
    4810:	41 f4       	brne	.+16     	; 0x4822 <vfprintf+0xda>
    4812:	f6 01       	movw	r30, r12
    4814:	93 fd       	sbrc	r25, 3
    4816:	85 91       	lpm	r24, Z+
    4818:	93 ff       	sbrs	r25, 3
    481a:	81 91       	ld	r24, Z+
    481c:	6f 01       	movw	r12, r30
    481e:	81 11       	cpse	r24, r1
    4820:	c1 cf       	rjmp	.-126    	; 0x47a4 <vfprintf+0x5c>
    4822:	98 2f       	mov	r25, r24
    4824:	9f 7d       	andi	r25, 0xDF	; 223
    4826:	95 54       	subi	r25, 0x45	; 69
    4828:	93 30       	cpi	r25, 0x03	; 3
    482a:	28 f4       	brcc	.+10     	; 0x4836 <vfprintf+0xee>
    482c:	0c 5f       	subi	r16, 0xFC	; 252
    482e:	1f 4f       	sbci	r17, 0xFF	; 255
    4830:	ff e3       	ldi	r31, 0x3F	; 63
    4832:	f9 83       	std	Y+1, r31	; 0x01
    4834:	0d c0       	rjmp	.+26     	; 0x4850 <vfprintf+0x108>
    4836:	83 36       	cpi	r24, 0x63	; 99
    4838:	31 f0       	breq	.+12     	; 0x4846 <vfprintf+0xfe>
    483a:	83 37       	cpi	r24, 0x73	; 115
    483c:	71 f0       	breq	.+28     	; 0x485a <vfprintf+0x112>
    483e:	83 35       	cpi	r24, 0x53	; 83
    4840:	09 f0       	breq	.+2      	; 0x4844 <vfprintf+0xfc>
    4842:	5b c0       	rjmp	.+182    	; 0x48fa <vfprintf+0x1b2>
    4844:	22 c0       	rjmp	.+68     	; 0x488a <vfprintf+0x142>
    4846:	f8 01       	movw	r30, r16
    4848:	80 81       	ld	r24, Z
    484a:	89 83       	std	Y+1, r24	; 0x01
    484c:	0e 5f       	subi	r16, 0xFE	; 254
    484e:	1f 4f       	sbci	r17, 0xFF	; 255
    4850:	44 24       	eor	r4, r4
    4852:	43 94       	inc	r4
    4854:	51 2c       	mov	r5, r1
    4856:	54 01       	movw	r10, r8
    4858:	15 c0       	rjmp	.+42     	; 0x4884 <vfprintf+0x13c>
    485a:	38 01       	movw	r6, r16
    485c:	f2 e0       	ldi	r31, 0x02	; 2
    485e:	6f 0e       	add	r6, r31
    4860:	71 1c       	adc	r7, r1
    4862:	f8 01       	movw	r30, r16
    4864:	a0 80       	ld	r10, Z
    4866:	b1 80       	ldd	r11, Z+1	; 0x01
    4868:	26 ff       	sbrs	r18, 6
    486a:	03 c0       	rjmp	.+6      	; 0x4872 <vfprintf+0x12a>
    486c:	65 2d       	mov	r22, r5
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	02 c0       	rjmp	.+4      	; 0x4876 <vfprintf+0x12e>
    4872:	6f ef       	ldi	r22, 0xFF	; 255
    4874:	7f ef       	ldi	r23, 0xFF	; 255
    4876:	c5 01       	movw	r24, r10
    4878:	2c 87       	std	Y+12, r18	; 0x0c
    487a:	0e 94 81 25 	call	0x4b02	; 0x4b02 <strnlen>
    487e:	2c 01       	movw	r4, r24
    4880:	83 01       	movw	r16, r6
    4882:	2c 85       	ldd	r18, Y+12	; 0x0c
    4884:	2f 77       	andi	r18, 0x7F	; 127
    4886:	22 2e       	mov	r2, r18
    4888:	17 c0       	rjmp	.+46     	; 0x48b8 <vfprintf+0x170>
    488a:	38 01       	movw	r6, r16
    488c:	f2 e0       	ldi	r31, 0x02	; 2
    488e:	6f 0e       	add	r6, r31
    4890:	71 1c       	adc	r7, r1
    4892:	f8 01       	movw	r30, r16
    4894:	a0 80       	ld	r10, Z
    4896:	b1 80       	ldd	r11, Z+1	; 0x01
    4898:	26 ff       	sbrs	r18, 6
    489a:	03 c0       	rjmp	.+6      	; 0x48a2 <vfprintf+0x15a>
    489c:	65 2d       	mov	r22, r5
    489e:	70 e0       	ldi	r23, 0x00	; 0
    48a0:	02 c0       	rjmp	.+4      	; 0x48a6 <vfprintf+0x15e>
    48a2:	6f ef       	ldi	r22, 0xFF	; 255
    48a4:	7f ef       	ldi	r23, 0xFF	; 255
    48a6:	c5 01       	movw	r24, r10
    48a8:	2c 87       	std	Y+12, r18	; 0x0c
    48aa:	0e 94 76 25 	call	0x4aec	; 0x4aec <strnlen_P>
    48ae:	2c 01       	movw	r4, r24
    48b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    48b2:	20 68       	ori	r18, 0x80	; 128
    48b4:	22 2e       	mov	r2, r18
    48b6:	83 01       	movw	r16, r6
    48b8:	23 fc       	sbrc	r2, 3
    48ba:	1b c0       	rjmp	.+54     	; 0x48f2 <vfprintf+0x1aa>
    48bc:	83 2d       	mov	r24, r3
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	48 16       	cp	r4, r24
    48c2:	59 06       	cpc	r5, r25
    48c4:	b0 f4       	brcc	.+44     	; 0x48f2 <vfprintf+0x1aa>
    48c6:	b7 01       	movw	r22, r14
    48c8:	80 e2       	ldi	r24, 0x20	; 32
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    48d0:	3a 94       	dec	r3
    48d2:	f4 cf       	rjmp	.-24     	; 0x48bc <vfprintf+0x174>
    48d4:	f5 01       	movw	r30, r10
    48d6:	27 fc       	sbrc	r2, 7
    48d8:	85 91       	lpm	r24, Z+
    48da:	27 fe       	sbrs	r2, 7
    48dc:	81 91       	ld	r24, Z+
    48de:	5f 01       	movw	r10, r30
    48e0:	b7 01       	movw	r22, r14
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    48e8:	31 10       	cpse	r3, r1
    48ea:	3a 94       	dec	r3
    48ec:	f1 e0       	ldi	r31, 0x01	; 1
    48ee:	4f 1a       	sub	r4, r31
    48f0:	51 08       	sbc	r5, r1
    48f2:	41 14       	cp	r4, r1
    48f4:	51 04       	cpc	r5, r1
    48f6:	71 f7       	brne	.-36     	; 0x48d4 <vfprintf+0x18c>
    48f8:	e5 c0       	rjmp	.+458    	; 0x4ac4 <vfprintf+0x37c>
    48fa:	84 36       	cpi	r24, 0x64	; 100
    48fc:	11 f0       	breq	.+4      	; 0x4902 <vfprintf+0x1ba>
    48fe:	89 36       	cpi	r24, 0x69	; 105
    4900:	39 f5       	brne	.+78     	; 0x4950 <vfprintf+0x208>
    4902:	f8 01       	movw	r30, r16
    4904:	27 ff       	sbrs	r18, 7
    4906:	07 c0       	rjmp	.+14     	; 0x4916 <vfprintf+0x1ce>
    4908:	60 81       	ld	r22, Z
    490a:	71 81       	ldd	r23, Z+1	; 0x01
    490c:	82 81       	ldd	r24, Z+2	; 0x02
    490e:	93 81       	ldd	r25, Z+3	; 0x03
    4910:	0c 5f       	subi	r16, 0xFC	; 252
    4912:	1f 4f       	sbci	r17, 0xFF	; 255
    4914:	08 c0       	rjmp	.+16     	; 0x4926 <vfprintf+0x1de>
    4916:	60 81       	ld	r22, Z
    4918:	71 81       	ldd	r23, Z+1	; 0x01
    491a:	88 27       	eor	r24, r24
    491c:	77 fd       	sbrc	r23, 7
    491e:	80 95       	com	r24
    4920:	98 2f       	mov	r25, r24
    4922:	0e 5f       	subi	r16, 0xFE	; 254
    4924:	1f 4f       	sbci	r17, 0xFF	; 255
    4926:	2f 76       	andi	r18, 0x6F	; 111
    4928:	b2 2e       	mov	r11, r18
    492a:	97 ff       	sbrs	r25, 7
    492c:	09 c0       	rjmp	.+18     	; 0x4940 <vfprintf+0x1f8>
    492e:	90 95       	com	r25
    4930:	80 95       	com	r24
    4932:	70 95       	com	r23
    4934:	61 95       	neg	r22
    4936:	7f 4f       	sbci	r23, 0xFF	; 255
    4938:	8f 4f       	sbci	r24, 0xFF	; 255
    493a:	9f 4f       	sbci	r25, 0xFF	; 255
    493c:	20 68       	ori	r18, 0x80	; 128
    493e:	b2 2e       	mov	r11, r18
    4940:	2a e0       	ldi	r18, 0x0A	; 10
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	a4 01       	movw	r20, r8
    4946:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <__ultoa_invert>
    494a:	a8 2e       	mov	r10, r24
    494c:	a8 18       	sub	r10, r8
    494e:	44 c0       	rjmp	.+136    	; 0x49d8 <vfprintf+0x290>
    4950:	85 37       	cpi	r24, 0x75	; 117
    4952:	29 f4       	brne	.+10     	; 0x495e <vfprintf+0x216>
    4954:	2f 7e       	andi	r18, 0xEF	; 239
    4956:	b2 2e       	mov	r11, r18
    4958:	2a e0       	ldi	r18, 0x0A	; 10
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	25 c0       	rjmp	.+74     	; 0x49a8 <vfprintf+0x260>
    495e:	f2 2f       	mov	r31, r18
    4960:	f9 7f       	andi	r31, 0xF9	; 249
    4962:	bf 2e       	mov	r11, r31
    4964:	8f 36       	cpi	r24, 0x6F	; 111
    4966:	c1 f0       	breq	.+48     	; 0x4998 <vfprintf+0x250>
    4968:	18 f4       	brcc	.+6      	; 0x4970 <vfprintf+0x228>
    496a:	88 35       	cpi	r24, 0x58	; 88
    496c:	79 f0       	breq	.+30     	; 0x498c <vfprintf+0x244>
    496e:	b4 c0       	rjmp	.+360    	; 0x4ad8 <vfprintf+0x390>
    4970:	80 37       	cpi	r24, 0x70	; 112
    4972:	19 f0       	breq	.+6      	; 0x497a <vfprintf+0x232>
    4974:	88 37       	cpi	r24, 0x78	; 120
    4976:	21 f0       	breq	.+8      	; 0x4980 <vfprintf+0x238>
    4978:	af c0       	rjmp	.+350    	; 0x4ad8 <vfprintf+0x390>
    497a:	2f 2f       	mov	r18, r31
    497c:	20 61       	ori	r18, 0x10	; 16
    497e:	b2 2e       	mov	r11, r18
    4980:	b4 fe       	sbrs	r11, 4
    4982:	0d c0       	rjmp	.+26     	; 0x499e <vfprintf+0x256>
    4984:	8b 2d       	mov	r24, r11
    4986:	84 60       	ori	r24, 0x04	; 4
    4988:	b8 2e       	mov	r11, r24
    498a:	09 c0       	rjmp	.+18     	; 0x499e <vfprintf+0x256>
    498c:	24 ff       	sbrs	r18, 4
    498e:	0a c0       	rjmp	.+20     	; 0x49a4 <vfprintf+0x25c>
    4990:	9f 2f       	mov	r25, r31
    4992:	96 60       	ori	r25, 0x06	; 6
    4994:	b9 2e       	mov	r11, r25
    4996:	06 c0       	rjmp	.+12     	; 0x49a4 <vfprintf+0x25c>
    4998:	28 e0       	ldi	r18, 0x08	; 8
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	05 c0       	rjmp	.+10     	; 0x49a8 <vfprintf+0x260>
    499e:	20 e1       	ldi	r18, 0x10	; 16
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <vfprintf+0x260>
    49a4:	20 e1       	ldi	r18, 0x10	; 16
    49a6:	32 e0       	ldi	r19, 0x02	; 2
    49a8:	f8 01       	movw	r30, r16
    49aa:	b7 fe       	sbrs	r11, 7
    49ac:	07 c0       	rjmp	.+14     	; 0x49bc <vfprintf+0x274>
    49ae:	60 81       	ld	r22, Z
    49b0:	71 81       	ldd	r23, Z+1	; 0x01
    49b2:	82 81       	ldd	r24, Z+2	; 0x02
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	0c 5f       	subi	r16, 0xFC	; 252
    49b8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ba:	06 c0       	rjmp	.+12     	; 0x49c8 <vfprintf+0x280>
    49bc:	60 81       	ld	r22, Z
    49be:	71 81       	ldd	r23, Z+1	; 0x01
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	0e 5f       	subi	r16, 0xFE	; 254
    49c6:	1f 4f       	sbci	r17, 0xFF	; 255
    49c8:	a4 01       	movw	r20, r8
    49ca:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <__ultoa_invert>
    49ce:	a8 2e       	mov	r10, r24
    49d0:	a8 18       	sub	r10, r8
    49d2:	fb 2d       	mov	r31, r11
    49d4:	ff 77       	andi	r31, 0x7F	; 127
    49d6:	bf 2e       	mov	r11, r31
    49d8:	b6 fe       	sbrs	r11, 6
    49da:	0b c0       	rjmp	.+22     	; 0x49f2 <vfprintf+0x2aa>
    49dc:	2b 2d       	mov	r18, r11
    49de:	2e 7f       	andi	r18, 0xFE	; 254
    49e0:	a5 14       	cp	r10, r5
    49e2:	50 f4       	brcc	.+20     	; 0x49f8 <vfprintf+0x2b0>
    49e4:	b4 fe       	sbrs	r11, 4
    49e6:	0a c0       	rjmp	.+20     	; 0x49fc <vfprintf+0x2b4>
    49e8:	b2 fc       	sbrc	r11, 2
    49ea:	08 c0       	rjmp	.+16     	; 0x49fc <vfprintf+0x2b4>
    49ec:	2b 2d       	mov	r18, r11
    49ee:	2e 7e       	andi	r18, 0xEE	; 238
    49f0:	05 c0       	rjmp	.+10     	; 0x49fc <vfprintf+0x2b4>
    49f2:	7a 2c       	mov	r7, r10
    49f4:	2b 2d       	mov	r18, r11
    49f6:	03 c0       	rjmp	.+6      	; 0x49fe <vfprintf+0x2b6>
    49f8:	7a 2c       	mov	r7, r10
    49fa:	01 c0       	rjmp	.+2      	; 0x49fe <vfprintf+0x2b6>
    49fc:	75 2c       	mov	r7, r5
    49fe:	24 ff       	sbrs	r18, 4
    4a00:	0d c0       	rjmp	.+26     	; 0x4a1c <vfprintf+0x2d4>
    4a02:	fe 01       	movw	r30, r28
    4a04:	ea 0d       	add	r30, r10
    4a06:	f1 1d       	adc	r31, r1
    4a08:	80 81       	ld	r24, Z
    4a0a:	80 33       	cpi	r24, 0x30	; 48
    4a0c:	11 f4       	brne	.+4      	; 0x4a12 <vfprintf+0x2ca>
    4a0e:	29 7e       	andi	r18, 0xE9	; 233
    4a10:	09 c0       	rjmp	.+18     	; 0x4a24 <vfprintf+0x2dc>
    4a12:	22 ff       	sbrs	r18, 2
    4a14:	06 c0       	rjmp	.+12     	; 0x4a22 <vfprintf+0x2da>
    4a16:	73 94       	inc	r7
    4a18:	73 94       	inc	r7
    4a1a:	04 c0       	rjmp	.+8      	; 0x4a24 <vfprintf+0x2dc>
    4a1c:	82 2f       	mov	r24, r18
    4a1e:	86 78       	andi	r24, 0x86	; 134
    4a20:	09 f0       	breq	.+2      	; 0x4a24 <vfprintf+0x2dc>
    4a22:	73 94       	inc	r7
    4a24:	23 fd       	sbrc	r18, 3
    4a26:	13 c0       	rjmp	.+38     	; 0x4a4e <vfprintf+0x306>
    4a28:	20 ff       	sbrs	r18, 0
    4a2a:	06 c0       	rjmp	.+12     	; 0x4a38 <vfprintf+0x2f0>
    4a2c:	5a 2c       	mov	r5, r10
    4a2e:	73 14       	cp	r7, r3
    4a30:	18 f4       	brcc	.+6      	; 0x4a38 <vfprintf+0x2f0>
    4a32:	53 0c       	add	r5, r3
    4a34:	57 18       	sub	r5, r7
    4a36:	73 2c       	mov	r7, r3
    4a38:	73 14       	cp	r7, r3
    4a3a:	68 f4       	brcc	.+26     	; 0x4a56 <vfprintf+0x30e>
    4a3c:	b7 01       	movw	r22, r14
    4a3e:	80 e2       	ldi	r24, 0x20	; 32
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	2c 87       	std	Y+12, r18	; 0x0c
    4a44:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    4a48:	73 94       	inc	r7
    4a4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a4c:	f5 cf       	rjmp	.-22     	; 0x4a38 <vfprintf+0x2f0>
    4a4e:	73 14       	cp	r7, r3
    4a50:	10 f4       	brcc	.+4      	; 0x4a56 <vfprintf+0x30e>
    4a52:	37 18       	sub	r3, r7
    4a54:	01 c0       	rjmp	.+2      	; 0x4a58 <vfprintf+0x310>
    4a56:	31 2c       	mov	r3, r1
    4a58:	24 ff       	sbrs	r18, 4
    4a5a:	12 c0       	rjmp	.+36     	; 0x4a80 <vfprintf+0x338>
    4a5c:	b7 01       	movw	r22, r14
    4a5e:	80 e3       	ldi	r24, 0x30	; 48
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	2c 87       	std	Y+12, r18	; 0x0c
    4a64:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    4a68:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a6a:	22 ff       	sbrs	r18, 2
    4a6c:	17 c0       	rjmp	.+46     	; 0x4a9c <vfprintf+0x354>
    4a6e:	21 ff       	sbrs	r18, 1
    4a70:	03 c0       	rjmp	.+6      	; 0x4a78 <vfprintf+0x330>
    4a72:	88 e5       	ldi	r24, 0x58	; 88
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	02 c0       	rjmp	.+4      	; 0x4a7c <vfprintf+0x334>
    4a78:	88 e7       	ldi	r24, 0x78	; 120
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	b7 01       	movw	r22, r14
    4a7e:	0c c0       	rjmp	.+24     	; 0x4a98 <vfprintf+0x350>
    4a80:	82 2f       	mov	r24, r18
    4a82:	86 78       	andi	r24, 0x86	; 134
    4a84:	59 f0       	breq	.+22     	; 0x4a9c <vfprintf+0x354>
    4a86:	21 fd       	sbrc	r18, 1
    4a88:	02 c0       	rjmp	.+4      	; 0x4a8e <vfprintf+0x346>
    4a8a:	80 e2       	ldi	r24, 0x20	; 32
    4a8c:	01 c0       	rjmp	.+2      	; 0x4a90 <vfprintf+0x348>
    4a8e:	8b e2       	ldi	r24, 0x2B	; 43
    4a90:	27 fd       	sbrc	r18, 7
    4a92:	8d e2       	ldi	r24, 0x2D	; 45
    4a94:	b7 01       	movw	r22, r14
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    4a9c:	a5 14       	cp	r10, r5
    4a9e:	38 f4       	brcc	.+14     	; 0x4aae <vfprintf+0x366>
    4aa0:	b7 01       	movw	r22, r14
    4aa2:	80 e3       	ldi	r24, 0x30	; 48
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    4aaa:	5a 94       	dec	r5
    4aac:	f7 cf       	rjmp	.-18     	; 0x4a9c <vfprintf+0x354>
    4aae:	aa 94       	dec	r10
    4ab0:	f4 01       	movw	r30, r8
    4ab2:	ea 0d       	add	r30, r10
    4ab4:	f1 1d       	adc	r31, r1
    4ab6:	80 81       	ld	r24, Z
    4ab8:	b7 01       	movw	r22, r14
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    4ac0:	a1 10       	cpse	r10, r1
    4ac2:	f5 cf       	rjmp	.-22     	; 0x4aae <vfprintf+0x366>
    4ac4:	33 20       	and	r3, r3
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <vfprintf+0x382>
    4ac8:	51 ce       	rjmp	.-862    	; 0x476c <vfprintf+0x24>
    4aca:	b7 01       	movw	r22, r14
    4acc:	80 e2       	ldi	r24, 0x20	; 32
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <fputc>
    4ad4:	3a 94       	dec	r3
    4ad6:	f6 cf       	rjmp	.-20     	; 0x4ac4 <vfprintf+0x37c>
    4ad8:	f7 01       	movw	r30, r14
    4ada:	86 81       	ldd	r24, Z+6	; 0x06
    4adc:	97 81       	ldd	r25, Z+7	; 0x07
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <vfprintf+0x39c>
    4ae0:	8f ef       	ldi	r24, 0xFF	; 255
    4ae2:	9f ef       	ldi	r25, 0xFF	; 255
    4ae4:	2c 96       	adiw	r28, 0x0c	; 12
    4ae6:	e2 e1       	ldi	r30, 0x12	; 18
    4ae8:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__epilogue_restores__>

00004aec <strnlen_P>:
    4aec:	fc 01       	movw	r30, r24
    4aee:	05 90       	lpm	r0, Z+
    4af0:	61 50       	subi	r22, 0x01	; 1
    4af2:	70 40       	sbci	r23, 0x00	; 0
    4af4:	01 10       	cpse	r0, r1
    4af6:	d8 f7       	brcc	.-10     	; 0x4aee <strnlen_P+0x2>
    4af8:	80 95       	com	r24
    4afa:	90 95       	com	r25
    4afc:	8e 0f       	add	r24, r30
    4afe:	9f 1f       	adc	r25, r31
    4b00:	08 95       	ret

00004b02 <strnlen>:
    4b02:	fc 01       	movw	r30, r24
    4b04:	61 50       	subi	r22, 0x01	; 1
    4b06:	70 40       	sbci	r23, 0x00	; 0
    4b08:	01 90       	ld	r0, Z+
    4b0a:	01 10       	cpse	r0, r1
    4b0c:	d8 f7       	brcc	.-10     	; 0x4b04 <strnlen+0x2>
    4b0e:	80 95       	com	r24
    4b10:	90 95       	com	r25
    4b12:	8e 0f       	add	r24, r30
    4b14:	9f 1f       	adc	r25, r31
    4b16:	08 95       	ret

00004b18 <fputc>:
    4b18:	0f 93       	push	r16
    4b1a:	1f 93       	push	r17
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
    4b20:	18 2f       	mov	r17, r24
    4b22:	09 2f       	mov	r16, r25
    4b24:	eb 01       	movw	r28, r22
    4b26:	8b 81       	ldd	r24, Y+3	; 0x03
    4b28:	81 fd       	sbrc	r24, 1
    4b2a:	03 c0       	rjmp	.+6      	; 0x4b32 <fputc+0x1a>
    4b2c:	8f ef       	ldi	r24, 0xFF	; 255
    4b2e:	9f ef       	ldi	r25, 0xFF	; 255
    4b30:	20 c0       	rjmp	.+64     	; 0x4b72 <fputc+0x5a>
    4b32:	82 ff       	sbrs	r24, 2
    4b34:	10 c0       	rjmp	.+32     	; 0x4b56 <fputc+0x3e>
    4b36:	4e 81       	ldd	r20, Y+6	; 0x06
    4b38:	5f 81       	ldd	r21, Y+7	; 0x07
    4b3a:	2c 81       	ldd	r18, Y+4	; 0x04
    4b3c:	3d 81       	ldd	r19, Y+5	; 0x05
    4b3e:	42 17       	cp	r20, r18
    4b40:	53 07       	cpc	r21, r19
    4b42:	7c f4       	brge	.+30     	; 0x4b62 <fputc+0x4a>
    4b44:	e8 81       	ld	r30, Y
    4b46:	f9 81       	ldd	r31, Y+1	; 0x01
    4b48:	9f 01       	movw	r18, r30
    4b4a:	2f 5f       	subi	r18, 0xFF	; 255
    4b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4e:	39 83       	std	Y+1, r19	; 0x01
    4b50:	28 83       	st	Y, r18
    4b52:	10 83       	st	Z, r17
    4b54:	06 c0       	rjmp	.+12     	; 0x4b62 <fputc+0x4a>
    4b56:	e8 85       	ldd	r30, Y+8	; 0x08
    4b58:	f9 85       	ldd	r31, Y+9	; 0x09
    4b5a:	81 2f       	mov	r24, r17
    4b5c:	09 95       	icall
    4b5e:	89 2b       	or	r24, r25
    4b60:	29 f7       	brne	.-54     	; 0x4b2c <fputc+0x14>
    4b62:	2e 81       	ldd	r18, Y+6	; 0x06
    4b64:	3f 81       	ldd	r19, Y+7	; 0x07
    4b66:	2f 5f       	subi	r18, 0xFF	; 255
    4b68:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6a:	3f 83       	std	Y+7, r19	; 0x07
    4b6c:	2e 83       	std	Y+6, r18	; 0x06
    4b6e:	81 2f       	mov	r24, r17
    4b70:	90 2f       	mov	r25, r16
    4b72:	df 91       	pop	r29
    4b74:	cf 91       	pop	r28
    4b76:	1f 91       	pop	r17
    4b78:	0f 91       	pop	r16
    4b7a:	08 95       	ret

00004b7c <__ultoa_invert>:
    4b7c:	fa 01       	movw	r30, r20
    4b7e:	aa 27       	eor	r26, r26
    4b80:	28 30       	cpi	r18, 0x08	; 8
    4b82:	51 f1       	breq	.+84     	; 0x4bd8 <__ultoa_invert+0x5c>
    4b84:	20 31       	cpi	r18, 0x10	; 16
    4b86:	81 f1       	breq	.+96     	; 0x4be8 <__ultoa_invert+0x6c>
    4b88:	e8 94       	clt
    4b8a:	6f 93       	push	r22
    4b8c:	6e 7f       	andi	r22, 0xFE	; 254
    4b8e:	6e 5f       	subi	r22, 0xFE	; 254
    4b90:	7f 4f       	sbci	r23, 0xFF	; 255
    4b92:	8f 4f       	sbci	r24, 0xFF	; 255
    4b94:	9f 4f       	sbci	r25, 0xFF	; 255
    4b96:	af 4f       	sbci	r26, 0xFF	; 255
    4b98:	b1 e0       	ldi	r27, 0x01	; 1
    4b9a:	3e d0       	rcall	.+124    	; 0x4c18 <__ultoa_invert+0x9c>
    4b9c:	b4 e0       	ldi	r27, 0x04	; 4
    4b9e:	3c d0       	rcall	.+120    	; 0x4c18 <__ultoa_invert+0x9c>
    4ba0:	67 0f       	add	r22, r23
    4ba2:	78 1f       	adc	r23, r24
    4ba4:	89 1f       	adc	r24, r25
    4ba6:	9a 1f       	adc	r25, r26
    4ba8:	a1 1d       	adc	r26, r1
    4baa:	68 0f       	add	r22, r24
    4bac:	79 1f       	adc	r23, r25
    4bae:	8a 1f       	adc	r24, r26
    4bb0:	91 1d       	adc	r25, r1
    4bb2:	a1 1d       	adc	r26, r1
    4bb4:	6a 0f       	add	r22, r26
    4bb6:	71 1d       	adc	r23, r1
    4bb8:	81 1d       	adc	r24, r1
    4bba:	91 1d       	adc	r25, r1
    4bbc:	a1 1d       	adc	r26, r1
    4bbe:	20 d0       	rcall	.+64     	; 0x4c00 <__ultoa_invert+0x84>
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <__ultoa_invert+0x48>
    4bc2:	68 94       	set
    4bc4:	3f 91       	pop	r19
    4bc6:	2a e0       	ldi	r18, 0x0A	; 10
    4bc8:	26 9f       	mul	r18, r22
    4bca:	11 24       	eor	r1, r1
    4bcc:	30 19       	sub	r19, r0
    4bce:	30 5d       	subi	r19, 0xD0	; 208
    4bd0:	31 93       	st	Z+, r19
    4bd2:	de f6       	brtc	.-74     	; 0x4b8a <__ultoa_invert+0xe>
    4bd4:	cf 01       	movw	r24, r30
    4bd6:	08 95       	ret
    4bd8:	46 2f       	mov	r20, r22
    4bda:	47 70       	andi	r20, 0x07	; 7
    4bdc:	40 5d       	subi	r20, 0xD0	; 208
    4bde:	41 93       	st	Z+, r20
    4be0:	b3 e0       	ldi	r27, 0x03	; 3
    4be2:	0f d0       	rcall	.+30     	; 0x4c02 <__ultoa_invert+0x86>
    4be4:	c9 f7       	brne	.-14     	; 0x4bd8 <__ultoa_invert+0x5c>
    4be6:	f6 cf       	rjmp	.-20     	; 0x4bd4 <__ultoa_invert+0x58>
    4be8:	46 2f       	mov	r20, r22
    4bea:	4f 70       	andi	r20, 0x0F	; 15
    4bec:	40 5d       	subi	r20, 0xD0	; 208
    4bee:	4a 33       	cpi	r20, 0x3A	; 58
    4bf0:	18 f0       	brcs	.+6      	; 0x4bf8 <__ultoa_invert+0x7c>
    4bf2:	49 5d       	subi	r20, 0xD9	; 217
    4bf4:	31 fd       	sbrc	r19, 1
    4bf6:	40 52       	subi	r20, 0x20	; 32
    4bf8:	41 93       	st	Z+, r20
    4bfa:	02 d0       	rcall	.+4      	; 0x4c00 <__ultoa_invert+0x84>
    4bfc:	a9 f7       	brne	.-22     	; 0x4be8 <__ultoa_invert+0x6c>
    4bfe:	ea cf       	rjmp	.-44     	; 0x4bd4 <__ultoa_invert+0x58>
    4c00:	b4 e0       	ldi	r27, 0x04	; 4
    4c02:	a6 95       	lsr	r26
    4c04:	97 95       	ror	r25
    4c06:	87 95       	ror	r24
    4c08:	77 95       	ror	r23
    4c0a:	67 95       	ror	r22
    4c0c:	ba 95       	dec	r27
    4c0e:	c9 f7       	brne	.-14     	; 0x4c02 <__ultoa_invert+0x86>
    4c10:	00 97       	sbiw	r24, 0x00	; 0
    4c12:	61 05       	cpc	r22, r1
    4c14:	71 05       	cpc	r23, r1
    4c16:	08 95       	ret
    4c18:	9b 01       	movw	r18, r22
    4c1a:	ac 01       	movw	r20, r24
    4c1c:	0a 2e       	mov	r0, r26
    4c1e:	06 94       	lsr	r0
    4c20:	57 95       	ror	r21
    4c22:	47 95       	ror	r20
    4c24:	37 95       	ror	r19
    4c26:	27 95       	ror	r18
    4c28:	ba 95       	dec	r27
    4c2a:	c9 f7       	brne	.-14     	; 0x4c1e <__ultoa_invert+0xa2>
    4c2c:	62 0f       	add	r22, r18
    4c2e:	73 1f       	adc	r23, r19
    4c30:	84 1f       	adc	r24, r20
    4c32:	95 1f       	adc	r25, r21
    4c34:	a0 1d       	adc	r26, r0
    4c36:	08 95       	ret

00004c38 <_exit>:
    4c38:	f8 94       	cli

00004c3a <__stop_program>:
    4c3a:	ff cf       	rjmp	.-2      	; 0x4c3a <__stop_program>
